<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codexdawn</title>
  
  
  <link href="https://codexdawn.github.io/atom.xml" rel="self"/>
  
  <link href="https://codexdawn.github.io/"/>
  <updated>2021-04-20T14:26:18.305Z</updated>
  <id>https://codexdawn.github.io/</id>
  
  <author>
    <name>codexdawn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>high-end-mapping</title>
    <link href="https://codexdawn.github.io/2021/04/19/high-end-mapping/"/>
    <id>https://codexdawn.github.io/2021/04/19/high-end-mapping/</id>
    <published>2021-04-19T11:09:38.000Z</published>
    <updated>2021-04-20T14:26:18.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="고급매핑"><a href="#고급매핑" class="headerlink" title="고급매핑"></a>고급매핑</h1><blockquote><p>고급매핑에서 배울 내용들 정리 </p><ol><li>상속관계 매핑 : 객체의 상속관계를 DB에 어떻게 매핑하는지 </li><li>@MappedSuperclass : 등록일,수정일 같이 여러 엔티티에서 공통으로 사용하는 매핑정보만 상속받고 싶으면 이 기능을 활용한다. </li><li>복합키와 식별관계 매핑 : DB의 식별자가 하나 이상일때 매핑하는 방법. 그리고 DB설계에서 이야기하는 식별관계와 비식별관계에 대해서 다룬다. </li><li>조인 테이블 : 테이블은 외래키 하나로 연관관계를 맺을 수 있지만 연관관계를 관리하는 연결 테이블을 두는 방법도 있다. 여기서는 연결 테이블을 매핑하는 방법을 다룬다. </li><li>엔티티 하나에 여러 테이블 매핑하기 : 보통 엔티티 하나에 테이블 하나를 매핑하지만 엔티티 하나에 여러 테이블을 매핑하는 방법도 있다.   </li></ol></blockquote><h2 id="1-상속관계-매핑"><a href="#1-상속관계-매핑" class="headerlink" title="1. 상속관계 매핑"></a>1. 상속관계 매핑</h2><h3 id="1-1-조인-전략"><a href="#1-1-조인-전략" class="headerlink" title="1-1. 조인 전략"></a>1-1. 조인 전략</h3><p>![조인전략 예시](/image/join inheritence.png)</p><figure class="highlight java"><figcaption><span>조인전략예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Inheritance(strategy = Inheritence.JOINED)</span></span><br><span class="line"><span class="meta">@DiscriminatorColumn(name = &quot;DTYPE&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Column(name = &quot;item_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long id; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> price; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//...setter/getter생략</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span> </span><br><span class="line"><span class="meta">@DiscriminatorValue(&quot;A&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Album</span> <span class="keyword">extends</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String artist; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span> </span><br><span class="line"><span class="meta">@DiscriminatorValue(&quot;M&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Movie</span> <span class="keyword">extends</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String director; </span><br><span class="line"><span class="keyword">private</span> String actor; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h4><ul><li>테이블이 정규화 됨 </li><li>외래키 참조 무결성 제약조건을 활용할수 있다.</li><li>저장공간을 효율적으로 사용함 </li></ul><h4 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h4><ul><li>조회할때 조인이 많이 사용되므로 성능이 저하될수 있다. </li><li>조회 쿼리가 복잡하다. </li><li>데이터를 등록할 insert sql을 두번 실행됨. </li></ul><h3 id="1-2-단일-테이블-전략"><a href="#1-2-단일-테이블-전략" class="headerlink" title="1-2. 단일 테이블 전략"></a>1-2. 단일 테이블 전략</h3><p>![조인테이블 전략 예시](/image/high-end-mapping/single table.png)</p><figure class="highlight java"><figcaption><span>단일테이블 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Inheritance(strategy = Inheritence.SINGLE_TABLE)</span></span><br><span class="line"><span class="meta">@DiscriminatorColumn(name = &quot;DTYPE&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Column(name = &quot;item_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long id; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> price; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//...setter/getter생략</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span> </span><br><span class="line"><span class="meta">@DiscriminatorValue(&quot;A&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Album</span> <span class="keyword">extends</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String artist; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span> </span><br><span class="line"><span class="meta">@DiscriminatorValue(&quot;M&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Movie</span> <span class="keyword">extends</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String director; </span><br><span class="line"><span class="keyword">private</span> String actor; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="장점-1"><a href="#장점-1" class="headerlink" title="장점"></a>장점</h4><ul><li>조인이 필요없으므로 일반적으로 조회성능이 빠름.</li><li>조회 쿼리가 단순해짐 </li></ul><h4 id="단점-1"><a href="#단점-1" class="headerlink" title="단점"></a>단점</h4><ul><li>자식 엔티티가 매핑한 컬럼은 모두 null을 허용해야한다.</li><li>단일 테이블에 모든것을 저장하므로 테이블이 커질수 있다. 상황에 따라서는 조회성능이 오히려 느려질수도 있음. </li></ul><h4 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h4><ul><li>구분 컬럼을 꼭 사용해야함. (@DiscriminatorColumn)</li><li>구분 컬럼 지정안하면 엔티티 이름으로 자동 지정됨. </li></ul><h3 id="1-3-구현-클래스마다-테이블-전략"><a href="#1-3-구현-클래스마다-테이블-전략" class="headerlink" title="1-3. 구현 클래스마다 테이블 전략"></a>1-3. 구현 클래스마다 테이블 전략</h3><p><img src="/.io//table-per-concrete-class.png" alt="구현 클래스마다 테이블 전략"></p><figure class="highlight java"><figcaption><span>구현클래스마다 테이블 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Inheritance(strategy = Inheritence.TABLE_PER_CLASS)</span></span><br><span class="line"><span class="meta">@DiscriminatorColumn(name = &quot;DTYPE&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Column(name = &quot;item_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long id; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> price; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//...setter/getter생략</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Album</span> <span class="keyword">extends</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String artist; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Movie</span> <span class="keyword">extends</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String director; </span><br><span class="line"><span class="keyword">private</span> String actor; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="장점-2"><a href="#장점-2" class="headerlink" title="장점"></a>장점</h4><ul><li>서브타입을 구분해서 처리할때 효과적 </li><li>not null 제약조건을 사용할수 있음.</li></ul><h4 id="단점-2"><a href="#단점-2" class="headerlink" title="단점"></a>단점</h4><ul><li>여러 자식 테이블을 함께 조회할때 성능이 느림(union사용해야함) </li><li>자식 테이블을 통합해서 관리하기 어려움 </li></ul><h4 id="특징-1"><a href="#특징-1" class="headerlink" title="특징"></a>특징</h4><ul><li>구분 컬럼을 사용안함</li><li>일반적으로 사용안하길 권장되는 전략 </li></ul><h2 id="2-MappedSuperclass"><a href="#2-MappedSuperclass" class="headerlink" title="2. @MappedSuperclass"></a>2. @MappedSuperclass</h2><p><img src="/.io//mappedsuperclass.png" alt="@MappedSuperClass"></p><figure class="highlight java"><figcaption><span>MappedSuperClass예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MappedSuperClass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="keyword">private</span> Long id; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line"><span class="comment">//...setter/getter생략</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@AttributeOverrides(</span></span><br><span class="line"><span class="meta">@AttributeOverride(name = &quot;id&quot;, column= @Column(name = &quot;member_id&quot;)),</span></span><br><span class="line"><span class="meta">@AttributeOverride(name = &quot;name&quot;, column = @Column(name=&quot;member_name&quot;))</span></span><br><span class="line"><span class="meta">)</span> <span class="comment">// 부모로부터 물려받은 매핑정보를 재정의 위와 같이 재정의 할수 있음. </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String email; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Seller</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String shopName; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="특징-2"><a href="#특징-2" class="headerlink" title="특징"></a>특징</h4><ul><li>상속관계 매핑이 아니다. </li><li>@MappedSuperClass로 지정된 클래스는 엔티티가 아니므로, em.find 혹은 JPQL 조회 불가능 하다.</li><li>부모 클래스를 상속받는 자식클래스에 매핑정보만 제공 </li><li>이 클래스를 직접 사용할일이 없기때문에 추상클래스로 만드는걸 권장함 </li><li>테이블과 관계없고 단순히 엔티티가 공통으로 사용하는 매핑정보를 모으는 역할 </li><li>주로 등록일, 수정일, 등록자, 수정자 같은 전체 엔티티에서 공통으로 적용하는 정보를 모을때 사용 </li><li>참고 : @Entity 클래스는 엔티티나 @MappedSuperClass로 지정한 클래스만 사속 가능 </li></ul><h2 id="3-복합키와-식별관계-매핑"><a href="#3-복합키와-식별관계-매핑" class="headerlink" title="3. 복합키와 식별관계 매핑"></a>3. 복합키와 식별관계 매핑</h2><h3 id="3-1-식별관계-VS-비식별관계"><a href="#3-1-식별관계-VS-비식별관계" class="headerlink" title="3-1. 식별관계 VS 비식별관계"></a>3-1. 식별관계 VS 비식별관계</h3><h4 id="식별관계"><a href="#식별관계" class="headerlink" title="식별관계"></a>식별관계</h4><ul><li>식별관계는 부모 테이블의 기본키를 내려받아서 자식테이블의 (기본키+외래키) 로 사용하는 관계 </li></ul><h4 id="비식별관계"><a href="#비식별관계" class="headerlink" title="비식별관계"></a>비식별관계</h4><ul><li>부모테이블의 기본키를 받아서 자식 테이블의 외래키로만 사용하는 관계 </li></ul><h5 id="3-1-1-복합키-비식별-관계-매핑"><a href="#3-1-1-복합키-비식별-관계-매핑" class="headerlink" title="3-1-1. 복합키 : 비식별 관계 매핑"></a>3-1-1. 복합키 : 비식별 관계 매핑</h5><p>JPA는 복합키 지원을 위해 @IdClass와 @EmbeddedId 2가지 방법을 제공하는데 @IdClass는 관계형데이터베이스에 가까운 방법이고, @EmbeddedId는 좀 더 객체지향에 가까운 방법이다. </p><h6 id="IdClass"><a href="#IdClass" class="headerlink" title="@IdClass"></a>@IdClass</h6><figure class="highlight java"><figcaption><span>복합키 IdClass예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@IdClass(ParentId.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span> </span><br><span class="line"><span class="meta">@Column(name=&quot;parent_id1&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String id1;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span> </span><br><span class="line"><span class="meta">@Column(name=&quot;parent_id2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String id2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParentId</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="comment">//식별자 클래스의 속성명과 엔티티에서 사용하는 식별자의 속성명이 같아야함!! </span></span><br><span class="line"><span class="keyword">private</span> String id1;</span><br><span class="line"><span class="keyword">private</span> String id2; </span><br><span class="line"></span><br><span class="line"><span class="comment">//기본생성자 필수</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ParentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ParentId</span><span class="params">(String id1, String id2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id1 = id1;</span><br><span class="line"><span class="keyword">this</span>.id2 = id2; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//equals &amp; hashcode 는 반드시 구현되어야함.</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//저장</span></span><br><span class="line">Parent p = <span class="keyword">new</span> Parent();</span><br><span class="line">p.setId1(<span class="string">&quot;id1&quot;</span>);</span><br><span class="line">p.setId2(<span class="string">&quot;id2&quot;</span>);</span><br><span class="line">p.setName(<span class="string">&quot;pName&quot;</span>);</span><br><span class="line">em.persist(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">//조회 </span></span><br><span class="line">ParentId pid = <span class="keyword">new</span> ParentId(<span class="string">&quot;id1&quot;</span>,<span class="string">&quot;id2&quot;</span>);</span><br><span class="line">Parent p = em.find(Parent.class,parentId);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Child클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="keyword">private</span> String id; </span><br><span class="line"></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumns(&#123;</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;parent_id1&quot;, referenceColumnName = &quot;parent_id1&quot;),</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;parent_id2&quot;, referenceColumnName = &quot;parent_id2&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">private</span> Parent parent; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="EmbeddedId"><a href="#EmbeddedId" class="headerlink" title="EmbeddedId"></a>EmbeddedId</h6><figure class="highlight java"><figcaption><span>복합키 EmbeddedId 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@IdClass(ParentId.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EmbeddedId</span> </span><br><span class="line"><span class="keyword">private</span> ParentId id2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParentId</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="comment">//식별자 클래스의 속성명과 엔티티에서 사용하는 식별자의 속성명이 같아야함!! </span></span><br><span class="line"><span class="meta">@Column(name = &quot;parent_id1&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String id1;</span><br><span class="line"><span class="meta">@Column(name = &quot;parent_id2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String id2; </span><br><span class="line"></span><br><span class="line"><span class="comment">//기본생성자 필수</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ParentId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ParentId</span><span class="params">(String id1, String id2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id1 = id1;</span><br><span class="line"><span class="keyword">this</span>.id2 = id2; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//equals &amp; hashcode 는 반드시 구현되어야함.</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//저장</span></span><br><span class="line">Parent p = <span class="keyword">new</span> Parent();</span><br><span class="line">ParentId pid = <span class="keyword">new</span> ParentId(<span class="string">&quot;id1&quot;</span>,<span class="string">&quot;id2&quot;</span>);</span><br><span class="line">p.setId(pid);</span><br><span class="line">p.setName(<span class="string">&quot;pName&quot;</span>);</span><br><span class="line">em.persist(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">//조회 </span></span><br><span class="line">ParentId pid = <span class="keyword">new</span> ParentId(<span class="string">&quot;id1&quot;</span>,<span class="string">&quot;id2&quot;</span>);</span><br><span class="line">Parent p = em.find(Parent.class,parentId);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Child클래스</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="keyword">private</span> String id; </span><br><span class="line"></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumns(&#123;</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;parent_id1&quot;, referenceColumnName = &quot;parent_id1&quot;),</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;parent_id2&quot;, referenceColumnName = &quot;parent_id2&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">private</span> Parent parent; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-1-2-복합키-식별-관계-매핑"><a href="#3-1-2-복합키-식별-관계-매핑" class="headerlink" title="3-1-2. 복합키 : 식별 관계 매핑"></a>3-1-2. 복합키 : 식별 관계 매핑</h5><p>복합키 식별관계 매핑은 부모,자식,손자까지 계속 기본 키를 전달하는 식별관계 이다. 식별 관계에서 자식 테이블은 부모 테이블의 기본 키를 포함해서 복합 키를 구성해야 하므로 @IdClass나 @EmbeddedId를 사용해서 식별자를 매핑해야한다. </p><h6 id="IdClass-1"><a href="#IdClass-1" class="headerlink" title="@IdClass"></a>@IdClass</h6><figure class="highlight java"><figcaption><span>복합키: 식별관계 매핑 IdClass 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@Column(name=&quot;parent_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> ParentId id2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Child클래스</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@IdClass(ChildId.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;parent_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Parent parent; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span> <span class="meta">@Column(name = &quot;child_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String childId; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildId</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String parent; <span class="comment">//Child.parent 매핑</span></span><br><span class="line"><span class="keyword">private</span> String childId; <span class="comment">//Child.childId 매핑</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//equals,hashcode 재정의 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span> </span><br><span class="line"><span class="meta">@IdClass(GrandChildId.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GrandChild</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumns(&#123;</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;parent_id&quot;),</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;child_id&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">private</span> Child child;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span> <span class="meta">@Column(name = &quot;GRANDCHILD_ID&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String id; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GrandChildId</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ChildId child; <span class="comment">//GrandChild.child 매핑</span></span><br><span class="line"><span class="keyword">private</span> String id; <span class="comment">//GrandChild.id 매핑</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//equals,hashcode재정의 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="EmbeddedId-1"><a href="#EmbeddedId-1" class="headerlink" title="@EmbeddedId"></a>@EmbeddedId</h6><figure class="highlight java"><figcaption><span>복합키: 식별관계 매핑 EmbeddedId 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@Column(name=&quot;parent_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> ParentId id2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Child클래스</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@IdClass(ChildId.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line"><span class="meta">@EmbeddedId</span></span><br><span class="line"><span class="keyword">private</span> String childId; </span><br><span class="line"></span><br><span class="line"><span class="meta">@MapsId(&quot;parentId&quot;)</span></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;parent_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Parent parent; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildId</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String parent; <span class="comment">//MapsId(&quot;parentId&quot;) 매핑</span></span><br><span class="line"><span class="keyword">private</span> String childId; <span class="comment">//Child.childId 매핑</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//equals,hashcode 재정의 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GrandChild</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EmbeddedId</span></span><br><span class="line"><span class="keyword">private</span> GrandChildId id; </span><br><span class="line"></span><br><span class="line"><span class="meta">@MapsId(&quot;childId&quot;)</span></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumns(&#123;</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;parent_id&quot;),</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;child_id&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">private</span> Child child;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GrandChildId</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ChildId child; <span class="comment">//MapsId(&quot;childId&quot;) 매핑</span></span><br><span class="line"><span class="keyword">private</span> String id; </span><br><span class="line"></span><br><span class="line"><span class="comment">//equals,hashcode재정의 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-1-3-비식별-관계-매핑-복합키-X"><a href="#3-1-3-비식별-관계-매핑-복합키-X" class="headerlink" title="3-1-3. 비식별 관계 매핑 : 복합키 X"></a>3-1-3. 비식별 관계 매핑 : 복합키 X</h5><figure class="highlight java"><figcaption><span>비식별관계 매핑 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Column(name=&quot;parent_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Child클래스</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Column(name=&quot;child_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long id; </span><br><span class="line"></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;parent_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Parent parent; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GrandChild</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Column(name =&quot;grandchild_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long id; </span><br><span class="line"></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name=&quot;child_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Child child;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-1-4-일대일-식별관계"><a href="#3-1-4-일대일-식별관계" class="headerlink" title="3-1-4 일대일 식별관계"></a>3-1-4 일대일 식별관계</h5><figure class="highlight java"><figcaption><span>일대일 식별관계</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Board</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span> <span class="meta">@GeneratedValue</span> </span><br><span class="line"><span class="keyword">private</span> Long id; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String title; </span><br><span class="line"></span><br><span class="line"><span class="meta">@OneToOne(mappedBy = &quot;borad&quot;)</span></span><br><span class="line"><span class="keyword">private</span> BoardDetail boardDetail; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardDetail</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="keyword">private</span> Long boardId;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MapsId</span> <span class="comment">//BoardDetail.boardId 매핑 </span></span><br><span class="line"><span class="meta">@OneToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;board_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Board board; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String content; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//저장 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Board board = <span class="keyword">new</span> Board(); </span><br><span class="line">board.setTitle(<span class="string">&quot;제목&quot;</span>);</span><br><span class="line">em.persist(board); </span><br><span class="line"></span><br><span class="line">BoardDetail boardDetail = <span class="keyword">new</span> BoardDetail();</span><br><span class="line">boardDetail.setContent(<span class="string">&quot;내용&quot;</span>);</span><br><span class="line">boardDetail.setBoard(board);</span><br><span class="line">em.persist(boardDetail); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-조인-테이블"><a href="#4-조인-테이블" class="headerlink" title="4. 조인 테이블"></a>4. 조인 테이블</h2><h3 id="4-1-1-1-조인-테이블"><a href="#4-1-1-1-조인-테이블" class="headerlink" title="4-1. 1:1 조인 테이블"></a>4-1. 1:1 조인 테이블</h3><figure class="highlight java"><figcaption><span>1:1 조인테이블 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Column(name=&quot;parent_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line"><span class="meta">@OneToOne</span></span><br><span class="line"><span class="meta">@JoinTable(name = &quot;parent_child&quot;)</span>, </span><br><span class="line">joinColumns(name = <span class="meta">@JoinColumn(name = &quot;parent_id&quot;)</span>,</span><br><span class="line">inverseJoinColumns(name=<span class="string">&quot;child_id&quot;</span>))</span><br><span class="line"><span class="keyword">private</span> Child child; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Child클래스</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Column(name=&quot;child_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long id; </span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 양방향 연관관계 매핑 하려면 아래코드작성 </span></span><br><span class="line"><span class="comment">@OneToOne(mappedBy=&quot;child&quot;)</span></span><br><span class="line"><span class="comment">private Parent parent; </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-1-N-조인-테이블"><a href="#4-2-1-N-조인-테이블" class="headerlink" title="4-2. 1:N 조인 테이블"></a>4-2. 1:N 조인 테이블</h3><figure class="highlight java"><figcaption><span>1:N 조인테이블 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Column(name=&quot;parent_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line"><span class="meta">@OneToMany</span></span><br><span class="line"><span class="meta">@JoinTable(name = &quot;parent_child&quot;)</span>, </span><br><span class="line">joinColumns(name = <span class="meta">@JoinColumn(name = &quot;parent_id&quot;)</span>,</span><br><span class="line">inverseJoinColumns(name=<span class="string">&quot;child_id&quot;</span>))</span><br><span class="line"><span class="keyword">private</span> List&lt;Child&gt; child = <span class="keyword">new</span> ArrayList&lt;&gt;(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Child클래스</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Column(name=&quot;child_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long id; </span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-N-1-조인-테이블"><a href="#4-3-N-1-조인-테이블" class="headerlink" title="4-3. N:1 조인 테이블"></a>4-3. N:1 조인 테이블</h3><figure class="highlight java"><figcaption><span>N:1 조인테이블 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Column(name=&quot;parent_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line"><span class="meta">@OneToMany(mappedBy = &quot;parent&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Child&gt; child = <span class="keyword">new</span> ArrayList&lt;&gt;(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Child클래스</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Column(name=&quot;child_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long id; </span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line"><span class="meta">@ManyToOne(optional=false)</span></span><br><span class="line"><span class="meta">@JoinTable(name = &quot;parent_child&quot;)</span>, </span><br><span class="line">joinColumns(name = <span class="meta">@JoinColumn(name = &quot;child_id&quot;)</span>,</span><br><span class="line">inverseJoinColumns(name=<span class="string">&quot;parent_id&quot;</span>))</span><br><span class="line"><span class="keyword">private</span> Parent parent;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-N-M-조인-테이블"><a href="#4-3-N-M-조인-테이블" class="headerlink" title="4-3. N:M 조인 테이블"></a>4-3. N:M 조인 테이블</h3><figure class="highlight java"><figcaption><span>N:M 조인테이블 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Column(name=&quot;parent_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line"><span class="meta">@ManyToMany</span></span><br><span class="line"><span class="meta">@JoinTable(name = &quot;parent_child&quot;)</span>, </span><br><span class="line">joinColumns(name = <span class="meta">@JoinColumn(name = &quot;parent_id&quot;)</span>,</span><br><span class="line">inverseJoinColumns(name=<span class="string">&quot;child_id&quot;</span>))</span><br><span class="line"><span class="keyword">private</span> List&lt;Child&gt; child = <span class="keyword">new</span> ArrayList&lt;&gt;(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Child클래스</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Column(name=&quot;child_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long id; </span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;고급매핑&quot;&gt;&lt;a href=&quot;#고급매핑&quot; class=&quot;headerlink&quot; title=&quot;고급매핑&quot;&gt;&lt;/a&gt;고급매핑&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;고급매핑에서 배울 내용들 정리 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상속관계 매핑 : 객체의 상속관계를</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="자바ORM표준JPA프로그래밍" scheme="https://codexdawn.github.io/categories/%EC%9E%90%EB%B0%94ORM%ED%91%9C%EC%A4%80JPA%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"/>
    
    <category term="고급 매핑" scheme="https://codexdawn.github.io/categories/%EA%B3%A0%EA%B8%89-%EB%A7%A4%ED%95%91/"/>
    
    
    <category term="Java,JPA" scheme="https://codexdawn.github.io/tags/Java-JPA/"/>
    
  </entry>
  
  <entry>
    <title>variable-relation-mapping</title>
    <link href="https://codexdawn.github.io/2021/03/30/variable-relation-mapping/"/>
    <id>https://codexdawn.github.io/2021/03/30/variable-relation-mapping/</id>
    <published>2021-03-30T02:16:25.000Z</published>
    <updated>2021-03-31T10:45:55.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="다양한-연관관계-매핑"><a href="#다양한-연관관계-매핑" class="headerlink" title="다양한 연관관계 매핑"></a>다양한 연관관계 매핑</h1><h2 id="다대일-N-1"><a href="#다대일-N-1" class="headerlink" title="다대일 (N:1)"></a>다대일 (N:1)</h2><blockquote><p>항상 기억해야하는 부분은 객체 양방향 관계에서 연관관계 주인은 항상 N쪽이다. </p></blockquote><h3 id="다대일-단방향-N-1"><a href="#다대일-단방향-N-1" class="headerlink" title="다대일 단방향 (N:1)"></a>다대일 단방향 (N:1)</h3><figure class="highlight java"><figcaption><span>N:1 단방향 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;member_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;team_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Team team;</span><br><span class="line"></span><br><span class="line"><span class="comment">//나머지 생략 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;team_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//나머지생략</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Member는 Member.team으로 팀 엔티티를 참조할수 있지만 반대로 팀에는 Member로 참조하는 필드가 없다. 따라서 회원 과 팀은 단방향 연관관계다. </li><li>Member.team 필드로 회원 테이블의 team_id 외래키를 관리함. </li></ul><h3 id="다대일-양방향-N-1-1-N"><a href="#다대일-양방향-N-1-1-N" class="headerlink" title="다대일 양방향 (N:1, 1:N)"></a>다대일 양방향 (N:1, 1:N)</h3><figure class="highlight java"><figcaption><span>N:1,N:1 양방향 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;member_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;team_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Team team;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//연관관계 편의 메소드 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeTeam</span><span class="params">(Team team)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.team = team;</span><br><span class="line">        team.getMembers().add(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//나머지 생략 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;team_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OneToMany(mappedBy = &quot;team&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Member&gt; members = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//나머지생략</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="양방향은-외래키가-있는-쪽이-연관관계-주인이다"><a href="#양방향은-외래키가-있는-쪽이-연관관계-주인이다" class="headerlink" title="양방향은 외래키가 있는 쪽이 연관관계 주인이다."></a>양방향은 외래키가 있는 쪽이 연관관계 주인이다.</h4><ul><li>항상 N 쪽에 <strong>연관관계 주인</strong> 이다. 따라서 주인은 외래키를 통해 수정권한이 주어지지만, 주인이 아닌 반대방향은 조회만 가능하다. (JPQL,객체그래프 탐색할때 사용)</li></ul><h4 id="양방향-연관관계는-항상-서로를-참조해야-한다"><a href="#양방향-연관관계는-항상-서로를-참조해야-한다" class="headerlink" title="양방향 연관관계는 항상 서로를 참조해야 한다."></a>양방향 연관관계는 항상 서로를 참조해야 한다.</h4><ul><li>양방향 연관관계는 항상 서로 참조해야함. 어느 한쪽만 참조하면 양방향 연관관계가 성립하지 않는다. </li><li>서로 참조하려면 <strong>연관관계 편의 메소드</strong> 를 작성하는것을 추천 (ex&gt; changeTeam) </li><li>연관관계 편의 메소드 작성시 주의점은 한쪽 엔티티에만 존재해야함. 양쪽다 편의메소드를 작성하면 나중에 무한루프에 빠질수있음. </li></ul><h2 id="일대다-1-N"><a href="#일대다-1-N" class="headerlink" title="일대다 (1:N)"></a>일대다 (1:N)</h2><p>일대다는 다대일 관계의 반대방향이다. 일대다 관계는 엔티티를 하나 이상 참조할수 있으므로 자바 컬렉션인 Collection, List, Set, Map 중에 하나를 사용해야한다. </p><h3 id="일대다-단방향-1-N"><a href="#일대다-단방향-1-N" class="headerlink" title="일대다 단방향 (1:N)"></a>일대다 단방향 (1:N)</h3><p>일대다 단방향은 가급적 추천하지 않는 방식이다. 아래 단점을 확인해보자. </p><h4 id="일대다-단방향-매핑의-단점"><a href="#일대다-단방향-매핑의-단점" class="headerlink" title="일대다 단방향 매핑의 단점"></a>일대다 단방향 매핑의 단점</h4><ol><li>매핑한 객체가 관리하는 외래키가 다른 테이블에 있다는점. </li><li>N:1 방식처럼 외래키를 관리하면 INSERT문을 한번만 날리면되지만, 1:N방식은 INSERT문을 수행하고 UPDATE문도 동시에 수행해야함.<br>결론은 <strong>일대다 단방향 매핑보다는 다대일 양방향 매핑을 사용하자</strong> </li></ol><h3 id="일대다-양방향-1-N-N-1"><a href="#일대다-양방향-1-N-N-1" class="headerlink" title="일대다 양방향 (1:N, N:1)"></a>일대다 양방향 (1:N, N:1)</h3><ul><li>원칙상 일대다 양방향 매핑은 존재하지 않는다. 하지만 꼼수를 통해서 가능은한데, 비주인 엔티티(ex&gt; Member)에 @Column 쪽에서 insertable, updatable을 false로 막아놓는다. </li><li>하지만 절대로 권장하는 방식이 아니며, 다대일 양방향 매핑을 활용하는 방향으로 가자! </li></ul><h2 id="일대일-1-1"><a href="#일대일-1-1" class="headerlink" title="일대일 (1:1)"></a>일대일 (1:1)</h2><ul><li>일대일 관계는 그 반대도 일대일 관계</li><li>테이블 관계에서 일대다, 다대일은 항상 N쪽이 외래 키를 가진다. 반면에 일대일 관계는 주테이블이나 대상테이블 둘 중 어느곳이나 외래키를 가질수 있다. </li></ul><blockquote><p>1:1은 그럼 어디에 외래키를 가져야할까? </p><ol><li><p>주테이블에 외래키 </p><ul><li>주객체가 대상 객체를 참조하는것처럼 주테이블에 외래키를 두고 대상 테이블을 참조한다. 외래키를 객체 참조와 비슷하게 사용 할수 있어서 객체지향 개발자들이 선호한다. 이방법의 장점은 주 테이블이 외래키를 가지고 있으므로 주 테이블만 확인해도 대상테이블과 연관관계가 있는지 알수있음. </li></ul></li><li><p>대상 테이블에 외래키 </p><ul><li>전통적인 DB개발자들은 보통 대상 테이블에 외래키를 두는것을 선호함. 이 방법의 장점은 테이블 관계를 일대일에서 일대다로 변경할 때 테이블 구조를 그대로 유지할수 있다. </li></ul></li></ol></blockquote><h3 id="주-테이블의-외래키"><a href="#주-테이블의-외래키" class="headerlink" title="주 테이블의 외래키"></a>주 테이블의 외래키</h3><h4 id="단방향"><a href="#단방향" class="headerlink" title="단방향"></a>단방향</h4><figure class="highlight java"><figcaption><span>1:1 단방향 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;member_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;locker_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Locker locker;</span><br><span class="line"></span><br><span class="line"><span class="comment">//나머지 생략 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Locker</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;locker_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//나머지생략</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="양방향"><a href="#양방향" class="headerlink" title="양방향"></a>양방향</h4><figure class="highlight java"><figcaption><span>1:1 양방향 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;member_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;locker_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Locker locker;</span><br><span class="line"></span><br><span class="line"><span class="comment">//나머지 생략 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Locker</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;locker_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OneToOne(mappedBy = &quot;locker&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Member member; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//나머지생략</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="대상-테이블에-외래-키"><a href="#대상-테이블에-외래-키" class="headerlink" title="대상 테이블에 외래 키"></a>대상 테이블에 외래 키</h3><h4 id="단방향-1"><a href="#단방향-1" class="headerlink" title="단방향"></a>단방향</h4><ul><li>일대일관계중 대상 테이블의 외래키의 단방향은 JPA에서 지원안됨. </li><li>이때는 단방향 관계를 Locker에서 Member방향으로 수정하거나 양방향 관계로 만들고, Locker를 연관관계의 주인으로 설정해야함. 이 방법은 다음 양방향에서 알아보자. </li></ul><h4 id="양방향-1"><a href="#양방향-1" class="headerlink" title="양방향"></a>양방향</h4><figure class="highlight java"><figcaption><span>1:1 대상테이블의 외래키 양방향 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;member_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne(mappedBy = &quot;member&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Locker locker;</span><br><span class="line"></span><br><span class="line"><span class="comment">//나머지 생략 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Locker</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;locker_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OneToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;member_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Member member; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//나머지생략</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="다대다-N-N"><a href="#다대다-N-N" class="headerlink" title="다대다 (N:N)"></a>다대다 (N:N)</h2><p>정규화된 테이블 2개로 다대다 관계를 표현할수없다. 그래서 보통 다대다 관계를 일대다, 다대일 관계로 풀어내는 연결테이블을 사용한다. </p><h3 id="다대다-N-N-단방향"><a href="#다대다-N-N-단방향" class="headerlink" title="다대다(N:N): 단방향"></a>다대다(N:N): 단방향</h3><figure class="highlight java"><figcaption><span>N:N 단방향 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;member_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany</span> </span><br><span class="line"><span class="meta">@JoinTable(name = &quot;member_product&quot;, joinColumns= @JoinColumn(name= &quot;member_id&quot;), inverseJoinColumn = @JoinColumn(name = &quot;product_id&quot;))</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Product&gt; products = <span class="keyword">new</span> ArrayList&lt;&gt;(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//나머지 생략 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;locker_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//나머지생략</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="다대다-N-N-양방향"><a href="#다대다-N-N-양방향" class="headerlink" title="다대다(N:N): 양방향"></a>다대다(N:N): 양방향</h3><figure class="highlight java"><figcaption><span>N:N 단방향 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;member_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany</span> </span><br><span class="line"><span class="meta">@JoinTable(name = &quot;member_product&quot;, joinColumns= @JoinColumn(name= &quot;member_id&quot;), inverseJoinColumn = @JoinColumn(name = &quot;product_id&quot;))</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Product&gt; products = <span class="keyword">new</span> ArrayList&lt;&gt;(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//나머지 생략 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;locker_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ManyToMany(mappedBy = &quot;products&quot;)</span> <span class="comment">//역방향 추가 </span></span><br><span class="line"><span class="keyword">private</span> List&lt;Member&gt; members = <span class="keyword">new</span> ArrayList&lt;&gt;(); </span><br><span class="line"></span><br><span class="line">    <span class="comment">//나머지생략</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>다대다 양방향에서도 기존 양방향과 동일하게 편의 메소드를 추가해주면 됨.</li></ul><h3 id="다대다-매핑의-한계와-극복-연결-엔티티-사용"><a href="#다대다-매핑의-한계와-극복-연결-엔티티-사용" class="headerlink" title="다대다: 매핑의 한계와 극복, 연결 엔티티 사용"></a>다대다: 매핑의 한계와 극복, 연결 엔티티 사용</h3><p>@ManyToMany를 활용해서 연관관계 매핑을 자동으로 처리하므로 도메인 모델이 단순해지고 편리한부분이 있지만, 실무에서 사용하기엔 한계가 있다.<br>예를들어 회원이 상품을 주문하면 연결 테이블에 단순히 주문한 회원 아이디와 상품아이디만 담고 끝나지 않는다. 보통은 연결테이블에 주문 수량 컬럼이나 주문한 날짜 같은 컬럼이 더 필요할때가 있다. @ManyToMany상황에서 연결테이블(Member_Product)에 주문수량과 주문날짜를 추가하면 더이상 @ManyToMany로 관리되기 어렵다. 왜냐하면 주문 엔티티나 상품엔티티에는 추가한 컬럼들을 매핑할수 없기때문이다.<br>위 사항을 극복하려면 연결 엔티티를 만들고 추가한 컬럼들을 매핑해야한다. 그리고 엔티티 간의 관계도 테이블 관계처럼 다대다에서 일대다, 다대일 관계로 풀어야한다. 아래코드로 확인해보자. </p><figure class="highlight java"><figcaption><span>N:N 양방향 극복방법</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;member_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy=&quot;member&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;MemberProduct&gt; memberProduct; </span><br><span class="line"></span><br><span class="line"><span class="comment">//나머지 생략 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;locker_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//나머지생략</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@IdClass(MemberProductId.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberProduct</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColomn(name = &quot;member_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Member member; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;product_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Product product; </span><br><span class="line"></span><br><span class="line"><span class="comment">//생략 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberProductId</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String member;  <span class="comment">// MemberProduct.member와 연결</span></span><br><span class="line"><span class="keyword">private</span> String product; <span class="comment">// MemberProduct.product와 연결</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//hashCode and equals재정의 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>회원상품(MemberProduct) 엔티티를 보면 기본키를 매핑하는 @Id와 외래키를 매핑하는 @JoinColumn을 동시에 사용해서 기본키 + 외래키를 한번에 매핑했다. 그리고 @IdClass를 사용해서 복합 기본키를 매핑했다. </p><h4 id="복합-기본키"><a href="#복합-기본키" class="headerlink" title="복합 기본키"></a>복합 기본키</h4><ul><li>JPA에서 복합키를 사용하려면 식별자 클래스를 만들어야함. 그리고 @IdClass로 지정하면됨. </li></ul><blockquote><p>복합키를 위한 식별자클래스 특징 </p><ul><li>복합키는 별도의 식별자 클래스로 만들어야한다.</li><li>Serializable을 구현해야한다.</li><li>equals 와 hashCode를 재정의 해야함.</li><li>기본 생성자가 있어야함.</li><li>식별자 클래스는 반드시 public 접근제한자를 가져야함.</li><li>@IdClass를 사용하는 방법외에 @EmbeddedId를 사용하는 방법도 있음. </li></ul></blockquote><h4 id="식별-관계"><a href="#식별-관계" class="headerlink" title="식별 관계"></a>식별 관계</h4><p>회원상품은 회원과 상품의 기본키를 받아서 자신의 기본키로 사용한다. 이렇게 부모 테이블의 기본키를 받아서 자신의 기본키+외래키로 사용하는것을 DB용어로 식별관계라고한다. </p><p>위 와같이 복합키로 구성해서 저장과 조회는 어떻게 할까? </p><figure class="highlight java"><figcaption><span>복합키 저장&조회</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Member member = <span class="keyword">new</span> Member();</span><br><span class="line">member.setUsername(<span class="string">&quot;m1&quot;</span>);</span><br><span class="line">em.persist(member);</span><br><span class="line"></span><br><span class="line">Product product = <span class="keyword">new</span> Product();</span><br><span class="line">product.setName(<span class="string">&quot;p1&quot;</span>);</span><br><span class="line">em.persist(product); </span><br><span class="line"></span><br><span class="line">MemberProduct memberProduct = <span class="keyword">new</span> MemberProduct();</span><br><span class="line">memberProduct.setMember(member1); <span class="comment">//주문회원 - 연관관계 설정</span></span><br><span class="line">memberProduct.setProduct(product1); <span class="comment">//주문상품 - 연관관계 설정 </span></span><br><span class="line">memberProduct.setOrderAmount(<span class="number">2</span>); <span class="comment">//주문수량</span></span><br><span class="line">em.persist(memberProduct); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MemberProductId memberProductId = <span class="keyword">new</span> MemberProductId();</span><br><span class="line">memberProductId.setMember(<span class="string">&quot;m1&quot;</span>);</span><br><span class="line">memberProductID.setProduct(<span class="string">&quot;p1&quot;</span>);</span><br><span class="line"></span><br><span class="line">MemberProduct memberProduct = em.find(MemberProduct.class, memberProductId);</span><br><span class="line"></span><br><span class="line">Member member = memberProduct.getMember(); </span><br><span class="line">Product product = memberProduct.getProduct(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//출력 생략</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>이렇게 보니까 어떨까? 겁나 복잡시럽다. 이해하기도 어렵고 챙겨야할 부분이 너무 많다는걸 알수있다. </li><li>그럼 이것보다 더 간단하게 만드는 방법은 어떻게 해야할까? 다음챕터를 보면 알수있다. </li></ul><h3 id="다대다-N-N-새로운-기본키-사용"><a href="#다대다-N-N-새로운-기본키-사용" class="headerlink" title="다대다(N:N): 새로운 기본키 사용"></a>다대다(N:N): 새로운 기본키 사용</h3><p>결론부터 말하면, 새로운 엔티티를 만드는것이다. 복합키로 복잡하게 키를 생성하는것보다, 새로운 엔티티로 대리키(자동생성키)를 사용하는것이다.<br>그럼 위 정보를 기반으로 회원상품은 결국 Orders 라는 엔티티로 만드는것이 더 어울릴것이다. </p><figure class="highlight java"><figcaption><span>orders 엔티티</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@IdClass(MemberProductId.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberProduct</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span> </span><br><span class="line"><span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="keyword">private</span> Long id;  <span class="comment">//대리키  생성 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColomn(name = &quot;member_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Member member; </span><br><span class="line"></span><br><span class="line"><span class="meta">@ManyToOne</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;product_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Product product; </span><br><span class="line"></span><br><span class="line"><span class="comment">//생략 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 만들면 끝이다. 나머지 조회나 수정은 유사하게 사용하면 끝! </p><h2 id="실습코드"><a href="#실습코드" class="headerlink" title="실습코드"></a>실습코드</h2><figure class="highlight java"><figcaption><span>실습예제</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;MEMBER_ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Embedded</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 사실상 양방향으로 매핑할일은 거의 없음.</span></span><br><span class="line">    <span class="comment">// 이부분은 학습상 넣어둔 부분임. (실제 설계할때는 반드시 빼야함)</span></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;member&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orders = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">getOrders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrders</span><span class="params">(List&lt;Order&gt; orders)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orders = orders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;ORDERS&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;ORDER_ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;MEMBER_ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Member member;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;DELIVERY_ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Delivery delivery;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime orderDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Enumerated(EnumType.STRING)</span></span><br><span class="line">    <span class="keyword">private</span> OrderStatus orderStatus;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;order&quot;, cascade = CascadeType.ALL)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderItem&gt; orderItems = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;OrderItem&gt; <span class="title">getOrderItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//연관 관계 편의 메서드 (getter/setter관례와 다르게 네이밍하자)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOrderItem</span><span class="params">(OrderItem orderItem)</span> </span>&#123;</span><br><span class="line">        orderItems.add(orderItem);</span><br><span class="line">        orderItem.setOrder(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">getMember</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> member;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMember</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.member = member;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">getOrderDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderDate</span><span class="params">(LocalDateTime orderDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderDate = orderDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderStatus <span class="title">getOrderStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderStatus</span><span class="params">(OrderStatus orderStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderStatus = orderStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Delivery <span class="title">getDelivery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delivery;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDelivery</span><span class="params">(Delivery delivery)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delivery = delivery;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Delivery</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;DELIVERY_ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne(mappedBy = &quot;delivery&quot;, fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Embedded</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Enumerated(EnumType.STRING)</span></span><br><span class="line">    <span class="keyword">private</span> DeliveryStatus deliveryStatus;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOrder</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.order = order;</span><br><span class="line">        order.setDelivery(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeliveryStatus <span class="title">getDeliveryStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deliveryStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeliveryStatus</span><span class="params">(DeliveryStatus deliveryStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deliveryStatus = deliveryStatus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderItem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;ORDER_ITEM_ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;ORDER_ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;ITEM_ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Item item;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> orderPrice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrder</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.order = order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">getItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItem</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.item = item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrderPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderPrice</span><span class="params">(<span class="keyword">int</span> orderPrice)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderPrice = orderPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Inheritance(strategy = InheritanceType.JOINED)</span></span><br><span class="line"><span class="meta">@DiscriminatorColumn</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;ITEM_ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> stockQuantity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany(mappedBy = &quot;items&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Category&gt; categories = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStockQuantity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stockQuantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStockQuantity</span><span class="params">(<span class="keyword">int</span> stockQuantity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stockQuantity = stockQuantity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;PARENT_ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Category parent;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;parent&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Category&gt; child = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToMany</span></span><br><span class="line">    <span class="meta">@JoinTable(name = &quot;CATEGORY_ITEM&quot;</span></span><br><span class="line"><span class="meta">        , joinColumns = @JoinColumn(name = &quot;CATEGORY_ID&quot;)</span></span><br><span class="line"><span class="meta">        ,inverseJoinColumns = @JoinColumn(name = &quot;ITEM_ID&quot;))</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Item&gt; items = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Category <span class="title">getParent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(Category parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">getChild</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> child;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChild</span><span class="params">(List&lt;Category&gt; child)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.child = child;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">getItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItems</span><span class="params">(List&lt;Item&gt; items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;다양한-연관관계-매핑&quot;&gt;&lt;a href=&quot;#다양한-연관관계-매핑&quot; class=&quot;headerlink&quot; title=&quot;다양한 연관관계 매핑&quot;&gt;&lt;/a&gt;다양한 연관관계 매핑&lt;/h1&gt;&lt;h2 id=&quot;다대일-N-1&quot;&gt;&lt;a href=&quot;#다대일-N-1&quot; c</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="자바ORM표준JPA프로그래밍" scheme="https://codexdawn.github.io/categories/%EC%9E%90%EB%B0%94ORM%ED%91%9C%EC%A4%80JPA%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"/>
    
    <category term="다양한 연관관계 매핑" scheme="https://codexdawn.github.io/categories/%EB%8B%A4%EC%96%91%ED%95%9C-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91/"/>
    
    
    <category term="Java,JPA" scheme="https://codexdawn.github.io/tags/Java-JPA/"/>
    
  </entry>
  
  <entry>
    <title>reactive-1</title>
    <link href="https://codexdawn.github.io/2021/03/29/reactive-1/"/>
    <id>https://codexdawn.github.io/2021/03/29/reactive-1/</id>
    <published>2021-03-29T02:45:27.000Z</published>
    <updated>2021-03-29T03:42:37.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reactive-Programming"><a href="#Reactive-Programming" class="headerlink" title="Reactive Programming"></a>Reactive Programming</h1><h2 id="Blocking-VS-Non-Blocking"><a href="#Blocking-VS-Non-Blocking" class="headerlink" title="Blocking VS Non-Blocking"></a>Blocking VS Non-Blocking</h2><h3 id="Blocking"><a href="#Blocking" class="headerlink" title="Blocking"></a>Blocking</h3><figure class="highlight java"><figcaption><span>블록킹 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someVariable = getData()</span><br><span class="line">print(someVariable)</span><br></pre></td></tr></table></figure><p>위 코드는 데이터를 반환하는 함수의 리턴값을 변수에 할당하는 역할을함. 데이터를 사용할수 있게 되면 데이터가 출력된다.<br>여기서 포인트는 데이터를 완전히 얻을때까지 프로그램이 멈추게되는데, 이것을 blocking이라고 한다. (context switching 되는 시점을 말하는것 같음.)</p><h3 id="Non-Blocking"><a href="#Non-Blocking" class="headerlink" title="Non-Blocking"></a>Non-Blocking</h3><figure class="highlight java"><figcaption><span>논블록킹 예시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subscribe(::getData).whenDone(::print)</span><br></pre></td></tr></table></figure><p>위 코드는 작을을 구독하고 작업이 완료되면 그 결과를 다른작업에 보낸다. 이 예제는 데이터를 얻어지면 출력함. 여기서 중요한 점은 위의 구문 이후에도 프로그램이 계속되어 다른것들을 처리한다는것이다. 이를 Non-Blocking작업이라고함. 단일 결과에만 적용할수 있는것이 아니라 리액티브 데이터 스트림을 구독할수도 있으며, 스트림이 흐르기 시작하면 바등ㄴ 데이터를 인쇄 하는 기능을 지속적으로 호출하게 된다. </p><h2 id="리액티브-선언문"><a href="#리액티브-선언문" class="headerlink" title="리액티브 선언문"></a>리액티브 선언문</h2><p><a href="https://www.reactivemanifesto.org/ko">리액티브선언문</a></p><h2 id="배압-Back-Pressure"><a href="#배압-Back-Pressure" class="headerlink" title="배압 (Back Pressure)"></a>배압 (Back Pressure)</h2><p>배압은 리액티브 시스템이 구독자가 처리 할수 있는 것보다 높은 비율로 게시할때 발생한다. 즉, 리액티브 서비스의 소비자(consumer)가 다음과 같이 말한다. “지금은 요청을 처리할수 없으며, 데이터 전송을 중지하고 리소스를 낭비하지 마시오.” </p><h2 id="synchronous-vs-asynchronous"><a href="#synchronous-vs-asynchronous" class="headerlink" title="synchronous vs asynchronous"></a>synchronous vs asynchronous</h2><h3 id="synchronous-동기"><a href="#synchronous-동기" class="headerlink" title="synchronous (동기)"></a>synchronous (동기)</h3><p>동기방식은 클라이언트가 서버에 요청하면 응답받기전까지 blocking처리되어 다른일을 처리하지 못하게되는 상태를 말한다. 즉, 2개의 요청을 A,B서버에 요청하면, A서버 응답이 마친뒤에야, B서버에서 다음 작업을 처리할수있음. </p><h3 id="asynchronous-비동기"><a href="#asynchronous-비동기" class="headerlink" title="asynchronous (비동기)"></a>asynchronous (비동기)</h3><p>비동기방식은 blocking상태가 아니기때문에 다른작업을 계속 처리 할 수 있다. 비동기의 장점은 빠른속도와 적은 리소스 사용이다.<br>빠른속도 : 2개의 요청을 동시에 보낼 수 있기 때문에 더 빠른 응답속도를 기대할수있음.<br>적은 리소스 사용 : 현재 스레드가 블록킹 되지 않고, 다른 업무를 처리 할수 있어서 더 적은 스레드의 수로 더 많은 양의 요청을 처리 할수 있음. </p><p>더 자세한 내용은 아래 링크 참고해보자.<br><a href="https://engineering.linecorp.com/ko/blog/reactive-streams-with-armeria-1/">리액티브 스트림 소개</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Reactive-Programming&quot;&gt;&lt;a href=&quot;#Reactive-Programming&quot; class=&quot;headerlink&quot; title=&quot;Reactive Programming&quot;&gt;&lt;/a&gt;Reactive Programming&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="개념정리" scheme="https://codexdawn.github.io/categories/%EA%B0%9C%EB%85%90%EC%A0%95%EB%A6%AC/"/>
    
    <category term="리액티브 프로그래밍" scheme="https://codexdawn.github.io/categories/%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"/>
    
    
    <category term="Java,reactive,blocking,non-blocking,synchronous,asynchronous" scheme="https://codexdawn.github.io/tags/Java-reactive-blocking-non-blocking-synchronous-asynchronous/"/>
    
  </entry>
  
  <entry>
    <title>relation-mapping-basic</title>
    <link href="https://codexdawn.github.io/2021/03/24/relation-mapping-basic/"/>
    <id>https://codexdawn.github.io/2021/03/24/relation-mapping-basic/</id>
    <published>2021-03-24T10:39:36.000Z</published>
    <updated>2021-03-25T01:41:16.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="연관관계-매핑-기초"><a href="#연관관계-매핑-기초" class="headerlink" title="연관관계 매핑 기초"></a>연관관계 매핑 기초</h1><blockquote><p>연관관계 매핑을 이해하기 위한 핵심 키워드 </p><ul><li>방향 (Direction) : [단방향,양방향]이 있다. 예를들어 회원-&gt;팀 또는 팀 -&gt; 회원 둘 중 한쪽만 참조하는 것을 단방향이라하며, 회원 -&gt; 팀 과 팀 -&gt; 회원 양쪽모두 참조하는것을 양방향 관계라고 한다. 방향은 객체관계에서만 존재하고 테이블 관계는 무조건 <strong>양방향</strong> 이다.</li><li>다중성(Multiplicity) : [N:1,1:N,1:1,M:N] 다중성이 있다. 예를들어 회원과 팀이 관계가 있을때 여러 회원은 한 팀에 속하므로, N:1관계며, 반대로 한 팀에 여러 회원이 소속될수 있으므로 팀과 회원은 1:N관계다. </li><li>연관관계 주인 (Owner) : 객체를 양방향 연관관계로 만들면 연관관계의 주인을 정해야함. (주로 외래키를 관리하는 N쪽이 주인이됨.)</li></ul></blockquote><h2 id="단방향-연관관계"><a href="#단방향-연관관계" class="headerlink" title="단방향 연관관계"></a>단방향 연관관계</h2><figure class="highlight java"><figcaption><span>단방향연관관계1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;username&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(updatable = false)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime regDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime uptDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Enumerated(EnumType.STRING)</span></span><br><span class="line">    <span class="keyword">private</span> MemberType memberType;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 회원은 N , 팀은 1이기때문에 N:1로 ManyToOne으로 설정</span></span><br><span class="line"><span class="comment">// @JoinColumn은 생략가능(생략하게되면 필드명 + _ + id로 자동으로 탐색해줌)</span></span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;team_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Team team;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="연관관계-사용"><a href="#연관관계-사용" class="headerlink" title="연관관계 사용"></a>연관관계 사용</h2><h3 id="저장"><a href="#저장" class="headerlink" title="저장"></a>저장</h3><figure class="highlight java"><figcaption><span>persist</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">//entityManager 및 commmit부분 표기상 생략 </span></span><br><span class="line"><span class="keyword">final</span> Team team1 = Team.builder().name(<span class="string">&quot;Team1&quot;</span>).build();</span><br><span class="line">entityManager.persist(team1);</span><br><span class="line"><span class="keyword">final</span> Member member1 = Member.builder().name(<span class="string">&quot;hellojpa&quot;</span>).memberType(MemberType.ADMIN).team(team1).build();</span><br><span class="line">entityManager.persist(member1);</span><br></pre></td></tr></table></figure><h3 id="조회"><a href="#조회" class="headerlink" title="조회"></a>조회</h3><p>연관관계가 있는 엔티티를 조회하는 방법은 크게 2가지다. </p><ol><li>객체그래프 탐색 (객체 연관관계를 사용한 조회)</li><li>객체지향 쿼리 사용 JPQL </li></ol><figure class="highlight java"><figcaption><span>select방법들</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">//객체그래프활용</span></span><br><span class="line"><span class="keyword">final</span> Member gmember2 = entityManager.find(Member.class, member2.getId());</span><br><span class="line">Team team = gmember2.getTeam(); </span><br><span class="line">System.out.println(team.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">//객체지향 쿼리 사용 (JPQL)</span></span><br><span class="line">List&lt;Member&gt; members = entityManager.createQuery(<span class="string">&quot;select m from Member m&quot;</span>, Member.class)</span><br><span class="line">                .getResultList();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Member m : members) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;m = &quot;</span> + m.getUserName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;Member&gt; paramResult = entityManager.createQuery(<span class="string">&quot;select m from Member m where m.userName = :userName&quot;</span>,Member.class).setParameter(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;m2&quot;</span>).getResultList();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Member m2 : paramResult) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;m2 = &quot;</span> + m2.getUserName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="수정"><a href="#수정" class="headerlink" title="수정"></a>수정</h3><figure class="highlight java"><figcaption><span>select방법들</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">//entityManager 및 commmit부분 표기상 생략 </span></span><br><span class="line"><span class="keyword">final</span> Team team2 = Team.builder().name(<span class="string">&quot;Team2&quot;</span>).build();</span><br><span class="line">entityManager.persist(team2);</span><br><span class="line"></span><br><span class="line">Member member1 = entityManager.find(Member.class, <span class="string">&quot;member1&quot;</span>);</span><br><span class="line"><span class="comment">//update쿼리가 자동으로 날아감. (정확하게 쓰기지연SQL저장소에 저장되었다가, commit시점에 쿼리가 반영될것임)</span></span><br><span class="line">member1.setTeam(team2); </span><br></pre></td></tr></table></figure><h3 id="연관관계-제거"><a href="#연관관계-제거" class="headerlink" title="연관관계 제거"></a>연관관계 제거</h3><figure class="highlight java"><figcaption><span>select방법들</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">Member member1 = entityManager.find(Member.class, <span class="string">&quot;member1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//update쿼리로 team_id = null로 세팅되서 날라감. </span></span><br><span class="line">member1.setTeam(<span class="keyword">null</span>); </span><br></pre></td></tr></table></figure><h3 id="연관된-엔티티-삭제"><a href="#연관된-엔티티-삭제" class="headerlink" title="연관된 엔티티 삭제"></a>연관된 엔티티 삭제</h3><p>연관된 엔티티를 삭제하려면 기존에 있던 연관관계를 먼저 제거하고 삭제해야한다. 그렇지 않으면 외래 키 제약조건으로 인해, DB에서 오류가 발생됨. </p><figure class="highlight java"><figcaption><span>select방법들</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">Member member1 = entityManager.find(Member.class, <span class="string">&quot;member1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//update쿼리로 team_id = null로 세팅되서 날라감. </span></span><br><span class="line">member1.setTeam(<span class="keyword">null</span>); </span><br><span class="line">entityManager.remove(team1);</span><br></pre></td></tr></table></figure><h2 id="양방향-연관관계"><a href="#양방향-연관관계" class="headerlink" title="양방향 연관관계"></a>양방향 연관관계</h2><h3 id="양방향-연관관계-매핑-방법"><a href="#양방향-연관관계-매핑-방법" class="headerlink" title="양방향 연관관계 매핑 방법"></a>양방향 연관관계 매핑 방법</h3><figure class="highlight java"><figcaption><span>단방향연관관계1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;username&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(updatable = false)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime regDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime uptDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Enumerated(EnumType.STRING)</span></span><br><span class="line">    <span class="keyword">private</span> MemberType memberType;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 회원은 N , 팀은 1이기때문에 N:1로 ManyToOne으로 설정</span></span><br><span class="line"><span class="comment">// @JoinColumn은 생략가능(생략하게되면 필드명 + _ + id로 자동으로 탐색해줌)</span></span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;team_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Team team;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;team&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Member&gt; members = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-N-컬렉션-조회"><a href="#1-N-컬렉션-조회" class="headerlink" title="1:N 컬렉션 조회"></a>1:N 컬렉션 조회</h3><figure class="highlight java"><figcaption><span>select방법들</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">//entityManager 및 commmit부분 표기상 생략 </span></span><br><span class="line">Team team = entityManaber.find(Team.class,<span class="string">&quot;team1&quot;</span>);</span><br><span class="line">List&lt;Member&gt; members = team.getMembers();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Member m : members) &#123;</span><br><span class="line"><span class="comment">//...출력.. </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="연관관계의-주인"><a href="#연관관계의-주인" class="headerlink" title="연관관계의 주인"></a>연관관계의 주인</h2><h3 id="양방향-매핑의-규칙-연관관계의-주인"><a href="#양방향-매핑의-규칙-연관관계의-주인" class="headerlink" title="양방향 매핑의 규칙 : 연관관계의 주인"></a>양방향 매핑의 규칙 : 연관관계의 주인</h3><p>양방향 연관관계 매핑시 지켜야할 규칙이 있는데 두 연관관계 중 하나를 연관관계 주인으로 정해야한다. 연관관계의 주인만이 DB연관관계와 매핑되고 외래 키를 관리(등록,수정,삭제) 할 수 있다. 반만에 주인이 아닌쪽은 읽기만 할 수 있다.<br>어떤 연관관계를 주인으로 정할지는 mappedBy속성을 사용하면된다. </p><ul><li>주인은 mappedBy를 사용하지 않는다.</li><li>주인이 아니면 mappedBy속성을 사용해서 속성의 값으로 연관관계의 주인을 지정해야 한다. </li></ul><p>연관관계의 주인을 정한다는것은 사실 외래키 관리자를 선택하는 것이다.<br>그래서 중요한건 엔티티 설계시 외래키가 존재하는 곳이 연관관계의 주인이 되야함. 그러니까 N:1에서 N이 결국 외래키를 관리하는 주인이라는 말이다. </p><h2 id="양방향-연관관계-저장"><a href="#양방향-연관관계-저장" class="headerlink" title="양방향 연관관계 저장"></a>양방향 연관관계 저장</h2><p>양방향 연관관계를 맺고나서, 저장할때 주의점은 한쪽 객체에만 저장하면 안된다는것이다.<br>그렇게되면 제대로 저장이 안된다. 그럼 어떻게 해야할까?<br>결론은 그냥 양쪽 다 저장하면 된다. 이부분의 실수를 줄이기 위해서 <strong>연관관계 편의성 메소드</strong> 를 만들어서 사용하는것을 저자는 추천하고있다. </p><figure class="highlight java"><figcaption><span>양방향 연관관계 매핑 저장1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Team team = <span class="keyword">new</span> Team();</span><br><span class="line">team.setName(<span class="string">&quot;Team1&quot;</span>);</span><br><span class="line">entityManager.persist(team);</span><br><span class="line"></span><br><span class="line">Team team2 = <span class="keyword">new</span> Team();</span><br><span class="line">team2.setName(<span class="string">&quot;Team2&quot;</span>);</span><br><span class="line">entityManager.persist(team2);</span><br><span class="line"></span><br><span class="line">Member member = <span class="keyword">new</span> Member();</span><br><span class="line">member.setUserName(<span class="string">&quot;m1&quot;</span>);</span><br><span class="line">member.setAge(<span class="number">36</span>);</span><br><span class="line">member.setTeam(team);</span><br><span class="line">entityManager.persist(member);</span><br><span class="line"></span><br><span class="line">Member member2 = <span class="keyword">new</span> Member();</span><br><span class="line">member2.setUserName(<span class="string">&quot;m2&quot;</span>);</span><br><span class="line">member2.setAge(<span class="number">30</span>);</span><br><span class="line">member2.setTeam(team2);</span><br><span class="line"></span><br><span class="line">entityManager.persist(member2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//위와 같이 저장하면 문제는 없다 왜냐.. 연관관계주인으로 저장했기때문에..</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//아래와 같이 주인관계로 저장하지 않으면 어떻게 될까? member.team_id = null로 들어감. </span></span><br><span class="line"></span><br><span class="line">Member member3 = <span class="keyword">new</span> Member();</span><br><span class="line">member3.setUserName(<span class="string">&quot;m3&quot;</span>);</span><br><span class="line">member3.setAge(<span class="number">22</span>);</span><br><span class="line"><span class="comment">//member3.setTeam(team3);</span></span><br><span class="line"></span><br><span class="line">entityManager.persist(member3);</span><br><span class="line"></span><br><span class="line">Team team3 = <span class="keyword">new</span> Team();</span><br><span class="line">team3.setName(<span class="string">&quot;t3&quot;</span>);</span><br><span class="line">team3.getMembers().add(member3);</span><br><span class="line">entityManager.persist(team3);</span><br></pre></td></tr></table></figure><p>위 소스코드와 같이 단반향만 저장을 하면 문제가 발생하게된다. 물론 member1,member2는 member.team_id를 각각 잘 저장했을것이다. 그리고 memeber3는 연관관계 주인의 객체로 저장하지않았기때문에 저장이안됫다. 그럼 member1,2는 문제가 없는걸까? 결론은 문제가 있다. 왜냐하면 단방향으로만 저장을 했기때문이다.<br>물론 member1,2는 저장하는데는 큰 이슈가 없다. 하지만 객체지향관점에서 봤을때는 문제가 있는 코드다. 아래 코드를 확인해보자. </p><figure class="highlight java"><figcaption><span>양방향 연관관계 매핑 저장2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> count = team.getMembers().stream().count();</span><br><span class="line">System.out.println(<span class="string">&quot;count = &quot;</span> + count); <span class="comment">// 0개</span></span><br></pre></td></tr></table></figure><p>객체지향적으로만 봤을때는 양방향으로 저장이 안되었기때문에 반대방향으로 조회했을때는 0개가 나오게되는것이다.<br>그래서 양방향 연관관계 매핑으로 저장할때는 양방향으로 저장을 필수적으로 해야한다.<br>하지만 단순히 양방향으로만 저장한다고 되는일이 아니다. 추가적으로 해야하는 작업이 있는데 그것은 무엇일까?</p><figure class="highlight java"><figcaption><span>양방향 연관관계 매핑 저장3</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">//1. 편의성 메소드 버그 기본 세팅 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeam</span><span class="params">(Team team)</span> </span>&#123;</span><br><span class="line">member.setTeam(team);</span><br><span class="line">team.setMembers().add(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 버그를 잡는 편의성 메소드 </span></span><br><span class="line"><span class="comment">//Why? </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeam</span><span class="params">(Team team)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.team != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.team.getMembers().remove(<span class="keyword">this</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">member.setTeam(team);</span><br><span class="line">team.setMembers().add(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1번 코드는 기본적인 편의성메소드인데, 무엇이 문제일까?<br>만약에 아래 코드처럼 추가하면 어떻게 될까? </p><figure class="highlight java"><figcaption><span>편의 메소드 주의점</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">Member member3 = <span class="keyword">new</span> Member();</span><br><span class="line">member3.setUserName(<span class="string">&quot;m3&quot;</span>);</span><br><span class="line">member3.setAge(<span class="number">22</span>);</span><br><span class="line">member3.setTeam(team3);</span><br><span class="line">member3.setTeam(team);</span><br><span class="line"></span><br><span class="line"><span class="comment">//결과는? member = Member[id=null, userName=&#x27;m3&#x27;, age=22] 나오지 말아야 하는데..? </span></span><br><span class="line">team3.getMembers().stream().forEach(v -&gt; System.out.println(<span class="string">&quot;member = &quot;</span> + v));</span><br></pre></td></tr></table></figure><p>위와 같이 setTeam을 두번하여, Team3 -&gt; Team으로 변경하였는데, member3는 더이상 team3를 참조하지 않는데 id는 null로빠졌지만 나머지값이 나왔다.<br>결국 삭제되지 않는 관계가 남아서 team3에 member3의 흔적이 남게된것이다. 따라서 2번 코드처럼 remove를 시켜주면 해당 부분이 깔끔하게 정리 될수있음.<br>어쨋든 team3(Team 엔티티)는 외래키의 주인이 아니기때문에 DB에 영향을 주지는 않지만, 나중에 대형시스템에서 영속성컨텍스트가 살아있는 상태에서 복잡한 비즈니스 코드를 처리하다보면, 잔재된 데이터로인해 버그를 유발시킬수도 있다. 따라서 항상 2번과 같은 방어코드를 신경써야하며, 늘 양방향관계에 있을때는 양쪽 객체를 항상 신경써야한다는것을 잊지 말자. </p><blockquote><p>연관관계 매핑 정리 </p><ul><li>단방향 매핑만으로 테이블과 객체의 연관관계 매핑은 이미 완료 되었다. (꼭 양방향만 고집할 필요는 없다. )</li><li>단방향을 양방향으로 만들면 반대방향으로 객체 그래프 탐색 기능이 추가된다. </li><li>양방향 연관관계를 매핑하려면 객체에서 양쪽 방향을 모두 관리해야한다. </li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;연관관계-매핑-기초&quot;&gt;&lt;a href=&quot;#연관관계-매핑-기초&quot; class=&quot;headerlink&quot; title=&quot;연관관계 매핑 기초&quot;&gt;&lt;/a&gt;연관관계 매핑 기초&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;연관관계 매핑을 이해하기 위한 핵심 키워드 &lt;/</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="자바ORM표준JPA프로그래밍" scheme="https://codexdawn.github.io/categories/%EC%9E%90%EB%B0%94ORM%ED%91%9C%EC%A4%80JPA%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"/>
    
    <category term="연관관계 매핑 기초" scheme="https://codexdawn.github.io/categories/%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91-%EA%B8%B0%EC%B4%88/"/>
    
    
    <category term="Java,JPA" scheme="https://codexdawn.github.io/tags/Java-JPA/"/>
    
  </entry>
  
  <entry>
    <title>jpa-entity-mapping</title>
    <link href="https://codexdawn.github.io/2021/03/19/jpa-entity-mapping/"/>
    <id>https://codexdawn.github.io/2021/03/19/jpa-entity-mapping/</id>
    <published>2021-03-19T08:26:18.000Z</published>
    <updated>2021-03-19T14:06:19.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="엔티티-매핑-Entity-Mapping"><a href="#엔티티-매핑-Entity-Mapping" class="headerlink" title="엔티티 매핑 (Entity Mapping)"></a>엔티티 매핑 (Entity Mapping)</h1><h2 id="Entity"><a href="#Entity" class="headerlink" title="@Entity"></a>@Entity</h2><p>@Entity가 붙은 클래스는 JPA가 관리하는것 </p><p>@Entity적용시 주의 사항 </p><ul><li>기본생성자는 필수 (public 또는 protected 생성자)</li><li>final 클래스, enum,interface,inner클래스에 사용불가 </li><li>저장할 필드에 final 사용불가 </li></ul><h2 id="Table"><a href="#Table" class="headerlink" title="@Table"></a>@Table</h2><p>@Table은 Entity와 매핑할 테이블 지정함. 생략하면 Entity 이름을 테이블이름으로 사용 </p><h2 id="다양한-매핑-사용"><a href="#다양한-매핑-사용" class="headerlink" title="다양한 매핑 사용"></a>다양한 매핑 사용</h2><figure class="highlight java"><figcaption><span>회원 엔티티</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span> </span><br><span class="line"><span class="meta">@Table(name=&quot;MEMBER&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span> </span><br><span class="line"><span class="meta">@Column(name = &quot;ID&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(name = &quot;NAME&quot;, nullable = false, length = 10)</span> </span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer age; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Enumerated(EnumType.STRING)</span></span><br><span class="line"><span class="keyword">private</span> RoleType roleType; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createdDate; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> LocalDateTime lastModifiedDate; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Lob</span> </span><br><span class="line"><span class="keyword">private</span> String description; </span><br><span class="line"></span><br><span class="line"><span class="comment">//Getter, Setter 세팅</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">RoleType</span> </span>&#123;</span><br><span class="line">ADMIN, USER </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>RoleType의 @Enumerated설정은 특별한 이유없음 EnumType.STRING 으로 설정하자 (기본값이 ORDINAL 인데 이걸 사용하면 0,1,2..로 지정됨.)</li><li>Date타입은 요즘 사용하는 jpa버전에서는 @Temporal생략하고 LocalDateTime 혹은 LocalDate만 적어도 됨. </li><li>description 필드는 회원을 설명하는 필드인데, 길이제한이 없다. 따라서 DB에 varchar타입대신 CLOB으로 저장됨. @Lob을 사용하면 CLOB,BLOB 매핑가능 </li></ul><h2 id="데이터베이스-스키마-자동생성"><a href="#데이터베이스-스키마-자동생성" class="headerlink" title="데이터베이스 스키마 자동생성"></a>데이터베이스 스키마 자동생성</h2><p>persistence.xml에서 스키마 자동생성 기능을 설정할수있음.</p><figure class="highlight xml"><figcaption><span>스키자 자동생성 방법</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span> <span class="attr">value</span>=<span class="string">&quot;create&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="hibernate-hbm2ddl-auto-속성-정리"><a href="#hibernate-hbm2ddl-auto-속성-정리" class="headerlink" title="hibernate.hbm2ddl.auto 속성 정리"></a>hibernate.hbm2ddl.auto 속성 정리</h3><ul><li>create : 기존 테이블 삭제 하고 새로 생성 (DROP + CREATE) </li><li>create-drop : create 기능에서 앱 종료시 다시 DROP 시킴</li><li>update : db테이블과 entity매핑 정보 비교해서 변경사항만 수정 </li><li>validate : db테이블과 entity매핑 정보 비교해서 차이가 있으면 경고를 남기고 앱 실행 안함. (DDL수행안함)</li><li>none : 이 기능 사용안하려면 적고, 아니면 property자체를 제거하면 기능 사용 안함. </li></ul><p>hibernate.hbm2ddl.auto 사용시 주의사항은 가급적 자동 DDL은 local환경에서 테스트 개발할때 사용하는것 아니면 사용하지말고, 굳이 써야한다면 dev환경에서 validate정도만 쓰는데, 이것도 가급적 사용하지 말자. 그냥 local에서만 잠깐 쓰자. </p><h2 id="DDL-생성-기능"><a href="#DDL-생성-기능" class="headerlink" title="DDL 생성 기능"></a>DDL 생성 기능</h2><p>엔티티 설정할때 각 필드에 아래와 같이 설정이 가능함 </p><p>@Column(name = “NAME”, nullable = false, length = 10) </p><p>위 기능의 nullable,length를 통해 DDL을 생성할때 위 제약조건을 자동으로 테이블설정에 추가할수있음.<br>이밖에 @Table에 유니크 제약조건도 걸수있음. (uniqueConstraints 참고)</p><p>결론은 위 기능은 hbm2ddl기능을 활성화 했을때만 적용되는 기술이다. 하지만 표기성으로 타 개발자가 제약조건에 대한 설명을 알게 할수있는 기능이 있어서, 추가해주면 나쁘지 않을듯 하다. (굳이 테이블 까서 볼 필요없이 엔티티통해서 한눈에 확인가능)</p><h2 id="기본키-매핑"><a href="#기본키-매핑" class="headerlink" title="기본키 매핑"></a>기본키 매핑</h2><p>JPA가 제공하는 DB기본키 생성전략 2가지 </p><ol><li>직접 할당 : 기본 키를 애플리케이션에서 직접 할당 (@Id 만 사용)</li><li>자동 생성 : 대리키 사용방식 </li></ol><ul><li>IDENTITY : 기본키 생성을 DB에 위임.  </li><li>SEQUENCE : DB 시퀀스를 사용해서 기본 키를 할당한다. </li><li>TABLE : 키 생성 테이블을 사용. </li></ul><h3 id="기본키-직접-할당-전략"><a href="#기본키-직접-할당-전략" class="headerlink" title="기본키 직접 할당 전략"></a>기본키 직접 할당 전략</h3><p>@Id적용 가능 자바 타입 </p><ul><li>자바 기본형 </li><li>자바 래퍼형(warpper)</li><li>String </li><li>java.util.Date</li><li>java.sql.Date</li><li>java.math.BigDecimal</li><li>java.math.BigInteger</li></ul><h3 id="Identity-전략"><a href="#Identity-전략" class="headerlink" title="Identity 전략"></a>Identity 전략</h3><p>Identity 전략은 기본 키 생성을 DB에 위임하는 전략. 주로 MySql/PostgreSql/SqlServer/DB2에서 사용함.<br>Identity 전략은 AUTO_INCREMENT처럼 DB에 값을 저장하고 나서야 기본 키 값을 구할수 있음 </p><blockquote><p>entity가 영속상태가 되려면 (persistence context에 저장되려면) 반드시 식별자가 있어야함. 근데 Identity 식별자 생성 전략은 엔티티를 DB에 저장해야 식별자를 구할수있음. 따라서 em.persist()를 호출하는 즉시 insert sql문이 db에 전달됨 (auto flush). 따라서 이 전략은 트랜잭션을 지원하는 쓰기 지연이 동작하지 않는다. </p><p>결론은 Identity전략은 persist를 하는순간 바로 flush가 되기때문에 쓰기지연SQL저장소에는 저장이 안됨. </p></blockquote><h3 id="Sequence-전략"><a href="#Sequence-전략" class="headerlink" title="Sequence 전략"></a>Sequence 전략</h3><p>Sequence전략은 유일한 값을 순서대로 생성하는 특별한 DB오브젝트다. 이 전략은 시퀀스를 지원하는 오라클, PostgreSql, DB2, H2에서 사용가능함.<br>시퀀스를 사용하기위해서는 시퀀스 생성 해야함.(CREATE SEQUENCE BOARD_SEQ START WITH 1 INCREAMENT BY 1)</p><figure class="highlight java"><figcaption><span>시퀀스사용방법</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span> </span><br><span class="line"><span class="meta">@SequenceGenerator(name = &quot;BOARD_SEQ_GENERATOR&quot;, sequnceName = &quot;BOARD_SEQ&quot;, initialValue=1, allocationSize=1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Board</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span> </span><br><span class="line"><span class="meta">@GenerateValue(strategy= GenerateValue.SEQUENCE, genertor = &quot;BOARD_SEQ_GENERATOR&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long id; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드의 sequnceName 은 앞서 미리 디비에서 생성한 시퀀스 이름이다. 그리고 allocationSize를 통해서 시퀀스 한번 호출에 증가하는 수를 가져올수있는데,매번 시퀀스 테이블을 조회하는것도 성능상 저하를 일으킬수도 있기때문에 시퀀스를 1개씩만 가져오는것보다 한번에 여러개를 가져와서 쓰고 다쓰면 다시 가져오는 형태로 쓸때 유용하고 성능상 이점을 가져올수있음. 하지만 주의점은 allocationSize는 DDL매핑할때 increment by {allocatiuonSize}인데 1로 설정했으면, 반드시 1로 값을 할당해야함. 기본값은 50이기때문에 반드시 확인해야한다! </p><p>시퀀스 전략은 Identity전략과 내부동작방식이 다르다. 시퀀스 전략은 em.persist()를 호출할때 DB시퀀스테이블을 먼저 식별자값을 조회하고, 조회한 식별자를 엔티티에 할당한 후 엔티티를 Persistence Context에 저장한다. 이후 트랜잭션을 커밋해서 플러스가 일어나면 엔티티를 DB에 저장한다. </p><h3 id="TABLE-전략"><a href="#TABLE-전략" class="headerlink" title="TABLE 전략"></a>TABLE 전략</h3><p>TABLE전략은 키 생성 전용 테이블을 하나 만들고 여기에 이름과 값으로 사용할 컬럼을 만들어 데이터베이스 시퀀스를 흉내내는 전략이다. 이 전략은 테이블을 사용하므로 모든 DB에 적용가능하다.<br>TABLE전략은 기본적으로 Sequence전략과 유사함. 그리고 @TableGenerator로 시퀀스 생성하듯 유사하게 생성하면됨. (키 전용 테이블 생성해야함.)<br>TABLE전략은 값을 조회하면서 SELECT쿼리를 사용하고 다음 값으로 증가시키기 위해 UPDATE쿼리를 사용한다. 이 전략은 SEQUENCE전략과 비교해서 DB와 한번 더 통신하는 단점이 있다. TABLE전략을 최적화 하려면 시퀀스와 유사하게 @TableGenerator.allocationSize를 사용하면됨. </p><h3 id="AUTO전략"><a href="#AUTO전략" class="headerlink" title="AUTO전략"></a>AUTO전략</h3><p>AUTO전략은 다양한 DB종류의 맞춰서 IDENTITY,SQUENCE,TABLE전략중 하나를 자동으로 선택해서 사용함. (EX&gt; 오라클=SEQUENCE, MYSQL=IDENTITY)<br>AUTO전략은 DB를 변경해도 코드를 수정할 필요없으며, 특히 키 생성 전략이 아직 확정되지 않은 개발 초기단계나 프로토타입 개발시 편리하게 사용가능하다.<br>AUTO전략을 사용할때 SEQUENCE나 TABLE 전략이 선택되면 시퀀스나 키생성용 테이블을 미리 만들어둬야하는데, 만약 DDL자동생성기능을 사용하면 하이버네이트가 기본값을 사용해서 적절한 시퀀스나 키생성 테이블을 만들어줌. </p><h2 id="ACCESS"><a href="#ACCESS" class="headerlink" title="@ACCESS"></a>@ACCESS</h2><p>JPA가 Entity 데이터에 접근하는 방식을 지정할수있음. </p><ul><li>필드 접근: AccessType.FILED로 지정한다. 필드에 직접 접근한다. 필드 접근 권한이 private이어도 접근할수있다. </li><li>프로퍼티 접근: AccessType.PROPERTY로 지정한다. 접근자 Getter를 사용한다. </li></ul><p>@Access(AccessType.PROPERTY)는 getter위에 선언하면 entity를통해 받아온 데이터를 getter에 저장한다. </p><figure class="highlight java"><figcaption><span>프로퍼티접근</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span> </span><br><span class="line"><span class="keyword">private</span> Long id; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Transient</span> </span><br><span class="line"><span class="keyword">private</span> String firstName; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Transient</span> </span><br><span class="line"><span class="keyword">private</span> String lastName; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Access(AccessType.PROPERTY)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFullName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> firstName + lastName; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="실전-예제"><a href="#실전-예제" class="headerlink" title="실전 예제"></a>실전 예제</h1><figure class="highlight java"><figcaption><span>Member</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;MEMBER_ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String city; </span><br><span class="line"><span class="keyword">private</span> String street; </span><br><span class="line"><span class="keyword">private</span> String zipcode; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 사실상 양방향으로 매핑할일은 거의 없음.</span></span><br><span class="line">    <span class="comment">// 이부분은 학습상 넣어둔 부분임. (실제 설계할때는 반드시 빼야함)</span></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;member&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orders = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">getOrders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrders</span><span class="params">(List&lt;Order&gt; orders)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orders = orders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> city; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.city = city; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getStreet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> street; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStreet</span><span class="params">(String street)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.street = street; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Orders</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;ORDERS&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;ORDER_ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;MEMBER_ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Member member;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime orderDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Enumerated(EnumType.STRING)</span></span><br><span class="line">    <span class="keyword">private</span> OrderStatus orderStatus;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;order&quot;, cascade = CascadeType.ALL)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderItem&gt; orderItems = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;OrderItem&gt; <span class="title">getOrderItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//연관 관계 편의 메서드 (getter/setter관례와 다르게 네이밍하자)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOrderItem</span><span class="params">(OrderItem orderItem)</span> </span>&#123;</span><br><span class="line">        orderItems.add(orderItem);</span><br><span class="line">        orderItem.setOrder(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">getMember</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> member;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMember</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.member = member;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">getOrderDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderDate</span><span class="params">(LocalDateTime orderDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderDate = orderDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderStatus <span class="title">getOrderStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderStatus</span><span class="params">(OrderStatus orderStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderStatus = orderStatus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>OrderItem</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;ORDER_ITEM_ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;ORDER_ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;ITEM_ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Item item;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> orderPrice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrder</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.order = order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">getItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItem</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.item = item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrderPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderPrice</span><span class="params">(<span class="keyword">int</span> orderPrice)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderPrice = orderPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Item</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="meta">@Column(name = &quot;ITEM_ID&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> stockQuantity;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStockQuantity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stockQuantity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStockQuantity</span><span class="params">(<span class="keyword">int</span> stockQuantity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.stockQuantity = stockQuantity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;엔티티-매핑-Entity-Mapping&quot;&gt;&lt;a href=&quot;#엔티티-매핑-Entity-Mapping&quot; class=&quot;headerlink&quot; title=&quot;엔티티 매핑 (Entity Mapping)&quot;&gt;&lt;/a&gt;엔티티 매핑 (Entity Mappin</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="자바ORM표준JPA프로그래밍" scheme="https://codexdawn.github.io/categories/%EC%9E%90%EB%B0%94ORM%ED%91%9C%EC%A4%80JPA%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"/>
    
    <category term="엔티티 매핑" scheme="https://codexdawn.github.io/categories/%EC%97%94%ED%8B%B0%ED%8B%B0-%EB%A7%A4%ED%95%91/"/>
    
    
    <category term="Java,JPA" scheme="https://codexdawn.github.io/tags/Java-JPA/"/>
    
  </entry>
  
  <entry>
    <title>jpa-persistence</title>
    <link href="https://codexdawn.github.io/2021/03/18/jpa-persistence/"/>
    <id>https://codexdawn.github.io/2021/03/18/jpa-persistence/</id>
    <published>2021-03-18T02:11:16.000Z</published>
    <updated>2021-03-18T10:48:52.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="영속성-관리"><a href="#영속성-관리" class="headerlink" title="영속성 관리"></a>영속성 관리</h1><h2 id="EntityManagerFactory-와-EntityManager"><a href="#EntityManagerFactory-와-EntityManager" class="headerlink" title="EntityManagerFactory 와 EntityManager"></a>EntityManagerFactory 와 EntityManager</h2><figure class="highlight java"><figcaption><span>EntityManagerFactory와EntityManager사용법</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory(<span class="string">&quot;jpa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> EntityManager entityManager = entityManagerFactory.createEntityManager();</span><br></pre></td></tr></table></figure><figure class="highlight xml"><figcaption><span>persistence.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">persistence</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/persistence&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.2&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">persistence-unit</span> <span class="attr">name</span>=<span class="string">&quot;jpa&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>entity.Member<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>entity.Team<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>entity.Order<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>entity.Product<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span>&gt;</span>entity.Address<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.h2.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sa&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:h2:tcp://localhost/~/jpqlshop&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.dialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.hibernate.dialect.H2Dialect&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.show_sql&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.format_sql&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.use_sql_comments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span> <span class="attr">value</span>=<span class="string">&quot;create&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">persistence-unit</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistence</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>Persistence.createEntityManagerFactory(“jpa”)</strong> 를 호출하면 META_INF/persistence.xml 에 있는 정보를 바탕으로 EntityManagerFactory를 생성한다. </p></li><li><p>EntityManagerFactory는 멀티스레드로 동시에 접근해도 안전하여, 서로 다른 스레드간에 공유가능하지만, EntityManager는 멀티스레드로 동시 접근하면, 동시성 문제로 스레드간 절대 공유하면 안됨. </p></li></ul><h2 id="Persistence-Context-영속성-컨텍스트"><a href="#Persistence-Context-영속성-컨텍스트" class="headerlink" title="Persistence Context (영속성 컨텍스트)"></a>Persistence Context (영속성 컨텍스트)</h2><ul><li>Persistence Context : Entity를 영구 저장하는 환경 </li><li>em.persist(member)는 단순 저장을 넘어서, entityManager를 사용해서 Persistence Context에 저장한다. </li><li>EntityManager로 저장 혹은 조회 명령을 하면 EntityManager가 Persistence Context에 해당 Entity를 보관함. </li></ul><h2 id="Entity-LifeCycle-엔티티-생명주기"><a href="#Entity-LifeCycle-엔티티-생명주기" class="headerlink" title="Entity LifeCycle(엔티티 생명주기)"></a>Entity LifeCycle(엔티티 생명주기)</h2><p><img src="https://thorben-janssen.com/wp-content/uploads/2020/07/Lifecycle-Model-1024x576.png" alt="Entity LifeCycle"><br>[참고: thorben-janssen.com]</p><blockquote><p>Entity 4가지 상태 </p><ul><li>비영속 (new/transient) : Persistence Context와 전혀 관계 없는 상태   </li><li>영속 (Managed) : Persistence Context 저장된 상태 </li><li>준영속 (detached) : Persistence Context 저장되었다가 분리된 상태 </li><li>삭제 (removed) : 삭제된 상태 </li></ul></blockquote><h3 id="비영속"><a href="#비영속" class="headerlink" title="비영속"></a>비영속</h3><ul><li>Entity객체를 단순 생성한 상태 (em.persist 호출 전 상태)</li></ul><h3 id="영속"><a href="#영속" class="headerlink" title="영속"></a>영속</h3><ul><li>Persistence Context가 관리하는 Entity를 영속 상태라함. </li><li>em.find() / JPQL을 사용해서 조회한 Entity도 Persistence Context가 관리하게됨. </li></ul><h3 id="준영속"><a href="#준영속" class="headerlink" title="준영속"></a>준영속</h3><ul><li>em.detach 호출 (ex&gt; em.detach(member))</li><li>em.close로 Persistence Context를 닫은 상태 </li><li>em.clear로 Persistence Context를 초기화한 상태 </li></ul><h2 id="Persistence-Context-특징"><a href="#Persistence-Context-특징" class="headerlink" title="Persistence Context 특징"></a>Persistence Context 특징</h2><ol><li>Persistence Context와 식별자 값 </li></ol><ul><li>Persistence Context는 식별자 값(@Id로 테이블 기본키와 매핑한 값)으로 구분 </li><li>영속상태는 식별자 값이 반드시 있어야함. 없으면 예외 발생 </li></ul><ol start="2"><li>Persistence Context와 데이터베이스 저장 </li></ol><ul><li>JPA는 보통 트랜잭션을 커밋하는 순간 Persistence Context에 새로 저장된 Entity를 DB에 반영 (flush)</li></ul><ol start="3"><li>Persistence Context가 Entity를 관리하면 아래와 같은 장점이 있음. </li></ol><ul><li><p>1차 캐시 </p></li><li><p>동일성 보장 </p></li><li><p>트랜잭션을 지원하는 쓰기 지연 </p></li><li><p>변경 감지 </p></li><li><p>지연 로딩 </p><h3 id="Entity-조회"><a href="#Entity-조회" class="headerlink" title="Entity 조회"></a>Entity 조회</h3></li></ul><ul><li>Persistence Context는 내부에 캐시를 가지고있음 이것이 1차 캐시임 </li></ul><figure class="highlight java"><figcaption><span>entity조회 예제</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Team team = <span class="keyword">new</span> Team();</span><br><span class="line">team.setName(<span class="string">&quot;Team1&quot;</span>);</span><br><span class="line">entityManager.persist(team);</span><br><span class="line"></span><br><span class="line">Team team2 = <span class="keyword">new</span> Team();</span><br><span class="line">team2.setName(<span class="string">&quot;Team2&quot;</span>);</span><br><span class="line">entityManager.persist(team2);</span><br><span class="line"></span><br><span class="line">Member member = <span class="keyword">new</span> Member();</span><br><span class="line">member.setUserName(<span class="string">&quot;m1&quot;</span>);</span><br><span class="line">member.setAge(<span class="number">36</span>);</span><br><span class="line">member.setTeam(team);</span><br><span class="line"></span><br><span class="line">entityManager.persist(member);</span><br><span class="line"></span><br><span class="line">Member member2 = <span class="keyword">new</span> Member();</span><br><span class="line">member2.setUserName(<span class="string">&quot;m2&quot;</span>);</span><br><span class="line">member2.setAge(<span class="number">30</span>);</span><br><span class="line">member2.setTeam(team);</span><br><span class="line"></span><br><span class="line">entityManager.persist(member2);</span><br><span class="line"></span><br><span class="line">Member member3 = <span class="keyword">new</span> Member();</span><br><span class="line">member3.setUserName(<span class="string">&quot;m3&quot;</span>);</span><br><span class="line">member3.setAge(<span class="number">20</span>);</span><br><span class="line">member3.setTeam(team2);</span><br><span class="line"></span><br><span class="line">entityManager.persist(member3);</span><br><span class="line"><span class="comment">// -- 여기까지는 1차캐시랑 쿼리저장소에 저장되어있음, 아직 flush를 안했음. 디비에 없는 상태</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//member1은 1차캐시에서 바로 가져옴 (디비에서가져온게 아님!)</span></span><br><span class="line">Member member1 = entityManager.find(Member.class, member.getId());</span><br><span class="line">System.out.println(member1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//jpql로 호출하면 강제 flush되고, 영속상태로 바뀌고, 캐시에 저장된 값을 반환 (get으로 호출하는 시점에 디비에서 꺼내온다.)</span></span><br><span class="line">Member member1_1 = entityManager.createQuery(<span class="string">&quot;select m from Member m where  m.id = :member1&quot;</span>, Member.class)</span><br><span class="line">                .setParameter(<span class="string">&quot;member1&quot;</span>, member1.getId())</span><br><span class="line">                .getSingleResult();</span><br><span class="line"></span><br><span class="line"><span class="comment">//위 두개는 무조건 true 왜냐 1차캐시에서 같은 주소값으로 가져오기때문 </span></span><br><span class="line">System.out.println(<span class="string">&quot;member1_1 = member1 ==&gt; &quot;</span> + (member1_1 == member1));</span><br><span class="line"></span><br><span class="line">transaction.commit();</span><br></pre></td></tr></table></figure><ul><li>em.find을 호출하면 1차캐시부터 호출해서 봄 (insert쿼리 커밋되기전이라도 1차캐시에 존재하면 바로 가져옴)</li><li>jpql을 사용하면 insert쿼리가 flush되고 조회 쿼리가 나감 (디비에 조회 값이 없기때문에 쓰기지연 쿼리저장소에 저장되어있던 쿼리를 다 부어버리고, 디비조회해버림)</li><li>member1을 여러번 호출해도 같은 주소값을 가져옴 (member1 == member1 =&gt; true) 즉, Persistence Context에서 가져온 값은 동일성이 보장됨. </li></ul><h3 id="Entity-등록"><a href="#Entity-등록" class="headerlink" title="Entity 등록"></a>Entity 등록</h3><ul><li>commit을 한 순간 Persistence Context를 flush하고 디비 commit 진행<ul><li>em.persist를 하고 flush를 한다고 디비에 반영되는것이 아니라, commit 명령어가 나갔을때 비로소 insert쿼리가 반영됨 </li><li>flush는 Persistence Context의 변경 내용을 DB에 전달하는 역할이다. <blockquote><p>트랜잭션을 지원하는 쓰기지연이 가능한 이유 </p><p>begin(); //트랜잭션 시작</p><p>save(A);<br>save(B);<br>save(C);</p><p>commit(); // 트랜잭션 커밋 </p><ol><li><p>데이터를 저장하는 즉시 등록쿼리를 데이터베이스에 보낸다. 예제에서 save() 메소드를 호출할때마다 즉시 DB에 등록쿼리를 보낸다. 그리고 마지막에 트랜잭션을 커밋한다.</p></li><li><p>데이터를 저장하면 등록쿼리를 DB에 보내지않고 메모리에 모아둔다. 그리고 트랜잭션을 커밋할때 모아둔 등록쿼리를 DB에 보낸후 커밋한다. </p></li></ol><p>결론은 어떻게든 커밋직전에 DB에 SQL을 전달하면 됨. 그래서 쓰기지연이 가능하다. </p></blockquote></li></ul></li></ul><h3 id="Entity-수정"><a href="#Entity-수정" class="headerlink" title="Entity 수정"></a>Entity 수정</h3><blockquote><p>기존 SQL 업데이트 쿼리의 문제점</p><ul><li>수정 쿼리가 많아지는 것 </li><li>비즈니스로직을 분석하기 위해 SQL문을 지속적으로 확인해야함 </li><li>결국 직.간접적으로 비즈니스로직이 SQL에 의존하게 됨</li></ul></blockquote><h4 id="변경감지-Dirty-Check"><a href="#변경감지-Dirty-Check" class="headerlink" title="변경감지 (Dirty Check)"></a>변경감지 (Dirty Check)</h4><p>JPA의 업데이트를 확인해보자 </p><figure class="highlight java"><figcaption><span>entity업데이트 예제</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Member member = <span class="keyword">new</span> Member();</span><br><span class="line">member.setUserName(<span class="string">&quot;m1&quot;</span>);</span><br><span class="line">member.setAge(<span class="number">36</span>);</span><br><span class="line">member.setTeam(team);</span><br><span class="line"></span><br><span class="line">entityManager.persist(member);</span><br><span class="line"></span><br><span class="line"><span class="comment">//JPA UPDATE방법</span></span><br><span class="line">member.setAge(<span class="number">35</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>JPA는 변경감지(Dirty Check)를 통해서 update문을 생성한다. </li></ul><blockquote><p>변경감지 수행 순서 </p><ol><li>트랜잭션을 커밋하면 EntityManager 내부에서 먼저 flush를 호출됨. </li><li>Entity와 Snapshot을 비교해 변경된 Entity를 찾는다. </li><li>변경된 Entity가 있으면 수정쿼리를 생성해서 쓰기 지연 SQL 저장소에 보낸다. </li><li>쓰기 지연 저장소의 SQL을 DB에 보냄</li><li>DB 트랜잭션을 커밋함. </li></ol></blockquote><ul><li>변경감지는 Persistence Context가 관리하는 영속상태 Entity에만 적용됨. </li></ul><p>JPA의 update기본전략은 Entity의 모든 필드를 업데이트 한다. </p><blockquote><p>모든 필드를 업데이트 하면 좋은점 </p><ol><li>수정쿼리가 항상 같다 </li><li>DB에 동일한 쿼리를 보내면 DB는 이전에 한번 파싱된 쿼리를 재사용 가능</li></ol><p>참고&gt; 부분업데이트를 해야한다면, @DynamicUpdate를 사용한다. (필드가 30개 이상이라면 추천)</p></blockquote><h3 id="Entity-삭제"><a href="#Entity-삭제" class="headerlink" title="Entity 삭제"></a>Entity 삭제</h3><figure class="highlight java"><figcaption><span>entity업데이트 예제</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Member member = em.find(Member.class, <span class="string">&quot;memberA&quot;</span>); </span><br><span class="line"></span><br><span class="line">entityManager.remove(member);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>remove메서드를 호출하는 순간 Persistence Context에서도 제거됨 </li></ul><h2 id="Flush"><a href="#Flush" class="headerlink" title="Flush"></a>Flush</h2><p>Flush는 Persistence Context의 변경내용을 DB에 반영해줌. (반영만 하고 실제로는 Commit시 적용됨.)</p><blockquote><p>Flush를 수행하면 벌어지는 일?</p><ol><li>Dirty Check 가 동작함. 스냅샷과 비교해서 수정된 entity를 찾아서 수정쿼리를 만들어 쓰기지연 SQL저장소에 등록함 </li><li>쓰기지연 SQL저장소의 쿼리를 DB에 전송 (등록,수정,삭제)</li></ol></blockquote><p>Persistence Context를 flush하는 방법 3가지 </p><ol><li>em.flush를 호출 </li><li>트랜잭션 커밋시 자동 호출 </li><li>JPQL 쿼리 실행시 자동 호출 </li></ol><h3 id="flush모드-옵션"><a href="#flush모드-옵션" class="headerlink" title="flush모드 옵션"></a>flush모드 옵션</h3><ul><li>FlushModeType.AUTO : 커밋이나 쿼리를 실행할 때 플러시 (기본값)</li><li>FlushModeType.COMMIT : 커밋할때만 플러시 </li></ul><h2 id="준영속-1"><a href="#준영속-1" class="headerlink" title="준영속"></a>준영속</h2><p>Persistence Context가 관리하는 영속상태의 Entity가 Persistence Context에서 분리된 것을 준영속 상태한다.<br>따라서, 준영속 상태에서는 Persistence Context가 제공하는 기능을 사용할수 없다! </p><blockquote><p>준영속 상태를 만드는 방법 3가지 </p><ol><li>em.detach(entity) : 특정 Entity만 준영속 상태로 전환 </li><li>em.clear() : Persistence Context를 완전히 초기화 </li><li>em.close() : Persistence Context를 종료 </li></ol></blockquote><h3 id="Entity를-준영속-상태로-전환-detach"><a href="#Entity를-준영속-상태로-전환-detach" class="headerlink" title="Entity를 준영속 상태로 전환 : detach"></a>Entity를 준영속 상태로 전환 : detach</h3><figure class="highlight java"><figcaption><span>준영속사용방법</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Member member = <span class="keyword">new</span> Member();</span><br><span class="line">member.setUserName(<span class="string">&quot;m1&quot;</span>);</span><br><span class="line">member.setAge(<span class="number">36</span>);</span><br><span class="line"></span><br><span class="line">entityManager.persist(member);</span><br><span class="line"></span><br><span class="line"><span class="comment">//JPA에서 update문</span></span><br><span class="line">member.setAge(<span class="number">35</span>);</span><br><span class="line"></span><br><span class="line">entityManager.detach(member);</span><br><span class="line"></span><br><span class="line">Member mb = entityManager.find(Member.class, member.getId());</span><br><span class="line">System.out.println(<span class="string">&quot;detach obj: &quot;</span>+mb); <span class="comment">//null로 출력됨 왜냐면 영속성 관리에서 제거되었기 때문에</span></span><br><span class="line">transaction.commit();</span><br></pre></td></tr></table></figure><ul><li>준영속 상태가 되면 Persistence Context의 관리에서 벗어나게 되므로, 선택된 해당 Entity의 기존 쓰기 지연 SQL저장소에 저장되어 있던 부분도 제거됨. 따라서 등록,업데이트 등의 쿼리는 미수행됨. </li></ul><h4 id="Persistence-Context-초기화-clear"><a href="#Persistence-Context-초기화-clear" class="headerlink" title="Persistence Context 초기화 : clear"></a>Persistence Context 초기화 : clear</h4><ul><li>Persistence Context가 초기화 되었기때문에 detach 같이 특정 Entity가 제거되는것이 아닌, 모든 Persistence Context에 등록된 캐시, 쓰기 지연 SQL 저장소에 저장된 모든것들이 초기화됨. </li></ul><h4 id="Persistence-Context-종료-close"><a href="#Persistence-Context-종료-close" class="headerlink" title="Persistence Context 종료 : close"></a>Persistence Context 종료 : close</h4><ul><li>Persistence Context가 종료되었기때문에 더이상 Persistence Context관리가 되지 않는다. </li></ul><h4 id="준영속-상태의-특징"><a href="#준영속-상태의-특징" class="headerlink" title="준영속 상태의 특징"></a>준영속 상태의 특징</h4><ul><li>거의 비영속에 가깝다</li><li>식별자 값을 가지고있다. (이미 한번 Persistence Context관리가 되었기때문에)</li><li>지연 로딩을 할 수 없다. </li></ul><ul><li>지연로딩은 실제 객체 대신 프록시 객체를 로딩해두고 해당 객체를 실제 사용할때 Persistence Context 통해 데이터를 불러오는 방법. </li></ul><h3 id="병합-merge"><a href="#병합-merge" class="headerlink" title="병합: merge"></a>병합: merge</h3><p>준영속 상태에서 영속상태로 전환하려면 em.merge(entity) 사용하면 된다.<br>비영속 상태에서도 merge를 사용하면 영속상태로 전환 가능하다. (merge는 saveOrUpdate 기능을 수행)</p><p>merge는 새로운 entity로 생성되기때문에, 기존에 준영속 시킨 객체와 다른 인스턴스를 가진다. 따라서 기존에 참조하던 준영속 entity 변수에 새롭게 merge한entity를 참조하도록 코드를 변경하는것이 안전함 </p><p>ex&gt;<br>//Member mergeMember = em2.merge(member); //아래 코드로 변경<br>member = em2.merge(member); //기존 준영속상태로 참조하던 인스턴스로 할당해주는것이 안전함! </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;영속성-관리&quot;&gt;&lt;a href=&quot;#영속성-관리&quot; class=&quot;headerlink&quot; title=&quot;영속성 관리&quot;&gt;&lt;/a&gt;영속성 관리&lt;/h1&gt;&lt;h2 id=&quot;EntityManagerFactory-와-EntityManager&quot;&gt;&lt;a href=&quot;#E</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="자바ORM표준JPA프로그래밍" scheme="https://codexdawn.github.io/categories/%EC%9E%90%EB%B0%94ORM%ED%91%9C%EC%A4%80JPA%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"/>
    
    <category term="영속성 관리" scheme="https://codexdawn.github.io/categories/%EC%98%81%EC%86%8D%EC%84%B1-%EA%B4%80%EB%A6%AC/"/>
    
    
    <category term="Java,JPA" scheme="https://codexdawn.github.io/tags/Java-JPA/"/>
    
  </entry>
  
  <entry>
    <title>java-effective-10</title>
    <link href="https://codexdawn.github.io/2021/02/24/java-effective-10/"/>
    <id>https://codexdawn.github.io/2021/02/24/java-effective-10/</id>
    <published>2021-02-24T06:07:49.000Z</published>
    <updated>2021-02-24T10:19:21.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="equals는-일반규약을-지켜-재정의-하라"><a href="#equals는-일반규약을-지켜-재정의-하라" class="headerlink" title="equals는 일반규약을 지켜 재정의 하라"></a>equals는 일반규약을 지켜 재정의 하라</h2><h3 id="equals를-재정의-하지-말아야할-경우"><a href="#equals를-재정의-하지-말아야할-경우" class="headerlink" title="equals를 재정의 하지 말아야할 경우"></a>equals를 재정의 하지 말아야할 경우</h3><ul><li><strong>각 인스턴스가 본질적으로 고유하다.</strong> 값을 표현하는게 아니라 동작하는 개체를 표현하는 클래스가 여기 해당됨. (Thread가 좋은예)</li><li><strong>인스턴스의 ‘논리적 동치성’을 검사할 일이 없다.</strong> Pattern클래스로 인스턴스가 정규표현식을 나타내는지 검사하는 방법도 있지만, 설계자가 원하지 않고 필요없다고 판단할수도 있음 그럴때는 기본 equals만으로 해결해도됨.</li><li><strong>상위 클래스에서 재정의한 equals가 하위 클래스에도 딱 들어맞는다</strong> (ex&gt; List구현체들은 AbstractList로부터 상속받아 그대로 사용.)</li><li><strong>클래스가 private이거나 package-private이고 equals메서드를 호출할 일이 없다.</strong> <figure class="highlight java"><figcaption><span>equals메서드 호출금지방법</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(); <span class="comment">//호출금지 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>그렇다면 equals를 재정의 해야할 때는 언제? </p><ul><li>객체 식별성(object identity; 두 객체가 물리적으로 같은가)이 아니라, 논리적 동치성을 확인해야하는데, 상위 클래스의 equals가 논리적 동치성을 비교하도록 재정의되지 않았을 때다. (주로 값클래스들이 해당됨. Integer,String)</li><li>값 클래스라고 해도 값이 같은 인스턴스가 둘 이상 만들어지지 않음을 보장하는 인스턴스 통제 클래스(아이템1)이라면 equals재정의 안해도됨(Enum도 포함).</li></ul><blockquote><p>equals메서드를 재정의할때 반드시 지켜야하는 규약 </p><ul><li>반사성(reflexivity) : null이 아닌 모든 참조값 x에 대해 x.equals(x)는 true다. </li><li>대칭성(symmetry) : null이 아닌 모든 참조값 x,y에 대해 x.equals(y)가 true면, y.equals(x)도 true다. </li><li>추이성(transitivity) : null이 아닌 모든 참조값 x,y,z에 대해, x.equals(y)가 true이고, y.equals(z)도 true면, x.equals(z)도 true다.</li><li>일관성(consistency) : null이 아닌 모든 참조값 x,y에 대해, x.equals(y)를 반복해서 호출하면 항상 true를 반환하거나 항상 false를 반환한다. </li><li>null-아님 : null이 아닌 모든 참조값 x에 대해, x.equals(null)은 false다. </li></ul></blockquote><h3 id="반사성"><a href="#반사성" class="headerlink" title="반사성"></a>반사성</h3><ul><li>이부분은 일부로 어기지 않는 이상 거의 만족 시키는 조건이다. </li></ul><h3 id="대칭성"><a href="#대칭성" class="headerlink" title="대칭성"></a>대칭성</h3><figure class="highlight java"><figcaption><span>잘못된코드 - 대칭성위배!</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CaseInsensitiveString</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String s; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CaseUnsensitiveString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.s = Objects.requireNonNull(s); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 대칭성 위배! </span></span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o <span class="keyword">instanceof</span> CaseInsensitiveString) &#123;</span><br><span class="line"><span class="keyword">return</span> s.equalsIgnoreCase((CaseInsensitiveString) o).s); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(o <span class="keyword">instanceof</span> String) &#123; <span class="comment">//한방향으로 작동함! </span></span><br><span class="line"><span class="keyword">return</span> s.equalsIngnoreCase((String) o); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 나머지 코드 생략 ... </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 실제 구현할때 */</span></span><br><span class="line"></span><br><span class="line">CaseInsensitiveString cis = <span class="keyword">new</span> CaseInsensitiveString(<span class="string">&quot;Polish&quot;</span>); </span><br><span class="line">String s = <span class="string">&quot;polish&quot;</span>; </span><br><span class="line"></span><br><span class="line">cis.equals(s); <span class="comment">//true </span></span><br><span class="line">s.equals(cis); <span class="comment">//false 를 반환해서 대칭성 위반됨. String객체는 CaseInsensitiveString의 존재를 모름.  </span></span><br><span class="line"></span><br><span class="line">List&lt;CaseInsensitiveString&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(); </span><br><span class="line">list.add(cis); </span><br><span class="line"></span><br><span class="line">list.contains(s); <span class="comment">//contains는 s.equals로 비교하기때문에, false로 반환하게 될것임. 하지만 타 JDK에서는 true나 예외처리가 발생할수도있음. </span></span><br></pre></td></tr></table></figure><p>결국 위 문제를 해결하려면 CaseInsensitiveString의 equals를 String과도 연동하겠다는 허황된 꿈을 버려야한다. 아래 코드를 확인하자.</p><figure class="highlight java"><figcaption><span>개선된코드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> o <span class="keyword">instanceof</span> CaseInsensitiveString &amp;&amp; ((CaseInsensitiveString) o).s.equalsIgnoreCase(s); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="추이성"><a href="#추이성" class="headerlink" title="추이성"></a>추이성</h3><figure class="highlight java"><figcaption><span>추이성</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> x; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> y; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x = x; </span><br><span class="line"><span class="keyword">this</span>.y = y; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> Point))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">Point p = (Point) o; </span><br><span class="line"><span class="keyword">return</span> p.x == x &amp;&amp; p.y == y; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//리스코브 치환 원칙 위배! </span></span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o == <span class="keyword">null</span> || o.getClass != getClass()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">&#125;</span><br><span class="line">Point p = (Point) o; </span><br><span class="line"><span class="keyword">return</span> p.x == x &amp;&amp; p.y == y; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...나머지 코드 생략...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이제 클래스를 확장해서 점에 색상을 더해봅시다. </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Color color; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ColorPoint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, Color color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(x,y); </span><br><span class="line"><span class="keyword">this</span>.color = color; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...나머지 코드 생략...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 대칭성 위배 </span></span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> Point)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//o가 ColorPoint면 색상까지 비교한다. </span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.equals(o) &amp;&amp; ((ColorPoint) o).color == color; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 추이성 위배 </span></span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> Point)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// o가 일반 Point면 색상을 무시하고 비교한다. </span></span><br><span class="line"><span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> ColorPoint)) &#123;</span><br><span class="line"><span class="keyword">return</span> o.equals(<span class="keyword">this</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//o가 ColorPoint면 색상까지 비교한다. </span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.equals(o) &amp;&amp; ((ColorPoint) o).color == color; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 구현코드 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//대칭성 위배되는 equals를 사용 할 경우</span></span><br><span class="line">Point p = <span class="keyword">new</span> Point(<span class="number">1</span>,<span class="number">2</span>); </span><br><span class="line">ColorPoint cp = <span class="keyword">new</span> ColorPoint(<span class="number">1</span>,<span class="number">2</span>,Color.RED); </span><br><span class="line"></span><br><span class="line">p.equals(cp); <span class="comment">// true</span></span><br><span class="line">cp.equals(p); <span class="comment">// 무조건 false </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//추이성 위배되는 equals를 사용 할 경우 </span></span><br><span class="line">ColorPoint p1 = <span class="keyword">new</span> ColorPoint(<span class="number">1</span>,<span class="number">2</span>,Color.RED); </span><br><span class="line">Point p2 = <span class="keyword">new</span> Point(<span class="number">1</span>,<span class="number">2</span>); </span><br><span class="line">ColorPoint p3 = <span class="keyword">new</span> ColorPoint(<span class="number">1</span>,<span class="number">2</span>,Color.BULE);</span><br><span class="line"></span><br><span class="line">p1.equals(p2); <span class="comment">//true </span></span><br><span class="line">p2.equals(p3); <span class="comment">//true</span></span><br><span class="line">p1.equals(p3); <span class="comment">//false 추이성 위배! </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//리스코브치환 원칙을 위배하는 equals를 사용하는 경우 </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;Point&gt; unitCircle = Set.of(<span class="keyword">new</span> Point(<span class="number">1</span>,<span class="number">0</span>), <span class="keyword">new</span> Point(<span class="number">0</span>,<span class="number">1</span>), <span class="keyword">new</span> Point(-<span class="number">1</span>,<span class="number">0</span>), <span class="keyword">new</span> Point(<span class="number">0</span>,-<span class="number">1</span>)); </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">onUnitCircle</span><span class="params">(Point p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> unitCircle.contains(p); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Point를 확장하여 만들어진 인스턴스 개수를 생성자에서 세도록 해보자 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger(); </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CountPoint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(x,y); </span><br><span class="line">counter.incrementAndGet();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numberCreated</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> counter.get(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CountPoint countPoint = <span class="keyword">new</span> CountPoint(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//아래 메서드는 false가 나올것이다. 왜냐면 리스코드치환원칙에 위배 되기때문 getClass비교로 인해 Point클래스 이외에 무조건 false처리됨.</span></span><br><span class="line">countPoint.onUnitCircle(countPoint); </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>그렇다면 추이성 위배를 막으려면 어떻게 해야하는것이 좋을까? 아래 코드에서 확인가능하다. </p><figure class="highlight java"><figcaption><span>추이성 위배를 방지방법</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> </span>&#123; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Point; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Color; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ColorPoint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, Color color)</span> </span>&#123;</span><br><span class="line">point = <span class="keyword">new</span> Point(x,y); </span><br><span class="line"><span class="keyword">this</span>.color = Objects.requireNonNull(color); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//이 ColorPoint의 Point 뷰를 반환한다. </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Point <span class="title">asPoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> point; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> ColorPoint)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">&#125;</span><br><span class="line">ColorPoint cp = (ColorPoint) o; </span><br><span class="line"><span class="keyword">return</span> cp.point.equals(point) &amp;&amp; cp.color.equals(color); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...나머지 코드 생략... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="일관성"><a href="#일관성" class="headerlink" title="일관성"></a>일관성</h3><ul><li>클래스가 불변이든 가변인든 equals의 판단에 신뢰할 수 없는 자원이 끼어들게 해서는 안된다. (java.net.URL의 equals는 주어진 URL과 매핑된 호스트의 ip주소를 이용해 비교함.)</li></ul><h3 id="null-아님"><a href="#null-아님" class="headerlink" title="null-아님"></a>null-아님</h3><ul><li>equals 메서드에서 null여부를 검사하는 부분은 하지말자. null여부를 검사하지말고, instanceof로 매개변수가 올바른 클래스타입인지 여부를 파악해야함. </li></ul><p>지금까지 내용을 종합해서 양질의 equals메서드 구현방법을 단계별로 기술하면?</p><ol><li>== 연산자를 사용해 입력이 자기 자신의 참조인지 확인한다. : 자기 자신이면 true를 반환. 이는 단순한 성능 최적화용으로, 비교 작업이 복잡한 상황일때 값어치가 있음.</li><li>instanceof 연산자로 입력이 올바른 타입인지 확인한다. : 그렇지 않다면 false로 리턴함. </li><li>입력을 올바른 타입으로 형변환한다. : 2번에서 instanceof검사를 했기때문에 이단계는 100% 성공</li><li>입력 객체와 자기 자신의 대응되는 핵심필드들이 모두 일치하는지 하나씩 검사한다 : 모든 필드가 일치하면 true, 하나라도 불일치시 false리턴. </li></ol><p>equals를 다 구현했다면, 세가지만 자문해보자. 대칭적인가? 추이성이 있는가? 일관적인가? 자문에서 끝내지말고 단위테스트를 작성해서 돌려보자.<br>다음 이상의 비법을 따라 작성해본 PhoneNumber클래스용 equals메서드다. </p><figure class="highlight java"><figcaption><span>전형적인 equals메서드의 예</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneNumber</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">short</span> areaCode, prefix, lineNum; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PhoneNumber</span><span class="params">(<span class="keyword">int</span> areaCode, <span class="keyword">int</span> prefix, <span class="keyword">int</span> lineNum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.areaCode = rangeCheck(areaCode,<span class="number">999</span>,<span class="string">&quot;지역코드&quot;</span>);</span><br><span class="line"><span class="keyword">this</span>.prefix = rangeCheck(prefix,<span class="number">999</span>,<span class="string">&quot;프리픽스&quot;</span>);</span><br><span class="line"><span class="keyword">this</span>.lineNum = rangeCheck(lineNum,<span class="number">9999</span>,<span class="string">&quot;가입자번호&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">short</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> max, String arg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(val &lt; <span class="number">0</span> || val &gt; max) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(arg + <span class="string">&quot;: &quot;</span> + val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">short</span>) val; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(o == <span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> PhoneNumber)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PhoneNumber pn = (PhoneNumber) o; </span><br><span class="line"><span class="keyword">return</span> pn.lineNum == lineNum &amp;&amp; pn.prefix == prefix &amp;&amp; pn.areaCode == areaCode; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>equals 메서드를 정의할때 주의사항! </p><ul><li>equals를 재정의할때는 hashCode도 반드시 재정의해아한다!!! (아이템11)</li><li>너무 복잡하게 해결하려 들지 말자! 필드들의 동치성만 검사해도 equals 규약을 어렵지않게 지킬수있음. </li><li>Object외의 타입을 매개변수로 받는 equals 메서드는 선언하지 말자. </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;equals는-일반규약을-지켜-재정의-하라&quot;&gt;&lt;a href=&quot;#equals는-일반규약을-지켜-재정의-하라&quot; class=&quot;headerlink&quot; title=&quot;equals는 일반규약을 지켜 재정의 하라&quot;&gt;&lt;/a&gt;equals는 일반규약을 지켜 </summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Effective Java" scheme="https://codexdawn.github.io/categories/Effective-Java/"/>
    
    <category term="모든 객체의 공통 메서드" scheme="https://codexdawn.github.io/categories/%EB%AA%A8%EB%93%A0-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EA%B3%B5%ED%86%B5-%EB%A9%94%EC%84%9C%EB%93%9C/"/>
    
    
    <category term="Java,EffectiveJava" scheme="https://codexdawn.github.io/tags/Java-EffectiveJava/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-12</title>
    <link href="https://codexdawn.github.io/2021/02/23/clean-code-12/"/>
    <id>https://codexdawn.github.io/2021/02/23/clean-code-12/</id>
    <published>2021-02-23T09:15:13.000Z</published>
    <updated>2021-02-23T12:39:04.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="동시성"><a href="#동시성" class="headerlink" title="동시성"></a>동시성</h1><h2 id="동시성이-필요한-이유"><a href="#동시성이-필요한-이유" class="headerlink" title="동시성이 필요한 이유?"></a>동시성이 필요한 이유?</h2><ul><li>동시성은 결합(coupling)을 없애는 전략이다. 즉, 무엇과 언제를 분리하는 전략이다. </li><li>스레드가 하나인 프로그램은 무엇과 언제가 서로 밀접하다. 그래서 호출 스택을 살펴보면 프로그램 상태가 곧바로 드러남. </li><li>단일스레드로 프로그램을 실행하면 안정적으로 수행은 가능하지만, 처리량에따라 처리수행속도가 느리다. 하지만 다중스레드를 활용하면, 상황에 따라서 안정적이지는 않으나, 처리수행속도는 스레드 갯수가 증가하면 할수록 빨라지게된다. </li></ul><h3 id="미신과-오해"><a href="#미신과-오해" class="headerlink" title="미신과 오해"></a>미신과 오해</h3><ul><li>동시성은 항상 성능을 높여준다 : 동시성은 때로 성능을 높여준다. 대기 시간이 아주 길어 여러 스레드가 프로세서를 공유 할 수 있거나, 여러 프로세서가 동시에 처리할 독립적인 계산이 충분히 많은 경우에만 성능이 높아진다. 어느쪽도 일상적으로 발생하는 상황은 아니다. </li><li>동시성을 구현해도 설계는 변하지 않는다 : 단일 스레드 시스템과 다중 스레드 시슽메은 설계가 판이하게 다르다. 일반적으로 무엇 과 언제를 분리하면 시스템 구조가 크게 달라진다. </li><li>웹 또는 EJB컨테이너를 사용하면 동시성을 이해할 필요가 없다 : 실제로는 컨테이너가 어떻게 동작하는지, 어떻게 동시 수정, 데드락 등과 같은 문제를 피할수 있는지를 알아야만한다. </li></ul><p>다음은 동시성과 관련된 타당한 생각 몇가지다. </p><ul><li>동시성은 다소 부하를 유발한다. : 성능 측면에서부하가 걸리며, 코드도 더 짜야한다.</li><li>동시성은 복잡하다 : 간단한 문제라도 동시성은 복잡하다. </li><li>일반적으로 동시성 버그는 재현하기 어렵다. : 그래서 진짜 결함으로 간주되지않고 일회성 문제로 여겨 무시하기 쉽다. </li><li>동시성을 구현하려면 흔히 근본적인 설계 전략을 재고 해야한다. </li></ul><h2 id="난관"><a href="#난관" class="headerlink" title="난관"></a>난관</h2><ul><li>동시성을 구현하기 어려운 이유는? 아래 코드를 확인해보자. </li></ul><figure class="highlight java"><figcaption><span>일반적인 코드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> lastIdUsed; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ++lastIdUsed; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>인스턴스 X를 생성후, lastIdUsed에 42로 설정하고, 2개의 스레드가 해당 인스턴스를 공유한다고 가정하자. 그럼 결과는 3가지중 하나가 발생한다.</li></ul><blockquote><p>위 코드가 2개의 스레드를 활용할 경우 발생되는 케이스 3가지</p><ul><li>A스레드가 43받고, B스레드는 44를 받는다. lastIdUsed는 44가 된다.</li><li>A스레드가 44받고, B스레드는 43을 받는다. lastIdUsed는 44가 된다. </li><li>A스레드와 B스레드가 43을 받는다. lastIdUsed는 43이 된다. </li></ul></blockquote><ul><li>대부분 정상적인 케이스로 로직이 흘러가지만, 간혹가다가 세번째와 같이 예측하지 못한 경우가 발생하기도 한다. 이 경우가 발생하는 이유는 두 스레드가 getNextId를 수행하는 잠재적인 경로는 최대 12,870개에 달하고, int를 long으로 변경하면 조합가능 경로수는 2,704,156개로 증가한다. </li></ul><h2 id="동시성-방어원칙"><a href="#동시성-방어원칙" class="headerlink" title="동시성 방어원칙"></a>동시성 방어원칙</h2><h3 id="SRP"><a href="#SRP" class="headerlink" title="SRP"></a>SRP</h3><ul><li>SRP는 주어진 메서드/클래스/컴포넌트를 변경할 이유가 하나여야 한다는 원칙이다. 동시성은 복잡성 하나만으로도 따로 분리해야할 이유로 충분함. </li></ul><blockquote><p>동시성을 구현할때 고려해야할 부분 </p><ul><li>동시성 코드는 독자적인 개발, 변경, 조율 주기가 있다.</li><li>동시성 코드에는 독자적인 난관이 있다. 다른 코드에서 겪는 난관과 다르며 훨씬 어렵다.</li><li>잘못 구현한 동시성 코드는 별의별 방식으로 실패한다. 주변에 있는 다른 코드가 발목을 잡지 않더라도 동시성 하나만으로도 충분히 어렵다. </li></ul></blockquote><p><strong>권장사항</strong> : 동시성 코드는 다른코드와 분리하라. (SRP 원칙을 철저하게 지켜라.)</p><h3 id="자료-범위를-제한하라"><a href="#자료-범위를-제한하라" class="headerlink" title="자료 범위를 제한하라"></a>자료 범위를 제한하라</h3><ul><li>앞서 봤듯, 두 스레드가 서로 간섭하므로 예상치 못한 결과를 내놓는데, 이런 문제를 해결하는 방안으로 공유 객체를 사용하는 코드 내 <strong>임계영역(critical sction)</strong> 을 <strong>sychronized</strong> 키워드로 보호하라고 권장.  </li></ul><blockquote><p>공유 자료를 수정하는 위치가 많을수록 다음 가능성도 커진다. </p><ul><li>보호할 임계영역을 빼먹는다. 그래서 공유자료를 수정하는 모든 코드를 망가뜨림. </li><li>모든 임계영역을 올바로 보호했는지 (DRY위반) 확인하느라 똑같은 노력과 수고를 반복함. </li><li>그렇지 않아도 찾아내기 어려운 버그가 더욱 찾기 어려워 진다. </li></ul></blockquote><p><strong>권장사항</strong> : 자료를 캡슐화 하라. 공유자료를 최대한 줄여라. </p><h3 id="자료-사본을-사용하라"><a href="#자료-사본을-사용하라" class="headerlink" title="자료 사본을 사용하라"></a>자료 사본을 사용하라</h3><ul><li>공유 자료를 줄이려면 처음부터 공유하지 않는 방법이 제일 최선임. 하지만 굳이 공유자료를 사용하려면 차라리 각 스레드가 객체를 복사해 사용한 후 한 스레드가 해당 사본에서 결과를 가져오는 방법도 가능하다. </li></ul><h3 id="스레드는-가능한-독립적으로-구현하라"><a href="#스레드는-가능한-독립적으로-구현하라" class="headerlink" title="스레드는 가능한 독립적으로 구현하라"></a>스레드는 가능한 독립적으로 구현하라</h3><ul><li>자신만의 세상에 존재하는 스레드를 구현한다. 즉, 다른 스레드와 자료를 공유하지 않는다. 각 스레드는 클라이언트 요청 하나를 처리한다. 모든 정보는 비공유 출처에서 가져오며 로컬 변수에 저장한다. 그러면 각 스레드는 세상에 자신만 있는듯이 돌아갈수 있다. 다른 스레드와 동기화할 필요가 없으므로 </li></ul><p><strong>권장사항</strong> : 독자적인 스레드로, 가능하다면 다른 프로세서에서, 돌려도 괜찮도록 자료를 독립적인 단위로 분할하라. </p><h2 id="라이브러리를-이해하라"><a href="#라이브러리를-이해하라" class="headerlink" title="라이브러리를 이해하라"></a>라이브러리를 이해하라</h2><blockquote><p>자바 5부터는 동시성 측면에서 이전 버전보다 많이 개선되었음. 자바5로 스레드 코드를 구현한다면 다음을 고려하라. </p><ul><li>스레드 환경에 안전한 컬렉션을 사용한다. 자바5부터 제공</li><li>서로 무관한 작업을 수행할때는 executor프레임워크로 사용한다. </li><li>가능하다면 스레드가 차단(blocking)되지 안흔 방법을 사용한다. (non-blocking IO)</li><li>일부 클래스 라이브러리는 스레드에 안전하지 못하다.</li></ul></blockquote><h3 id="스레드-환경에-안전한-컬렉션"><a href="#스레드-환경에-안전한-컬렉션" class="headerlink" title="스레드 환경에 안전한 컬렉션"></a>스레드 환경에 안전한 컬렉션</h3><ul><li>java.util.concurrent.ConcurrentHashMap은 거의 모든 상황에서 HashMap보다 빠르다. </li><li>좀 더 복잡한 동시성 설계를 지원하고자 자바5에서는 다른 클래스도 추가되었다. 아래를 참고하자.<blockquote><p>자바5에 추가된 동시성 설계에 도움줄 클래스 목록 </p><ul><li>ReentrantLock : 한 메서드에서 잠그고 다른 메서드에서 푸는 lock이다. </li><li>Semaphore : 전형적인 세마포어다. count가 있는 락이다.</li><li>CountDownLatch : 지정한 수만큼 이벤트가 발생하고 나서야 대기중인 스레드를 모두 해제하는 락이다. 모든 스레드에게 동시에 공평하게 시작할 기회를 준다. </li></ul></blockquote></li></ul><p><strong>권장사항</strong> : 언어가 제공하는 클래스를 검토하라. 자바에서는 java.util.concurrent, java.util.concurrent.atomic, java.util.concurrent.locks를 익혀라. </p><h2 id="실행모델을-이해하라"><a href="#실행모델을-이해하라" class="headerlink" title="실행모델을 이해하라"></a>실행모델을 이해하라</h2><blockquote><p>다중스레드 관련 용어 정리 </p><ul><li>한정된 자원(Bound Resource) : 다중 스레드 환경에서 사용하는 자원으로, 크기나 숫자가 제한적이다. 데이터베이스 연결, 길이가 일정한 읽기/쓰기 버퍼등이 예다. </li><li>상호 배제(Mutual Exclusion) : 한번에 한 스레드만 공유 자료나 공유 자원을 사용 할수 있는 경우를 가리킨다.</li><li>기아(Starvation) : 한 스레드나 여러 스레드가 굉장히 오랫동안 혹은 영원 자원을 기다린다. 예를들어, 항상 짧은 스레드에게 우선순위를 준다면, 짧은 스레드가 지속적으로 이어질 경우, 긴 스레드가 기아상태에 빠짐 </li><li>데드락(Deadlock) : 여러 스레드가 서로가 끝나기를 기다린다. 모든 스레드가 각기 필요한 자원을 다른 스레드가 점유하는 발마에 어느쪽도 더 이상 진행하지 못한다. </li><li>라이브락(Livelock) : lock을 거는 단계에서 각 스레드가 서로를 방해한다. 스레드는 계속해서 진행하려 하지만, 공명(resonance)로 인해, 굉장히 오랫동안 혹은 영원히 진행하지 못한다. </li></ul></blockquote><h3 id="다중-스레드-프로그래밍에서-사용하는-실행-모델"><a href="#다중-스레드-프로그래밍에서-사용하는-실행-모델" class="headerlink" title="다중 스레드 프로그래밍에서 사용하는 실행 모델"></a>다중 스레드 프로그래밍에서 사용하는 실행 모델</h3><h4 id="생산자-소비자-Producer-Consumer"><a href="#생산자-소비자-Producer-Consumer" class="headerlink" title="생산자-소비자 (Producer - Consumer)"></a>생산자-소비자 (Producer - Consumer)</h4><ul><li>하나 이상 생산자 스레드가 정보를 생성해 버퍼나 대기열(큐)에 넣는다. 하나 이상 소비자 스레드가 대기열에서 정보를 가져와 사용한다.</li><li>생산자 스레드와 소비자 스레드가 사용하는 대기열은 한정된 자원이다. </li><li>생산자 스레드는 대기열에 빈공간이 있어야 정보를 채운다.  즉, 빈공간이 생길때까지 기다린다. </li><li>대기열을 올바로 사용하고자 생산자 스레드와 소비스 스레드는 서로에게 시그널을 보낸다. </li><li>하지만 생산자 스레드 와 소비자 스레드가 동시에 시그널을 날리면? 무한으로 시그널을 기다릴 가능성이 존재한다. </li><li><a href="https://ko.wikipedia.org/wiki/%EC%83%9D%EC%82%B0%EC%9E%90-%EC%86%8C%EB%B9%84%EC%9E%90_%EB%AC%B8%EC%A0%9C">생산자-소비자</a> 참고 </li></ul><h4 id="읽기-쓰기-Readers-Writers"><a href="#읽기-쓰기-Readers-Writers" class="headerlink" title="읽기-쓰기 (Readers - Writers)"></a>읽기-쓰기 (Readers - Writers)</h4><ul><li>읽기 스레드를 위한 주된 정보원으로 공유 자원을 사용하지만, 쓰기 스레드가 이 공유 자원을 이따금 갱신한다고 하자. 이런 경우 처리율이 문제의 핵심이다.</li><li>처리율을 강조하면 기아 현상이 생기거나 오래된 정보가 쌓인다. </li><li>갱신을 허용하면 처리율에 영향을 미친다. </li><li>읽기 스레드와 쓰기 쓰레드간 균형을 잡지 않으면, 읽기 스레드를 강조하면 기아현상, 쓰기 스레드를 강조하면 처리율에 영향을 미치게 되므로 양쪽 균현을 잡으면서 동시 갱신 문제를 피하는 해법이 필요함. </li><li><a href="https://ko.wikipedia.org/wiki/%EB%8F%85%EC%9E%90-%EC%A0%80%EC%9E%90_%EB%AC%B8%EC%A0%9C">읽기-쓰기</a> 참고 </li></ul><h4 id="식사하는-철학자들-Dining-Philosopers"><a href="#식사하는-철학자들-Dining-Philosopers" class="headerlink" title="식사하는 철학자들(Dining Philosopers)"></a>식사하는 철학자들(Dining Philosopers)</h4><ul><li><a href="https://ko.wikipedia.org/wiki/%EC%8B%9D%EC%82%AC%ED%95%98%EB%8A%94_%EC%B2%A0%ED%95%99%EC%9E%90%EB%93%A4_%EB%AC%B8%EC%A0%9C">식사하는 철학자</a> 참고</li></ul><p><strong>권장사항</strong> : 위에서 설명한 기본 알고리즘과 각 해법을 이해하라 </p><h2 id="동기화하는-메서드-사이에-존재하는-의존성을-이해하라"><a href="#동기화하는-메서드-사이에-존재하는-의존성을-이해하라" class="headerlink" title="동기화하는 메서드 사이에 존재하는 의존성을 이해하라"></a>동기화하는 메서드 사이에 존재하는 의존성을 이해하라</h2><ul><li>동기화는 메서드 사이에서 의존성이 존재하면 동시성 코드에 찾아내기 어려운 버그가 생김 </li><li>자바에서는 <strong>sychronized</strong> 라는 개념이 존재함. </li><li>공유 클래스 하나에 동기화된 메서드가 여럿이라면 구현이 올바른지 다시 한번 확인해야함. </li></ul><blockquote><p>공유 객체 하나에 여러 메서드가 필요한 상황도 생긴다. 그럴때는 아래 3가지를 고려하라.</p><ul><li>client에서 잠금 : client에서 첫번째 메서드를 호출하기전 서버를 잠금. 마지막 메서드를 호출 할때까지 잠금을 유지. </li><li>server에서 잠금 : server에다 서버를 잠그고 모든 메서드를 호출한 후 잠금을 해제하는 메서드를 구현. client는 이 메서드를 호출 </li><li>연결서버(Adapted) : 잠금을 수행하는 중간 단계를 생성. 서버에서 잠금 방식과 유사하지만 원래서버는 변경안함. </li></ul></blockquote><h2 id="동기화하는-부분을-작게-만들어라"><a href="#동기화하는-부분을-작게-만들어라" class="headerlink" title="동기화하는 부분을 작게 만들어라"></a>동기화하는 부분을 작게 만들어라</h2><ul><li>동기화처리한다고 여기저기 <strong>sychronized</strong> 를 남발하면 곤란한다. </li><li>하지만 임계영역(critical section)은 반드시 보호해야 하기때문에, 코드를 짤 때는 임계영역의 수를 최대한 줄여야한다. </li><li>임계영역을 줄인답시고 거대한 임계영역 하나로 구현하는 순진한 프로그래머도 있는데.. 필요이상으로 임계영역 크기를 키우면 스레드간에 경쟁이 늘어나고 프로그램 성능이 저하됨. </li></ul><p><strong>권장사항</strong> : 동기화 하는 부분은 최대한 작게!! </p><h2 id="올바른-종료-코드는-구현하기-어렵다"><a href="#올바른-종료-코드는-구현하기-어렵다" class="headerlink" title="올바른 종료 코드는 구현하기 어렵다"></a>올바른 종료 코드는 구현하기 어렵다</h2><ul><li>깔끔하게 종료하는 코드는 올바로 구현하기 어렵다. 가장 흔히 발생하는 문제가 데드락이다. 즉, 스레드가 절대 오지않을 시그널을 기다린다. </li></ul><p><strong>권장사항</strong> : 종료 코드를 개발 초기부터 고민하고 동작하게 초기부터 구현하라. 생각보다 오래걸린다. 생각보다 어려우므로 이미 나온 알고리즘을 검토하라. </p><h2 id="스레드-코드-테스트하기"><a href="#스레드-코드-테스트하기" class="headerlink" title="스레드 코드 테스트하기"></a>스레드 코드 테스트하기</h2><p><strong>권장사항</strong> : 문제를 노출하는 테스트 케이스를 작성하라. 프로그램 설정과 시스템 설정과 부하를 바꿔가며 자주 돌려라. 테스트가 실패하면 원인을 추적하라. 다시 돌렸더니 통과하더라도 그냥 넘어가면 안되고 다시 재검증하여 해결하도록 노력해야한다. </p><blockquote><p>스레드 코드 테스트하는 지침서 </p><ul><li>말이 안되는 실패는 잠정적인 스레드 문제로 취급하라.</li><li>다중 스레드를 고려하지 않은 순차 코드부터 제대로 돌게 만들자.</li><li>다중 스레드를 쓰는 코드 부분을 다양한 환경에 쉽게 끼워 넣을 수 있도록 스레드 코드를 구현하라.</li><li>다중 스레드를 쓰는 코드 부분을 상황에 맞춰 조정 할 수 있게 작성하라.</li><li>프로세서 수보다 많은 스레드를 돌려보라.</li><li>다른 플랫폼에서 돌려보라.</li><li>코드에 보조코드를 넣어 돌려라. 강제로 실패를 일으키게 해보라. </li></ul></blockquote><h3 id="말이-안되는-실패는-잠정적인-스레드-문제로-취급하라"><a href="#말이-안되는-실패는-잠정적인-스레드-문제로-취급하라" class="headerlink" title="말이 안되는 실패는 잠정적인 스레드 문제로 취급하라."></a>말이 안되는 실패는 잠정적인 스레드 문제로 취급하라.</h3><ul><li>다중 스레드는 때떄로 ‘말이 안되는’ 오류를 일으킨다.</li><li>스레드 코드에 잠입한 버그는 수천 수백만번에 한번씩 드러나기도하기때문에, 실패를 재현하기 아주 어려움. </li><li>많은 개발자들은 이런 재현하기 어려운 실패를 ‘일회성’ 문제로 여기고 그냥 넘기는 부분이 많다.<br><strong>권장사항</strong> : 시스템 실패를 ‘일회성’이라 치부하지 마라. </li></ul><h3 id="다중-스레드를-고려하지-않은-순차코드부터-제대로-도게-만들자"><a href="#다중-스레드를-고려하지-않은-순차코드부터-제대로-도게-만들자" class="headerlink" title="다중 스레드를 고려하지 않은 순차코드부터 제대로 도게 만들자."></a>다중 스레드를 고려하지 않은 순차코드부터 제대로 도게 만들자.</h3><ul><li>스레드 환경 밖에서 코드가 제대로 동작하는지 확인하자.</li><li>일반적인 방법으로 스레드가 호출하는 POJO를 생성한다. POJO는 스레드를 모른다. 따라서 스레드 환경 밖에서 테스트가 가능</li><li>POJO에넣는 코드는 많을수록 좋다.<br><strong>권장사항</strong> : 스레드 환경 밖에서 생기는 버그와 스레드 환경에서 생기는 버그를 동시에 디버깅 하지 마라. 먼저 스레드 환경 밖에서 코드를 올바로 돌려라. </li></ul><h3 id="다중-스레드를-쓰는-코드-부분을-다양한-환경에-쉽게-끼워-넣을-수-있도록-스레드-코드를-구현하라"><a href="#다중-스레드를-쓰는-코드-부분을-다양한-환경에-쉽게-끼워-넣을-수-있도록-스레드-코드를-구현하라" class="headerlink" title="다중 스레드를 쓰는 코드 부분을 다양한 환경에 쉽게 끼워 넣을 수 있도록 스레드 코드를 구현하라."></a>다중 스레드를 쓰는 코드 부분을 다양한 환경에 쉽게 끼워 넣을 수 있도록 스레드 코드를 구현하라.</h3><p>다중 스레드를 쓰는 코드를 다양한 설정으로 실행하기 쉽게 구현하라</p><ul><li>한 스레드로 실행하거나, 여러 스레드로 실행하거나, 실행 중 스레드 수를 바꿔본다.</li><li>스레드 코드를 실제 환경이나 테스트 환경에서 돌려본다.</li><li>테스트 코드를 빨리, 천천히 다양한 속도로 돌려본다.</li><li>반복 테스트가 가능하도록 테스트 케이스를 작성한다.<br><strong>권장사항</strong> : 다양한 설정에서 실행할 목적으로 다른 환경에 쉽게 끼워 넣을수 있게 코드를 구현하라. </li></ul><h3 id="다중-스레드를-쓰는-코드-부분을-상황에-맞춰-조정-할-수-있게-작성하라"><a href="#다중-스레드를-쓰는-코드-부분을-상황에-맞춰-조정-할-수-있게-작성하라" class="headerlink" title="다중 스레드를 쓰는 코드 부분을 상황에 맞춰 조정 할 수 있게 작성하라."></a>다중 스레드를 쓰는 코드 부분을 상황에 맞춰 조정 할 수 있게 작성하라.</h3><ul><li>적절한 스레드 개수를 파악하려면 상당한 시행착오가 필요함. </li><li>스레드 개수를 조율하기 쉽게 코드를 구현하는 부분 필요. </li><li>프로그램이 돌아가는 도중에 스레드 개수를 변경하는 방법도 고려.</li><li>프로그램 처리율과 효율에 따라 스스로 스레드 개수를 조율하는 코드도 고민.</li></ul><h3 id="프로세서-수보다-많은-스레드를-돌려보라"><a href="#프로세서-수보다-많은-스레드를-돌려보라" class="headerlink" title="프로세서 수보다 많은 스레드를 돌려보라."></a>프로세서 수보다 많은 스레드를 돌려보라.</h3><ul><li>시스템이 스레드를 스와핑 할때도 문제가 발생한다. 스와핑을 일으키려면 프로세스 수보다 많은 스레드를 돌린다. 스와핑이 잦을 수록 임계영역을 빼먹은 코드나 데드락을 일으키는 코드를 찾기 쉬워진다. </li></ul><h3 id="다른-플랫폼에서-돌려보라"><a href="#다른-플랫폼에서-돌려보라" class="headerlink" title="다른 플랫폼에서 돌려보라."></a>다른 플랫폼에서 돌려보라.</h3><ul><li>다중 스레드 코드는 플랫폼에 따라 다르게 돌아감<br><strong>권장사항</strong> : 처음부터 그리고 자주 모든 목표 플랫폼에서 코드를 돌려라. </li></ul><h3 id="코드에-보조코드를-넣어-돌려라-강제로-실패를-일으키게-해보라"><a href="#코드에-보조코드를-넣어-돌려라-강제로-실패를-일으키게-해보라" class="headerlink" title="코드에 보조코드를 넣어 돌려라. 강제로 실패를 일으키게 해보라."></a>코드에 보조코드를 넣어 돌려라. 강제로 실패를 일으키게 해보라.</h3><ul><li>스레드 버그를 예방하려면 강제로 실패를 일켜야하는데, 방법은 보조 코드를 방법은 두가지가 존재한다. </li></ul><blockquote><p>보조코드 추가 방법 </p><ul><li>직접 구현하기</li><li>자동화 </li></ul></blockquote><h4 id="직접-구현하기"><a href="#직접-구현하기" class="headerlink" title="직접 구현하기"></a>직접 구현하기</h4><ul><li>코드에 직접 wait(), sleep(), yield(), priority() 함수를 추가 </li></ul><blockquote><p>직접 구현하면 발생되는 문제</p><ul><li>보조 코드를 삽입할 적정 위치를 찾아야함.</li><li>어떤 함수를 어디서 호출해야 적당한지 어떻게 아냐?</li><li>배포환경에 보조 코드를 그대로 남겨두면 프로그램 성능이 떨어짐.</li><li>무작위적이다. 오류가 드러날지도 모르고 드러나지 않을지도 모른다. 사실상 드러나지 않을 확률이 더 높다. </li></ul></blockquote><h4 id="자동화"><a href="#자동화" class="headerlink" title="자동화"></a>자동화</h4><ul><li>보조 코드를 자동으로 추가하려면,AOF(Aspect-Oriented Framework), CGLIB, ASM등과 같은 도구를 사용한다. (AOP 활용)</li></ul><p><strong>권장사항</strong> : 흔들기 기법을 사용해 오류를 찾아내라 (강제로 오류를 발생하게 해야함)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;동시성&quot;&gt;&lt;a href=&quot;#동시성&quot; class=&quot;headerlink&quot; title=&quot;동시성&quot;&gt;&lt;/a&gt;동시성&lt;/h1&gt;&lt;h2 id=&quot;동시성이-필요한-이유&quot;&gt;&lt;a href=&quot;#동시성이-필요한-이유&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="동시성" scheme="https://codexdawn.github.io/categories/%EB%8F%99%EC%8B%9C%EC%84%B1/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>java-effective-9</title>
    <link href="https://codexdawn.github.io/2021/02/23/java-effective-9/"/>
    <id>https://codexdawn.github.io/2021/02/23/java-effective-9/</id>
    <published>2021-02-23T08:26:08.000Z</published>
    <updated>2021-02-23T08:51:21.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="try-finally-보다는-try-with-resources를-사용하라"><a href="#try-finally-보다는-try-with-resources를-사용하라" class="headerlink" title="try-finally 보다는 try-with-resources를 사용하라"></a>try-finally 보다는 try-with-resources를 사용하라</h2><ul><li>자바 라이브러리에는 close메서드를 호출해 직접 닫아줘야하는 자원이 꽤 있음. (InputStream,OutputStream,java.sql.Connection등)</li><li>JAVA7이 들어서면서 try-with-resources가 제공됨. 이 구조를 사용하려면 AutoClosable이 구현되어있어야함. </li></ul><figure class="highlight java"><figcaption><span>try-with-resources 사용법1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">firstLineOfFile</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">try</span>(BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path))) &#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>try-with-resources 사용법2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(String src, String dst)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">try</span>(InputStream in = <span class="keyword">new</span> FileInputStream(src); </span><br><span class="line">OutputStream out = <span class="keyword">new</span> FileOutputStream(dst)) &#123;</span><br><span class="line"><span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE]; </span><br><span class="line"><span class="keyword">int</span> n; </span><br><span class="line"><span class="keyword">while</span>((n = in.read(buf)) &gt;= <span class="number">0</span>)</span><br><span class="line">out.write(buf,<span class="number">0</span>,n); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>try-with-resources 사용법3</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">firstLineOfFile</span><span class="params">(String path, String defaultVal)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">try</span>(BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path))) &#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine(); </span><br><span class="line">&#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line"><span class="keyword">return</span> defaultVal; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;try-finally-보다는-try-with-resources를-사용하라&quot;&gt;&lt;a href=&quot;#try-finally-보다는-try-with-resources를-사용하라&quot; class=&quot;headerlink&quot; title=&quot;try-finally </summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Effective Java" scheme="https://codexdawn.github.io/categories/Effective-Java/"/>
    
    <category term="객체 생성과 파괴" scheme="https://codexdawn.github.io/categories/%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%8C%8C%EA%B4%B4/"/>
    
    
    <category term="Java,EffectiveJava" scheme="https://codexdawn.github.io/tags/Java-EffectiveJava/"/>
    
  </entry>
  
  <entry>
    <title>java-effective-8</title>
    <link href="https://codexdawn.github.io/2021/02/23/java-effective-8/"/>
    <id>https://codexdawn.github.io/2021/02/23/java-effective-8/</id>
    <published>2021-02-23T07:43:45.000Z</published>
    <updated>2021-02-23T08:27:01.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="finalizer-와-cleaner-사용을-피하라"><a href="#finalizer-와-cleaner-사용을-피하라" class="headerlink" title="finalizer 와 cleaner 사용을 피하라"></a>finalizer 와 cleaner 사용을 피하라</h2><ul><li>자바는 두가지 객체 소멸자가 있는데, finalizer 와 cleaner이다. </li><li>finalizer는 예측할수 없고, 상황에 따라 위험할수 있어 일반적으로 불필요함. </li><li>cleaner는 finalizer보다는 덜 위험하지만, 여전히 예측할수 없고, 느리고, 일반적으로 불필요함. (GC에서 소멸하는 역할을 담당하기때문)</li><li>finalizer와 cleaner로는 제때 실행되어야하는 (realtime환경) 작업은 절대 할 수 없음. (application이 제때 종료되어야하는데, 게으른 finalizer/ cleaner로 인해 종료가 안되어있는 상태로 유지될 수있다.)</li><li>상태를 영구적으로 수정하는 작업에서는 절대로! finalizer나 cleaner에 의존해서는 안됨! </li><li>System.gc / System.runFinaliztion 메서드에 현혹되지 말자. GC 처리의 우선순위를 높여줄지언정 제때 처리된다는 보장이 없음 </li><li>finalizer/cleaner는 심각한 성능 문제도 동반한다. (AutoClosable처리에 비해 50배의 성능차 발생 )</li><li>finalizer/cleaner를 대신할 묘안은? AutoClosable을 구현해주고, 클라이언트에서 인스턴스를 다사용하면 close 메서드를 호출하면 됨. (일반적으로 예외가 발생해도 제대로 종료되도록 try-with-resources를 사용해야함.)</li></ul><blockquote><p>finalizer 와 cleaner는 그럼 언제 사용해야 잘사용했다고 칭찬받을까? </p><ol><li>자원의 소유자가 close메서드를 호출하지 못할걸 대비한 안전망이다.</li><li>Native-Peer와 연결된 객체 (JVM 메모리 구조중 - Native Method Area 영역을 말함 (JNI))에서 close하고 싶을때 호출한다. Native Method Area영역은 자바 객체가 아니기때문에 GC에서 관리하지 못한다. </li></ol></blockquote><ul><li>결론은 finalizer/cleaner활용보다는 AutoClosable로 객체life를 관리하고, try-with-resources로 객체를 호출해 관리하는것이 베스트이다. </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;finalizer-와-cleaner-사용을-피하라&quot;&gt;&lt;a href=&quot;#finalizer-와-cleaner-사용을-피하라&quot; class=&quot;headerlink&quot; title=&quot;finalizer 와 cleaner 사용을 피하라&quot;&gt;&lt;/a&gt;final</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Effective Java" scheme="https://codexdawn.github.io/categories/Effective-Java/"/>
    
    <category term="객체 생성과 파괴" scheme="https://codexdawn.github.io/categories/%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%8C%8C%EA%B4%B4/"/>
    
    
    <category term="Java,EffectiveJava" scheme="https://codexdawn.github.io/tags/Java-EffectiveJava/"/>
    
  </entry>
  
  <entry>
    <title>java-effective-7</title>
    <link href="https://codexdawn.github.io/2021/02/23/java-effective-7/"/>
    <id>https://codexdawn.github.io/2021/02/23/java-effective-7/</id>
    <published>2021-02-23T05:16:40.000Z</published>
    <updated>2021-02-23T07:41:01.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="다-쓴-객체는-참조를-해제하라"><a href="#다-쓴-객체는-참조를-해제하라" class="headerlink" title="다 쓴 객체는 참조를 해제하라"></a>다 쓴 객체는 참조를 해제하라</h2><figure class="highlight java"><figcaption><span>메모리누수가 일어는 위치는 어디인가?</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Object[] elements; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">elements = <span class="keyword">new</span> Object[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object e)</span> </span>&#123;</span><br><span class="line">ensureCapacity();</span><br><span class="line">elements[size++] = e; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> elements[--size]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//배열의 크기는 2배씩 증가 , 원소를 위한 공간을 적어도 하나 이상 확보 </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(elements.length == size) &#123;</span><br><span class="line">elements = Arrays.copyOf(elements,<span class="number">2</span> * size + <span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Q&gt; 위 코드에서 메모리 누수는 어디서 발생할까?</p><ul><li>스택이 커졌다 줄어둘때 스택에서 꺼내진 객체들을 GC가 회수 하지 않는다. 프로그램에서 더이상 사용하지 않더라도 말이다. (pop 메서드) </li></ul></blockquote><ul><li>위 코드의 메모리누수는 어떻게 해결해야하는가? 아래 코드를 확인해보자. </li></ul><figure class="highlight java"><figcaption><span>제대로 구현 pop메서드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException(); </span><br><span class="line">&#125;</span><br><span class="line">Object result = elements[--size]; </span><br><span class="line">elements[size] = <span class="keyword">null</span>; <span class="comment">//다 쓴 참조 해제  </span></span><br><span class="line"><span class="keyword">return</span> result; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위와 같이 null처리하면 실수로 사용하려하면, NullPointerException을 던지며 종료되어 조기에 발견 가능 </li></ul><blockquote><p>Q&gt; null처리는 언제 해야할까? (Stack 클래스 메모리 누수 이유)</p><ul><li>스택이 자기 메모리를 직접 관리하기 때문 (Heap에서 참조로 스택과 연결되어있어서 GC가 해제를 못함)</li></ul><p>개발자들은 자기 메모리를 직접 관리하는 클래스라면 프로그래머는 항시 메모리 누수에 주의 해야한다. </p></blockquote><ul><li><p>캐시 역시 메모리 누수의 주범이다. 객체 참조를 캐시에 넣고 이 사실을 까맣게 잊은채 그 객체를 다 쓴뒤로도 한참 놔두는일.이부분을 해소하려면, WeakHashMap을 사용해 캐시를 만들자. 그럼 다쓴 엔트리는 그 즉시 제거됨.  </p></li><li><p>리스너 혹은 콜백이라 불리는 것도 메모리누수의 주범이다. 클라이언트가 콜백을 등록하고 명확히 해지하지 않을때 발생한다. 이럴때는 콜백을 약한 참조로 저장하면 GC가 즉시 수거해감. (ex&gt; WeakHashMap에 키로 저장하면 됨.)</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;다-쓴-객체는-참조를-해제하라&quot;&gt;&lt;a href=&quot;#다-쓴-객체는-참조를-해제하라&quot; class=&quot;headerlink&quot; title=&quot;다 쓴 객체는 참조를 해제하라&quot;&gt;&lt;/a&gt;다 쓴 객체는 참조를 해제하라&lt;/h2&gt;&lt;figure class=&quot;hi</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Effective Java" scheme="https://codexdawn.github.io/categories/Effective-Java/"/>
    
    <category term="객체 생성과 파괴" scheme="https://codexdawn.github.io/categories/%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%8C%8C%EA%B4%B4/"/>
    
    
    <category term="Java,EffectiveJava" scheme="https://codexdawn.github.io/tags/Java-EffectiveJava/"/>
    
  </entry>
  
  <entry>
    <title>java-effective-6</title>
    <link href="https://codexdawn.github.io/2021/02/23/java-effective-6/"/>
    <id>https://codexdawn.github.io/2021/02/23/java-effective-6/</id>
    <published>2021-02-23T02:33:32.000Z</published>
    <updated>2021-02-23T03:32:53.847Z</updated>
    
    <content type="html"><![CDATA[<h2 id="불필요한-객체-생성을-피하라"><a href="#불필요한-객체-생성을-피하라" class="headerlink" title="불필요한 객체 생성을 피하라"></a>불필요한 객체 생성을 피하라</h2><ul><li>String객체를 인스턴스화 시키는건 미친짓이다. (new String(“s”))</li><li>소위 비싼 객체는 반복해서 사용하지 말고 캐싱하여 재사용하자 (static final로 만들어서 사용할수 있도록)</li></ul><figure class="highlight java"><figcaption><span>정규표현식 개선전 코드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRomanNumeral</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.matches(<span class="string">&quot;^(?=.)M*(C[MD]|DC&#123;0,3&#125;)&quot;</span>)a + <span class="string">&quot;(X[CL]|L?X&#123;0,3&#125;)(I[XV]|V?&#123;0,3&#125;$)&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>정규표현식 개선후 코드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RomanNumerals</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern ROMAN = Pattern.compile(<span class="string">&quot;^(?=.)M*(C[MD]|DC&#123;0,3&#125;)&quot;</span>)a + <span class="string">&quot;(X[CL]|L?X&#123;0,3&#125;)(I[XV]|V?&#123;0,3&#125;$&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRomanNumeral</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">reutrn ROMAN.matcher(s).matches(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>개선전 코드의 String.matches는 정규표현식으로 문자열 형태를 확인하는 가장 쉬운 방법이지만, 성능이 중요한 상황에서 반복해 사용하기엔 적합하지 않다. </li><li>개선후 코드이 Pattern객체는 한번 쓰고나서 곧바로 GC 대상으로 잡힌다. Pattern객체는 입력받은 정규표현식에 해당하는 유한 상태 머신을 만들기때문에 인스턴스 생성비용이 높다. 따라서 이부분을 개선하려면, 정규표현식을 표현하는 변수를 클래스 초기화 즉 정적 초기화(static final)하여 직접 생성해 캐싱해두고, 나중에 isRomanNumeral메서드가 호출될때 인스턴스를 재사용하도록 한다.</li><li>불필요한 객체를 만드는 또다른 예는 ‘오토박싱’이다. 아래 코드로 확인해보자 </li></ul><figure class="highlight java"><figcaption><span>정규표현식 개선후 코드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Long sum = <span class="number">0L</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> i = <span class="number">0</span>; i &lt;= Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">sum += i; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위 코드는 sum을 오토박싱해서 사용하고 있는데, 이부분은 결국 Long인스턴스변수를 계속 생성하고 있기때문에 성능저하를 유발한다. </li><li>박싱된 기본타입보다는 기본 타입을 사용하고, 의도치 않은 오토박싱이 숨어들지 않도록 주의해야함. </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;불필요한-객체-생성을-피하라&quot;&gt;&lt;a href=&quot;#불필요한-객체-생성을-피하라&quot; class=&quot;headerlink&quot; title=&quot;불필요한 객체 생성을 피하라&quot;&gt;&lt;/a&gt;불필요한 객체 생성을 피하라&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;String객체를 인스</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Effective Java" scheme="https://codexdawn.github.io/categories/Effective-Java/"/>
    
    <category term="객체 생성과 파괴" scheme="https://codexdawn.github.io/categories/%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%8C%8C%EA%B4%B4/"/>
    
    
    <category term="Java,EffectiveJava" scheme="https://codexdawn.github.io/tags/Java-EffectiveJava/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-11</title>
    <link href="https://codexdawn.github.io/2021/02/22/clean-code-11/"/>
    <id>https://codexdawn.github.io/2021/02/22/clean-code-11/</id>
    <published>2021-02-22T12:34:47.000Z</published>
    <updated>2021-02-22T13:50:51.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="창발성"><a href="#창발성" class="headerlink" title="창발성"></a>창발성</h1><blockquote><p><a href="https://terms.naver.com/entry.nhn?docId=4383255&cid=40942&categoryId=31528">창발성</a> : 하위 체계로부터 생겨나지만, 그 하위 체계로 환원되지 않는 속성을 말한다. (네이버사전 참고)</p></blockquote><h2 id="창발적-설계로-깔끔한-코드를-구현하자"><a href="#창발적-설계로-깔끔한-코드를-구현하자" class="headerlink" title="창발적 설계로 깔끔한 코드를 구현하자"></a>창발적 설계로 깔끔한 코드를 구현하자</h2><blockquote><p>켄트백 아저씨의 4가지 소프트웨어 설계 규칙 </p><ul><li>모든 테스트를 실행한다.</li><li>중복을 없앤다.</li><li>프로그래머 의도를 표현한다.</li><li>클래스와 메서드 수를 최소로 줄인다. </li></ul><p>켄트백 아저씨는 저 4가지 규칙을 잘 지키면 ‘단순하다’ 라고 말한다.<br>그리고 위 목록은 중요도 순서다. </p></blockquote><h2 id="단순한-설계-규칙-1-모든-테스트를-실행-하라"><a href="#단순한-설계-규칙-1-모든-테스트를-실행-하라" class="headerlink" title="단순한 설계 규칙 1: 모든 테스트를 실행 하라."></a>단순한 설계 규칙 1: 모든 테스트를 실행 하라.</h2><ul><li><p>테스트를 철저히 거쳐 모든 테스트 케이스를 항상 통과하는 시스템은 ‘테스트가 가능한 시스템’이다. 반대로 테스트가 불가능한 시스템은 검증도 불가능하다. </p><blockquote><p>설계 품질을 애쓴다는건 무엇을 하는걸까?</p><ul><li>크기가 작고 목적 하나만 수행하는 클래스를 만드려고 노력한다. SRP는 테스트가 훨씬 쉽다. </li><li>결합도가 높히지 않고, 응집도를 높이려 노력한다. (테스트케이스 많이 작성,DIP적용,DI,인터페이스,추상화 등을 통해 결합도 낮추도록 한다)</li></ul></blockquote></li><li><p>결론은 ‘테스트 케이스를 만들고 계속 돌려라’라는 간단한 규칙을 말한다. </p></li></ul><h2 id="단순한-설계-규칙-2-2-4-리팩터링"><a href="#단순한-설계-규칙-2-2-4-리팩터링" class="headerlink" title="단순한 설계 규칙 2: 2~4 리팩터링"></a>단순한 설계 규칙 2: 2~4 리팩터링</h2><ul><li>테스트 케이스를 모두 작성했다면, 코드와 클래스를 정리해도 괜춘함. 점진적 리팩토링이 필요한 시점이 된다. </li><li>테스트 케이스가 모두 작성되었기 때문에, 코드를 정리하면서 시스템이 깨질까 걱정할 필요는 전혀 없게 된다. </li></ul><h2 id="중복을-없애라"><a href="#중복을-없애라" class="headerlink" title="중복을 없애라"></a>중복을 없애라</h2><ul><li>우수한 설계에서 중복은 커다란 적이다. 중복은 추가 작업, 추가 위험, 불필요한 복잡도를 뜻하기 때문 </li><li>깔끔한 시스템을 만들려면 단 몇줄이라도 중복을 제거하겠다는 의지가 필요하다. 아래 코드를 살펴보자.</li></ul><figure class="highlight java"><figcaption><span>개선전 코드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scaleToOneDimension</span><span class="params">(<span class="keyword">float</span> desiredDimension, <span class="keyword">float</span> imageDimension)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Math.abs(desiredDimension - imageDimension) &lt; errorThreshold) &#123;</span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> scalingFactor = desiredDimension / imageDimension; </span><br><span class="line">scalingFactor = (<span class="keyword">float</span>) (Math.floor(scalingFactor * <span class="number">100</span>) * <span class="number">0.01f</span>); </span><br><span class="line"></span><br><span class="line">RenderOp newImage = ImageUtilities.getScaledImage(image,saclingFactor,scalingFactor);</span><br><span class="line">imgage.dispose();</span><br><span class="line">System.gc();</span><br><span class="line">image = newImage; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> degrees)</span> </span>&#123;</span><br><span class="line">RenderdOp newImage = ImageUtilities.getRoatedImage(image,degrees); </span><br><span class="line">image.dispose();</span><br><span class="line">System.gc();</span><br><span class="line">image = newImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>개선후 코드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scaleToOneDimension</span><span class="params">(<span class="keyword">float</span> desiredDimension, <span class="keyword">float</span> imageDimension)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Math.abs(desiredDimension - imageDimension) &lt; errorThreshold) &#123;</span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> scalingFactor = desiredDimension / imageDimension; </span><br><span class="line">scalingFactor = (<span class="keyword">float</span>) (Math.floor(scalingFactor * <span class="number">100</span>) * <span class="number">0.01f</span>); </span><br><span class="line"></span><br><span class="line">RenderOp newImage = replaceImage(ImageUtilities.getScaledImage(image,saclingFactor,scalingFactor));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> degrees)</span> </span>&#123;</span><br><span class="line">replaceImage(ImageUtilities.getRotatedImage(image,degrees));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceImage</span><span class="params">(RenderedOp newImage)</span> </span>&#123;</span><br><span class="line">image.dispose();</span><br><span class="line">System.gc();</span><br><span class="line">image = newImage; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>공통적인 코드를 새 메서드로 뽑고보니, 클래스가 SRP를 위반함. replaceImage메서드가 변경되면, getScaledImage,getRotatedImage 메서드가 변경될수 있기때문에, 두가지 책임이 부여가된다. </li><li>replaceImage 메서드를 공통으로 호출하도록 클래스로 분리시켜야한다. 분리시키면, 새 메서드의 가시성이 높아지고, 재사용의 기회가 주어진다. </li><li>Template Method 패턴은 고차원 중복을 제거할 목적으로 자주 사용되는 기법이다. 아래 예를 보자 </li></ul><figure class="highlight java"><figcaption><span>템플릿메서드패턴 적용전</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VacationPolicy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accueUSDivisionVacation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//지금까지 근무한 시간을 바탕으로 휴가 일수를 계산하는 코드 </span></span><br><span class="line"><span class="comment">// ..중략..</span></span><br><span class="line"><span class="comment">//휴가 일수가 미국 최소 법정 일수를 만족하는지 확인하는 코드 </span></span><br><span class="line"><span class="comment">// ..중략..</span></span><br><span class="line"><span class="comment">//휴가 일수를 급여 대장에 적용하는 코드 </span></span><br><span class="line"><span class="comment">// ..중략..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accueEUDivisionVacation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//지금까지 근무한 시간을 바탕으로 휴가 일수를 계산하는 코드 </span></span><br><span class="line"><span class="comment">// ..중략..</span></span><br><span class="line"><span class="comment">//휴가 일수가 유럽연합 최소 법정 일수를 만족하는지 확인하는 코드 </span></span><br><span class="line"><span class="comment">// ..중략..</span></span><br><span class="line"><span class="comment">//휴가 일수를 급여 대장에 적용하는 코드 </span></span><br><span class="line"><span class="comment">// ..중략..</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위 코드에서 최소 법정 일수를 계산하는 코드만 제외하면 두 메서드는 동일함. </li></ul><figure class="highlight java"><figcaption><span>템플릿메서드패턴 적용후</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VacationPolicy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accueVacation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">calculateBaseVacationHours();</span><br><span class="line">alterForLegalMinimums();</span><br><span class="line">applyToPayroll(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculateBaseVacationHours</span><span class="params">()</span> </span>&#123;<span class="comment">/*...중략...*/</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">alterForLegalMinimums</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">applyToPayroll</span><span class="params">()</span> </span>&#123;<span class="comment">/*...중략...*/</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">USVacationPolicy</span> <span class="keyword">extends</span> <span class="title">VacationPolicy</span> </span>&#123;</span><br><span class="line"><span class="meta">@Overrride</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">alterForLegalMinimums</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 미국 최소 법정 일수를 사용한다.  </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EUVacationPolicy</span> <span class="keyword">extends</span> <span class="title">VacationPolicy</span> </span>&#123;</span><br><span class="line"><span class="meta">@Overrride</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">alterForLegalMinimums</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 유럽연합 최소 법정 일수를 사용한다.  </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>하위 클래스는 중복되지 않는 정보만 제공해 accueVacation 알고리즘에서 빠진 ‘구멍’을 메운다. </li></ul><h2 id="표현하라"><a href="#표현하라" class="headerlink" title="표현하라"></a>표현하라</h2><p>개발자의 의도를 분명히 표현하는 방법 4가지! </p><ol><li>좋은 이름을 선택한다 : 이름과 기능이 완전이 딴판인 클래스나 함수로 유지보수 담당자를 놀라게 해서는 안된다. </li><li>함수와 클래스 크기를 가능한 줄인다. : 작은 클래스와 작은 함수는 이름 짓기도 쉽고, 구현하기도 쉽고, 이해하기도 쉽다.</li><li>표준 명칭을 사용한다. : 예를들어, 디자인 패턴은 의사소통과 표현력 강화가 주요 목적이다. 클래스가 COMMAND나 VISITOR와 같은 표전 패턴을 사용해 구현된다면, 클래스 이름에 패턴 이름을 넣어준다. 그러면 다른 개발자가 클래스 설계 의도를 이해하기 쉬워진다.</li><li>단위 테스트 케이스를 꼼꼼히 작성한다. : 테스트 케이스는 소위 예제로 보여주는 문서다. 다시 말해, 잘 만든 테스트케이스를 읽어보면 클래스 기능이 한눈에 들어온다. </li></ol><ul><li>위 규칙도 중요하지만 결론은 나중에 다른 개발자들이 내 코드를 보고 잘 이해시킬수 있도록 충분한 고민과 노력이 필요함. </li></ul><h2 id="클래스와-메서드-수를-최소로-줄여라"><a href="#클래스와-메서드-수를-최소로-줄여라" class="headerlink" title="클래스와 메서드 수를 최소로 줄여라"></a>클래스와 메서드 수를 최소로 줄여라</h2><ul><li>중복을 제거하고, 의도를 표현하고, SRP를 준수한다는 기본적인 개념도 극단으로 치달으면 득보다 실이 더 많아진다. 클래스와 메서드 크기를 줄이자고 조그만 클래스와 메서드를 수없이 만드는 사례도 없지 않다. 그래서 이 규칙은 함수와 클래스 수를 가능한 줄이라고 제안함. </li><li>목표는 함수 와 클래스 크기를 작게 유지하면서, 동시에 시스템 크기도 작게 유지하는데 있지만, 이 규칙은 설계 규칙 4가지중 가장 우선순위가 낮다. 결론은 테스트 케이스를 만들고 중복을 제거하고 의도를 표현하는 작업이 더 중요하다는 뜻 </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;창발성&quot;&gt;&lt;a href=&quot;#창발성&quot; class=&quot;headerlink&quot; title=&quot;창발성&quot;&gt;&lt;/a&gt;창발성&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://terms.naver.com/entry.nhn?docId=43832</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="창발성" scheme="https://codexdawn.github.io/categories/%EC%B0%BD%EB%B0%9C%EC%84%B1/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-10</title>
    <link href="https://codexdawn.github.io/2021/02/20/clean-code-10/"/>
    <id>https://codexdawn.github.io/2021/02/20/clean-code-10/</id>
    <published>2021-02-20T06:20:33.000Z</published>
    <updated>2021-02-20T10:03:44.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="시스템"><a href="#시스템" class="headerlink" title="시스템"></a>시스템</h1><blockquote><p>복잡성은 죽음이다. 개발자에게서 생기를 앗아가며, 제품을 계획하고 제작하고 테스트하기 어렵게 만든다. </p></blockquote><h2 id="도시를-세운다면"><a href="#도시를-세운다면" class="headerlink" title="도시를 세운다면 ?"></a>도시를 세운다면 ?</h2><ul><li>도시는 한사람의 힘으로 운영하기 힘들다. 수도관리팀, 전력관리팀 등 각분야를 관리하는 크고 작은 조직들이 존재한다. 이렇게 도시가 잘 운영되는 비결은 적절한 <strong>추상화</strong> 와 <strong>모듈화</strong> 때문이다. 그래서 큰 그림을 이해하지 못할지라도 개인과 개인이 관리하는 ‘구성요소’는 효율적으로 돌아간다. </li><li>흔히 소프트웨어 팀도 도시처럼 구성한다. </li></ul><h2 id="시스템-제작과-시스템-사용을-분리하라"><a href="#시스템-제작과-시스템-사용을-분리하라" class="headerlink" title="시스템 제작과 시스템 사용을 분리하라."></a>시스템 제작과 시스템 사용을 분리하라.</h2><ul><li>제작(construction)은 사용과 아주 다르다. </li></ul><blockquote><p>소프트웨어 시스템은 (어플리케이션 객체를 제작하고 <strong>의존성</strong> 을 서로 ‘연결’하는) 준비과정(준비과정 이후에 이어지는) 런타임 로직을 분리해야 한다.  </p></blockquote> <ul><li>소프트웨어 설계의 시작단계는 ‘관심사’다. 곧 <a href="https://ko.wikipedia.org/wiki/%EA%B4%80%EC%8B%AC%EC%82%AC_%EB%B6%84%EB%A6%AC#:~:text=%EC%BB%B4%ED%93%A8%ED%84%B0%20%EA%B3%BC%ED%95%99%EC%97%90%EC%84%9C%20%EA%B4%80%EC%8B%AC%EC%82%AC%20%EB%B6%84%EB%A6%AC,%EC%9D%98%20%EA%B4%80%EC%8B%AC%EC%82%AC%EB%A5%BC%20%ED%95%B4%EA%B2%B0%ED%95%9C%EB%8B%A4.&text=%EA%B4%80%EC%8B%AC%EC%82%AC%20%EB%B6%84%EB%A6%AC%EB%A5%BC%20%EC%9D%B4%EC%9A%A9%ED%95%98%EB%A9%B4,%EC%A0%95%EB%8F%84%EC%9D%98%20%EC%9E%90%EC%9C%A0%EA%B0%80%20%EC%83%9D%EA%B8%B4%EB%8B%A4.">‘관심사 분리’</a>를 의미한다. </li></ul><figure class="highlight java"><figcaption><span>lazy evaluation</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Service <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(service == <span class="keyword">null</span>) &#123;</span><br><span class="line">service = <span class="keyword">new</span> MyServiceImpl(...); <span class="comment">//모든상황에 기본값일까? </span></span><br><span class="line"><span class="keyword">return</span> service; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Q&gt; lazy evaluation(계산지연)의 장점</p><ol><li>실제 필요할때까지 객체를 생성 안함.</li><li>NullPointerException이 발생 안함. </li></ol></blockquote><h4 id="위-코드는-lazy-evaluation의-장점을-갖지만-단점은-무엇일까"><a href="#위-코드는-lazy-evaluation의-장점을-갖지만-단점은-무엇일까" class="headerlink" title="위 코드는 lazy evaluation의 장점을 갖지만 단점은 무엇일까?"></a>위 코드는 lazy evaluation의 장점을 갖지만 단점은 무엇일까?</h4><ul><li>MyServiceImpl에서 생략한 생성자 인수에 명시적으로 의존한다. 런타임 로직에서 의존성을 해결하지 않으면 컴파일이 안됨</li><li>테스트 문제 MyServiceImpl객체가 무거운 객체라면 즉, 의존하는 객체가 많다면, 의존하는 테스트 전용 객체(Mock Object)를 service필드에 할당을 해야한다. </li><li>일반 런타임 로직에다 객체 생성 로직을 섞어 놓은 탓에 service가 null인 경로 null이 아닌경로 등의 모든 실행경로를 테스트해야함. </li><li>책임이 둘이라는 말은 메서드가 작업을 두가지 이상 수행한다는 의미로 SRP를 위반함. </li><li>가장 큰 문제는 주석 처럼 모든상황에 적합할지 여부이다. </li></ul><h4 id="체계적이고-탄탄한-시스템을-만들고-싶다면"><a href="#체계적이고-탄탄한-시스템을-만들고-싶다면" class="headerlink" title="체계적이고 탄탄한 시스템을 만들고 싶다면?"></a>체계적이고 탄탄한 시스템을 만들고 싶다면?</h4><ul><li>lazy evaluation 같이 손쉬운 기법으로 모듈성을 깨서는 절대로 안됨. (객체를 생성하거나 의존성을 연결할때도 마찬가지) </li><li>설정 논리는 일반 실행 논리와 분리해야 모듈성이 높아진다. </li><li>주요 의존성을 해소하기 위한 방식은, 즉 전반적이며 일관적인 방식도 필요하다. </li></ul><h3 id="Main분리"><a href="#Main분리" class="headerlink" title="Main분리"></a>Main분리</h3><ul><li>Main분리는 시스템 생성과 시스템 사용을 분리하는 방법으로, 생성과 관련된 코드는 main 이나 main이 호출하는 모듈로 옮기고, 나머지 시슽메은 모든 객체가 생성되었고 모든 의존성이 연결되었다고 가정한다. </li></ul><h3 id="팩토리"><a href="#팩토리" class="headerlink" title="팩토리"></a>팩토리</h3><ul><li>객체가 생성되는 시점을 애플리케이션이 결정할 필요도 생기는데, 이때는 추상 팩토리 패턴(Abstract Factory)을 사용한다. </li></ul><h3 id="의존성-주입-Dependency-Injection"><a href="#의존성-주입-Dependency-Injection" class="headerlink" title="의존성 주입 (Dependency Injection)"></a>의존성 주입 (Dependency Injection)</h3><ul><li>사용과 제작을 분리하는 강력한 메커니즘 하나가 <a href="https://ko.wikipedia.org/wiki/%EC%9D%98%EC%A1%B4%EC%84%B1_%EC%A3%BC%EC%9E%85">의존성 주입</a> 이다.</li><li>의존성 주입은 제어 역전(IoC) 기법을 의존성 관리에 적용한 메커니즘이다. 제어역전은 한 객체가 맡은 보조 책임을 새로운 객체에게 전적으로 떠넘김. </li><li><strong>새로운 객체는 넘겨받은 책임만 맡으므로 SRP를 지키게됨.</strong> 의존성 관리 맥락에서는 객체는 의존성 자체를 인스턴스로 만드는 책임은 지지 않는다. 대신에 이런 책임을 다른 전담 메커니즘에 넘겨야만 한다. 그렇게 함으로써 제어를 역전한다. 전담 메커니즘으로는 main루틴이나 특수 컨테이너 대표적으로 spring framework같은게 있겠다. </li></ul><h2 id="확장"><a href="#확장" class="headerlink" title="확장"></a>확장</h2><blockquote><p>소프트웨어 시스템은 물리적인 시스템과 다르다. 관심사를 적절히 분리해 관리한다면 소프트웨어 아키텍처는 점진적으로 발전 할수 있다.    </p></blockquote><h3 id="횡단-관심사-cross-cutting"><a href="#횡단-관심사-cross-cutting" class="headerlink" title="횡단 관심사 (cross-cutting)"></a>횡단 관심사 (cross-cutting)</h3><ul><li>영속성과 같은 관심사는 애플리케이션의 자연스러운 객체 경계를 넘나드는 경향이 있다. </li><li>대표적인 횡단 관심사를 사용하는 개념이 <a href="https://ko.wikipedia.org/wiki/%EA%B4%80%EC%A0%90_%EC%A7%80%ED%96%A5_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D#:~:text=%EC%BB%B4%ED%93%A8%ED%8C%85%EC%97%90%EC%84%9C%20%EA%B4%80%EC%A0%90%20%EC%A7%80%ED%96%A5%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D,%EA%B2%83%EC%9D%B4%20%EB%AA%A9%EC%A0%81%EC%9D%B8%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84%EC%9D%B4%EB%8B%A4.">AOP</a> 이다. </li></ul><h2 id="자바-프록시"><a href="#자바-프록시" class="headerlink" title="자바 프록시"></a>자바 프록시</h2><ul><li>자바 프록시는 단순한 상황에 적합하다. 개별객체나 클래스에서 메서드 호출을 감싸는 경우가 좋은 예다. 하지만 JDK에서 제공하는 동적 프록시는 인터페이스만 지원한다. 클래스 프록시를 사용하려면 CGLIB,ASM,Javassist 등과 같은 바이트 코드 처리 라이브러리가 필요함. </li><li>코드 양과 크기는 프록시의 두가지 단점이다. 결국 프록시로는 깨끗한 코드를 작성하기 어려움 또한 프록시는 시스템 단위로 실행 ‘지점’을 명시하는 메커니즘도 제공하지 않는다. </li></ul><h2 id="순수-자바-AOP-프레임워크"><a href="#순수-자바-AOP-프레임워크" class="headerlink" title="순수 자바 AOP 프레임워크"></a>순수 자바 AOP 프레임워크</h2><ul><li>다행스럽게 대부분의 프록시 코드는 판박이라 도구로 자동화 할수 있다. 순수 자바 관점을 구현하는 스프링 AOP, JBoss AOP 등과 같은 여러 자바 프레임워크는 내부적으로 프록시를 사용한다. </li></ul><h2 id="AspectJ-관점"><a href="#AspectJ-관점" class="headerlink" title="AspectJ 관점"></a>AspectJ 관점</h2><ul><li><a href="https://ko.wikipedia.org/wiki/AspectJ">AspectJ</a>는 관점을 분리하는 강력하고 풍부한 도구 집합을 제공하지만, 새 도구를 활용하고 새 언어 문법과 사용법을 익혀야 한다는 단점이 있음. </li></ul><h2 id="테스트-주도-시스템-아키텍처-구축"><a href="#테스트-주도-시스템-아키텍처-구축" class="headerlink" title="테스트 주도 시스템 아키텍처 구축"></a>테스트 주도 시스템 아키텍처 구축</h2><blockquote><p>최선의 시스템 구조는 각기 POJO(또는 다른) 객체로 구현되는 모듈화된 관심사 영역(도메인)으로 구성된다. 이렇게 서로 다른 영역은 해당 영역 코드에 최소한의 영향을 미치는 관점이나 유사한 도구를 사용해 통합한다. 이런 구조 역시 코드와 마찬가지로 테스트 주도 기법을 적용할수 있다. </p></blockquote><ul><li>건축은 BDUF(Big Design Up Front) 방식을 취한다. 즉, 구현을 시작하기 전에 앞으로 벌어질 모든 사항을 설계하는 기법인데, 소프트웨어 개발은 BDUF방식이 매우 해롭다 (EJB가 왜 망했는지, Spring Framework가 왜 흥할수밖에 없었는지 생각해보면 알듯하다.)</li></ul><h2 id="의사-결정을-최적화-하라"><a href="#의사-결정을-최적화-하라" class="headerlink" title="의사 결정을 최적화 하라"></a>의사 결정을 최적화 하라</h2><blockquote><p>관심사를 모듈로 분리한 POJO시스템은 기민함(게으른)을 제공한다. 이런 기만함 덕택에 최신 정보에 기반해 최선의 시점에 최적의 결정을 내리기가 쉬워진다. 또한 결정의 복잡성도 줄어든다.  </p></blockquote><h2 id="명백한-가치가-있을때-표준을-현명하게-사용하라"><a href="#명백한-가치가-있을때-표준을-현명하게-사용하라" class="headerlink" title="명백한 가치가 있을때 표준을 현명하게 사용하라"></a>명백한 가치가 있을때 표준을 현명하게 사용하라</h2><blockquote><p>표준을 사용하면 아이디어와 컴포넌트를 재사용하기 쉽고, 적절한 경험을 가진 사람을 구하기 쉬우며, 좋은 아이디어를 캡슐화하기 쉽고, 컴포넌트를 엮기 쉽다. 하지만 때로는 표준을 만드는 시간이 너무 오래 걸려 업계가 기다리지 못한다. 어떤 표준은 원래 표준을 제정한 목적을 잊어버리기도 한다.</p></blockquote><ul><li>EJB2는 단지 표준이라는 이유만으로 아주 많은 팀이 사용했음. 심지어 가벼운 프로젝트도 EJB2를 채택함. 하지만 EJB2의 무거운 시스템 과 오버엔지니어링된 시스템을 아주 과장되게 포장된 표준에 집착하는 바람에 고객 가치가 뒷전으로 밀려난 사례가 많았음.</li></ul><h2 id="시스템은-도메인-특화-언어가-필요하다-DSL"><a href="#시스템은-도메인-특화-언어가-필요하다-DSL" class="headerlink" title="시스템은 도메인 특화 언어가 필요하다. (DSL)"></a>시스템은 도메인 특화 언어가 필요하다. (DSL)</h2><ul><li>DSL은 간단한 스크립트 언어나 표준 언어로 구현한 API를 가리킨다. DSL코드로 짠 코드는 도메인 전문가가 작성한 구조적인 산문처럼 읽힌다. </li><li>좋은 DSL은 도메인 개념과 그 개념을 구현한 코드사이에 존재하는 의사소통 간극을 줄여준다. (애자일 기법이 팀과 프로젝트 이해관계자 사이에 의사소통 간극을 줄여줌.)</li><li>효과적으로 DSL을 활용하면 추상화 수준을 코드 관용구나 디자인 패턴 이상으로 끌어올릴수있음. 그래서 개발자가 적절한 추상화 수준에서 코드 의도를 표현 가능함. </li></ul><blockquote><p>DSL을 사용하면 고차원 정책에서 저차원 세부사항까지 모든 추상화 수준과 모든 도메인을 POJO로 표현가능함. </p></blockquote><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>깨끗하지 못한 아키텍처는 도메인 논리를 흐리며 기민성을 떨어뜨린다. (제품품질 저하, 버그유발상승)</li><li>모든 추상화 단계에서 의도는 명확히 표현해야함. 그러려면 POJO를 작성하고 관점 혹은 관점과 유사한 매커니즘을 사용해 각 구현 관심사를 분리해야함.(AOP)</li><li>시스템을 설계하든 개별 모듈을 설계하든, 실제로 돌아가는 가장 단순한 수단을 사용해야 한다는 사실을 명심. (EJB -&gt; Spring framework, JPA)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;시스템&quot;&gt;&lt;a href=&quot;#시스템&quot; class=&quot;headerlink&quot; title=&quot;시스템&quot;&gt;&lt;/a&gt;시스템&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;복잡성은 죽음이다. 개발자에게서 생기를 앗아가며, 제품을 계획하고 제작하고 테스트하기 어렵게 만든</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="시스템" scheme="https://codexdawn.github.io/categories/%EC%8B%9C%EC%8A%A4%ED%85%9C/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-9</title>
    <link href="https://codexdawn.github.io/2021/02/16/clean-code-9/"/>
    <id>https://codexdawn.github.io/2021/02/16/clean-code-9/</id>
    <published>2021-02-16T09:34:14.000Z</published>
    <updated>2021-02-16T12:53:47.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="클래스"><a href="#클래스" class="headerlink" title="클래스"></a>클래스</h1><h2 id="클래스-체계"><a href="#클래스-체계" class="headerlink" title="클래스 체계"></a>클래스 체계</h2><ul><li>클래스 내부 체계 순서 </li></ul><ol><li><p>변수 목록<br>public static final -&gt; private static final -&gt; 인스턴스 변수 </p></li><li><p>공개함수 </p></li><li><p>비공개 함수 </p></li></ol><ul><li>3장 함수에서 익혔듯이, 비공개 함수는 자신을 호출하는 공개 함수 직후에 넣는다. 즉, 추상화 단계가 순차적으로 내려감 (신문기사 처럼 작성)</li></ul><h3 id="캡슐화"><a href="#캡슐화" class="headerlink" title="캡슐화"></a>캡슐화</h3><ul><li>변수와 유틸리티 함수는 가능한 공개하지 않는 편이 좋음 (그렇다고 반드시 숨겨야하는 법칙은 없음.)</li><li>테스트를 하려면 접근제한자가 protected 혹은 public으로 해야한다. 하지만 가급적이면 비공개 상태를 유지하는 방법에 최선을 다해야함. </li><li>캡슐화를 풀어주는 결정은 언제나 최후의 보루라는 마음가짐자세가 필요. </li></ul><h2 id="클래스는-작아야-한다"><a href="#클래스는-작아야-한다" class="headerlink" title="클래스는 작아야 한다!"></a>클래스는 작아야 한다!</h2><ul><li>클래스를 만들때 첫번째 규칙은 크기다. 클래스는 작아야한다! 최대한 작아야한다! </li><li>함수는 물리적인 행 수로 크기를 측정했다면, 클래스는 맡은 책임을 카운트한다. (RDD)</li><li>클래스 이름은 해당 클래스 책임을 기술해야함. 실제로 작명은 클래스 크기를 줄이는 첫번째 관문! (EX&gt; Processor, Manager, Super 등과 같은 단어가 클래스명에 있다면 여러 책임을 떠안고 있다는 증거다.)</li><li>클래스의 설명은 if, and, or, but,~하며 등을 사용하지 않고, 25단어 내외로 설명이 가능해야함. </li></ul><figure class="highlight java"><figcaption><span>충분히 작을까? -기존 70개메서드를 5개로 줄였지만?</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperDashboard</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">MetaDataUser</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Component <span class="title">getLastFocusedComponent</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastFocused</span><span class="params">(Component lastFocused)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMajorVersionNumber</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinorVersionNumber</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBuildNumber</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="단일-책임의-원칙-SRP"><a href="#단일-책임의-원칙-SRP" class="headerlink" title="단일 책임의 원칙 (SRP)"></a>단일 책임의 원칙 (SRP)</h3><ul><li>SRP는 클래스나 모듈을 변경할 이유가 하나! 단 하나뿐이어야 한다는 원칙이다. </li></ul><blockquote><p>Q&gt; SuperDashboard 클래스에서 변경해야할 이유가 두가지인데 그 두가지는 무엇일까? </p><ol><li>소프트웨어 버전 : 버전 정보는 소프트웨어 출시할 때마다 달라짐. </li><li>자바 스윙 컴포넌트를 관리 : 스윙 코드를 변경 할때마다 버전 번호가 달라짐. </li></ol><p>Q&gt; SuperDashboard 클래스를 SRP 원칙을 적용하려면? </p><ol><li>버전 정보를 관리하는 메서드를 Version클래스로 분리한다. </li></ol></blockquote><ul><li>큰 클래스 몇개가 아니라 작은 클래스 여럿으로 이뤄진 시스템이 더 바람직함. 작은 클래스는 각자 맡은 책임이 하나며, 변경할 이유가 하나며, 다른 작은 클래스와 협력해 시스템에 필요한 동작을 수행한다. </li></ul><h3 id="응집도-Cohesion"><a href="#응집도-Cohesion" class="headerlink" title="응집도 (Cohesion)"></a>응집도 (Cohesion)</h3><ul><li>클래스는 인스턴스 변수 수가 작아야 한다. </li></ul><blockquote><p>Q&gt; 응집도가 높은 것은? </p><ol><li>메서드가 변수를 더 많이 사용할수록 메서드와 클래스는 응집도가 더 높다.</li><li>모든 인스턴스 변수를 메서드마다 사용하는 클래스는 응집도가 가장 높다. </li><li>Stack이 응집도가 높은 클래스예시중 하나다. </li></ol></blockquote><ul><li>‘함수를 작게, 매개변수 목록을 짧게!’라는 전략을 따르다보면, 때때로 몇몇 메서드만이 사용하는 인스턴스 변수가 아주 많아진다. 이는 십중팔구 새로운 클래스로 쪼개야 한다는 신호다. </li><li>응집도가 높아질수록 변수와 메서드를 적절히 분리해 새로운 클래스 두세 개로 쪼개준다. </li></ul><h3 id="응집도를-유지하면-작은-클래스-여럿이-나온다"><a href="#응집도를-유지하면-작은-클래스-여럿이-나온다" class="headerlink" title="응집도를 유지하면 작은 클래스 여럿이 나온다"></a>응집도를 유지하면 작은 클래스 여럿이 나온다</h3><ul><li>큰 함수를 작은 메서드 여럿으로 나누기만 해도 클래스 수가 많아진다. </li></ul><blockquote><p>큰 함수를 작은 메서드 여럿으로 나누면 어떻게 될까? </p><ol><li>큰함수를 작은 메서드로 쪼갠다. </li><li>쪼갰더니 빼내려는 코드가 큰함수에 정의된 변수 넷을 사용한다.</li><li>그렇다면 변수 4개를 새 함수에 인수로 넘겨야할까? NO! </li><li>4개의 변수를 인스턴스 변수로 승격 시킨다면 새 함수는 인수가 필요 없게됨. 그만큼 함수를 쪼개기 쉬워진다. </li><li>위와 같이 쪼개고, 인스턴스변수로 승격시키면 응집력을 잃어버리게 된다. (몇몇 함수만 사용하는 인스턴스 변수가 점점 더 늘기 때문)</li><li>하지만!!! 몇몇 함수가 몇몇 변수만 사용한다면 독자적인 클래스로 분리해도 되지 않을까? YES!</li><li>클래스가 응집력을 잃는다면 클래스를 쪼개라!!!</li></ol></blockquote><ul><li>응집도 높은클래스로 만들기 위해서는 잘 쪼개야 하는데, 쪼개면서 테스트 슈트를 작성해 수없이 테스트해서 나누는 방법이 필요. </li></ul><h2 id="변경하기-쉬운-클래스"><a href="#변경하기-쉬운-클래스" class="headerlink" title="변경하기 쉬운 클래스"></a>변경하기 쉬운 클래스</h2><ul><li>대다수 시스템은 지속적인 변경이 가해진다. 그리고 뭔가 변경할때마다 시스템이 의도대로 동작하지 않을 위험이 따른다. </li><li>깨끗한 시스템은 클래스를 체계적으로 정리해 변경에 수반하는 위험을 낮춘다. </li></ul><figure class="highlight java"><figcaption><span>변경이 필요해 손대야 하는 클래스</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sql</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sql</span><span class="params">(String table, Column[] columns)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">insert</span><span class="params">(Object[] fields)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">selectAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">findByKey</span><span class="params">(String keyColumn, String keyValue)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">select</span><span class="params">(Column column, String pattern)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">select</span><span class="params">(Criteria criteria)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">preparedInsert</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">private</span> String <span class="title">columnList</span><span class="params">(Column[] columns)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">private</span> String <span class="title">valuesList</span><span class="params">(Object[] fields, <span class="keyword">final</span> Column[] columns)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">selectWithCriteria</span><span class="params">(String criteria)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">private</span> String <span class="title">placeholderList</span><span class="params">(Column[] columns)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="comment">//출처: https://velog.io/@ybg7955/Clean-Code-10%EC%9E%A5-%ED%81%B4%EB%9E%98%EC%8A%A4</span></span></span><br></pre></td></tr></table></figure><blockquote><p>Q&gt; 위 코드를 손대야하는 2가지 이유!</p><ol><li>새로운 SQL문을 지원하려면 반드시 Sql클래스에 손대야함. </li><li>기존 SQL문 하나를 수정해도 반드시 Sql클래스를 손대야함. </li></ol><p>위 두가지 이유로 SRP를 위반하고 있음.<br>만약에 가까운 장래에 update문을 추가할 필요가 없다면 굳이 손 안대도됨. </p></blockquote><figure class="highlight java"><figcaption><span>닫힌 클래스 집합</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sql</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Sql</span><span class="params">(String table, Column[] columns)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateSql</span> <span class="keyword">extends</span> <span class="title">Sql</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CreateSql</span><span class="params">(String table, Column[] columns)</span> </span></span><br><span class="line"><span class="function">@Override <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class SelectSql extends Sql </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SelectSql</span><span class="params">(String table, Column[] columns)</span> </span></span><br><span class="line"><span class="function">@Override <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class InsertSql extends Sql </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InsertSql</span><span class="params">(String table, Column[] columns, Object[] fields)</span> </span></span><br><span class="line"><span class="function">@Override <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">valuesList</span><span class="params">(Object[] fields, <span class="keyword">final</span> Column[] columns)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class SelectWithCriteriaSql extends Sql </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SelectWithCriteriaSql</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">String table, Column[] columns, Criteria criteria)</span> </span></span><br><span class="line"><span class="function">@Override <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class SelectWithMatchSql extends Sql </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SelectWithMatchSql</span><span class="params">(String table, Column[] columns, Column column, String pattern)</span> </span></span><br><span class="line"><span class="function">@Override <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class FindByKeySql extends Sql <span class="keyword">public</span> <span class="title">FindByKeySql</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">String table, Column[] columns, String keyColumn, String keyValue)</span> </span></span><br><span class="line"><span class="function">@Override <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class PreparedInsertSql extends Sql </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PreparedInsertSql</span><span class="params">(String table, Column[] columns)</span> </span></span><br><span class="line"><span class="function">@Override <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">placeholderList</span><span class="params">(Column[] columns)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class Where </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Where</span><span class="params">(String criteria)</span> <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColumnList</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ColumnList</span><span class="params">(Column[] columns)</span> <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//출처: https://velog.io/@ybg7955/Clean-Code-10%EC%9E%A5-%ED%81%B4%EB%9E%98%EC%8A%A4</span></span><br></pre></td></tr></table></figure><blockquote><p>Q&gt; 기존 Sql클래스를 쪼갠 위 코드는 어떤 장점을 가질까? </p><ol><li>클래스 코드가 극도로 단순함</li><li>함수 하나를 수정했다고 다른 함수가 망가질 위험이 없다,</li><li>테스트 관점에서 모든 논리를 구석구석 증명하기 쉬워졌음. (클래스 분리)</li><li>update문 추가할때 기존 클래스 변경 안해도됨. </li></ol><p>위 코드는 결국 SRP 와 OCP를 잘 준수한 코드가 된다. </p></blockquote><ul><li>새 기능을 수정하거나 기존 기능을 변경할때 건드릴 코드가 최소인 시스템 구조가 바람직하다. 이상적인 시스템이라면 새 기능을 추가할때 시스템을 확장 할 뿐 기존 코드를 변경하지 않는다. </li></ul><h2 id="변경으로부터-격리"><a href="#변경으로부터-격리" class="headerlink" title="변경으로부터 격리"></a>변경으로부터 격리</h2><ul><li>요구사항은 변하기 마련이다. 따라서 코드도 변하기 마련이다. </li><li>변경으로 부터 격리를 시키는 방법은 결합도를 낮춰서 유연성과 재사용성을 높이는 코드로 만들어야한다. </li></ul><blockquote><p>Q&gt; 결합도가 낮다는건 어떤 의미일까?</p><ul><li>각 시스템 요소가 다른 요소로 부터 그리고 변경으로부터 잘 격리되어 있다는 의미</li></ul></blockquote><ul><li>결합도를 낮추면 자연스럽게 SOLID원칙의 DIP를 지킬수있다. (클래스가 상세구현이 아닌 추상화에 의존한다 라는 원칙)</li></ul><figure class="highlight java"><figcaption><span>변경으로부터 격리시킨 예제</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StockExchange</span> </span>&#123; </span><br><span class="line">    <span class="function">Money <span class="title">currentPrice</span><span class="params">(String symbol)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> Portfolio &#123;</span><br><span class="line">    <span class="keyword">private</span> StockExchange exchange;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Portfolio</span><span class="params">(StockExchange exchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exchange = exchange; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PortfolioTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> FixedStockExchangeStub exchange;</span><br><span class="line">    <span class="keyword">private</span> Portfolio portfolio;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        exchange = <span class="keyword">new</span> FixedStockExchangeStub(); </span><br><span class="line">        exchange.fix(<span class="string">&quot;MSFT&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        portfolio = <span class="keyword">new</span> Portfolio(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GivenFiveMSFTTotalShouldBe500</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        portfolio.add(<span class="number">5</span>, <span class="string">&quot;MSFT&quot;</span>);</span><br><span class="line">        Assert.assertEquals(<span class="number">500</span>, portfolio.value()); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//출처: https://data-make.tistory.com/641 [Data Makes Our Future]</span></span><br></pre></td></tr></table></figure><ul><li>Portfolio 클래스는 TokyoStockExchange라는 상세한 구현 클래스가 아니라 StockExchange 인터페이스에 의존한다. 이와 같은 추상화로 실제로 주가를 얻어오는 출처나 얻어오는 방식 등과 같은 구체적인 사실을 모두 숨긴다. (DIP를 잘 활용한 사례)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;클래스&quot;&gt;&lt;a href=&quot;#클래스&quot; class=&quot;headerlink&quot; title=&quot;클래스&quot;&gt;&lt;/a&gt;클래스&lt;/h1&gt;&lt;h2 id=&quot;클래스-체계&quot;&gt;&lt;a href=&quot;#클래스-체계&quot; class=&quot;headerlink&quot; title=&quot;클래스 체계&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="클래스" scheme="https://codexdawn.github.io/categories/%ED%81%B4%EB%9E%98%EC%8A%A4/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-8</title>
    <link href="https://codexdawn.github.io/2021/02/16/clean-code-8/"/>
    <id>https://codexdawn.github.io/2021/02/16/clean-code-8/</id>
    <published>2021-02-16T05:56:17.000Z</published>
    <updated>2021-02-16T08:12:27.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="단위-테스트"><a href="#단위-테스트" class="headerlink" title="단위 테스트"></a>단위 테스트</h1><h2 id="TDD법칙-세-가지"><a href="#TDD법칙-세-가지" class="headerlink" title="TDD법칙 세 가지"></a>TDD법칙 세 가지</h2><blockquote><p><strong>첫째 법칙</strong> : 실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다.<br><strong>둘째 법칙</strong> : 컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다.<br><strong>셋째 법칙</strong> : 현재 실패하는 테스트를 통과할 정도로만 실제코드를 작성한다. </p></blockquote><ul><li>위와 같이 일하면 매일 수 십개, 매달 수 백개, 매년 수천개에 달하는 테스트 케이스가 나온다. (결국 실제 코드를 모두 테스트하는 격이됨.)</li><li>실제 코드와 맞먹을 정도로 방대한 테스트 코드는 심각한 관리 문제를 유발하기도 한다. (그래서 테스트 케이스도 리팩토링 한다는 소리가 여기서 나옴.)</li></ul><h2 id="깨끗한-테스트-코드-유지하기"><a href="#깨끗한-테스트-코드-유지하기" class="headerlink" title="깨끗한 테스트 코드 유지하기"></a>깨끗한 테스트 코드 유지하기</h2><ul><li>실제 코드가 진화하면 테스트코드도 변경해줘야함.</li><li>테스트코드가 지저분할수록 변경하기 어려움. (테스트케이스 추가하는 시간이 실제 코드 짜는 시간보다 더 오래걸림.)</li><li>테스트코드도 실무코드 못지 않게 깨끗하게 잘 관리가 잘되어야함. (주기적인 리팩토링도 고려해야함.) </li></ul><h3 id="테스트는-유연성-유지보수성-재사용성을-제공한다"><a href="#테스트는-유연성-유지보수성-재사용성을-제공한다" class="headerlink" title="테스트는 유연성, 유지보수성, 재사용성을 제공한다."></a>테스트는 유연성, 유지보수성, 재사용성을 제공한다.</h3><ul><li>코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목은 바로 __단위테스트__다. (테스트케이스가 없다면 잠정적 버그이기 때문.)</li></ul><h2 id="깨끗한-테스트-코드"><a href="#깨끗한-테스트-코드" class="headerlink" title="깨끗한 테스트 코드"></a>깨끗한 테스트 코드</h2><ul><li>깨끗한 테스트 코드를 만드려면 무조건 <strong>가독성</strong> 이다. </li><li><a href="http://fitnesse.org/FitNesse.FullReferenceGuide.UserGuide.WritingAcceptanceTests.AcceptanceTestPatterns.BuildOperateCheck">BUILD-OPERATE-CHECK</a> 테스트 구조에 적합함.(Build : 테스트 자료를 만들고 Operate : 테스트 자료를 조작하고 Check : 잘되는지 확인)</li></ul><h3 id="도메인에-특화된-테스트-언어"><a href="#도메인에-특화된-테스트-언어" class="headerlink" title="도메인에 특화된 테스트 언어"></a>도메인에 특화된 테스트 언어</h3><ul><li>도메인에 특화된 언어 (DSL) 로 구현하여 테스트코드를 깔끔하게 유지하는게 중요. <blockquote><p><a href="https://www.jetbrains.com/ko-kr/mps/concepts/domain-specific-languages/">DSL</a>?<br>도메인 특화 언어는 관련 특정 분야에 최적화된 프로그래밍 언어입니다. DSL은 해당 분야 또는 도메인의 개념과 규칙을 사용합니다.<br>(EX&gt; SQL)</p></blockquote></li><li>DSL로 구현함에 목적은 흔히 쓰는 시스템 조작 API (저자기준으로 assertEquals)를 사용하는 대신, 함수와 유틸리티를 구현한 후 그 함수와 유틸리티를 사용하므로 테스트 코드를 짜기도 읽기도 쉬워짐.(저자기준 assertResponseIsXML,assertResponseContains)</li></ul><h3 id="이중-표준"><a href="#이중-표준" class="headerlink" title="이중 표준"></a>이중 표준</h3><ul><li>테스트 코드에 적용하는 표준은 실제 코드에 적용하는 표준과 확실히 다르다. </li><li>단순하고 간결하고 표현력이 풍부해야 하지만, 실제 코드만큼 효율적인 필요는 없다. </li><li>실제코드에 비즈니스로직을 제대로 검증하는 부분이라면, 테스트코드가 실제코드에 매핑할 필요까지는 없다는 이야기. </li></ul><h2 id="테스트당-assert-하나"><a href="#테스트당-assert-하나" class="headerlink" title="테스트당 assert 하나"></a>테스트당 assert 하나</h2><ul><li><p>JUnit 으로 테스트 코드를 짤 때는 함수마다 assert문을 단 하나만 사용해야함. (결론이 하나 이기 때문) </p></li><li><p>TDD에서 given-when-then(mockito,BDD) 법칙을 활용하는게 좋다. (테스트 코드가 일관성 있게 유지됨)</p></li><li><p>given-when-then으로 테스트코드를 짜다보면 중복코드가 많아짐.</p><blockquote><p>Q&gt; given-when-then의 중복코드 해결방법? </p><ol><li>Template Method 패턴(given/when부분을 부모클래스,then을 자식클래스) </li><li>@Before 함수에 given/when의 공통로직을 넣고, @Test함수에 then을 넣는방식 </li></ol></blockquote></li><li><p>무조건 1함수-1assert를 지킬 의무는 없지만, 가급적 지켜달라는 소리다. 필요할때는 과감하게 여러 assert도 활용할수도 있어야함. </p></li></ul><h3 id="테스트당-개념-하나"><a href="#테스트당-개념-하나" class="headerlink" title="테스트당 개념 하나"></a>테스트당 개념 하나</h3><ul><li>테스트 함수마다 한 개념만 테스트 하라. </li><li>3장 함수에서 설명했듯, 함수내에 가급적 하나의 기능만 넣도록 가이드한다. 테스트 함수도 마찬가지다! (결국 여러개의 개념이 들어갔다는건 함수가 여러 기능을 한다는 증거)</li></ul><h2 id="F-I-R-S-T"><a href="#F-I-R-S-T" class="headerlink" title="F.I.R.S.T"></a>F.I.R.S.T</h2><ul><li>Fast : 테스트는 빨라야 한다. (테스트 로직이 느려지지 않도록 성능이슈를 늘 고민해야함.)</li><li>Independent : 각 테스트는 서로 의존하면 안됨. (각 테스트는 독립적으로 그리고 어떤 순서로 실행해도 괜찮아야함.)</li><li>Repeatable : 테스트는 어떤 환경에서도 반복 가능해야함. (지속적으로 테스트가 클래스 내에 전체테스트가 돌수 있어야함.)</li><li>Self-Validating : 테스트는 Bool값으로 결과를 내야함. (성공이냐 실패냐로 판가름)</li><li>Timely : 테스트는 적시에 작성해야함. (단위 테스트는 테스트하려는 실제 코드를 구현하기 직전에 구현 해아함.)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;단위-테스트&quot;&gt;&lt;a href=&quot;#단위-테스트&quot; class=&quot;headerlink&quot; title=&quot;단위 테스트&quot;&gt;&lt;/a&gt;단위 테스트&lt;/h1&gt;&lt;h2 id=&quot;TDD법칙-세-가지&quot;&gt;&lt;a href=&quot;#TDD법칙-세-가지&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="단위 테스트" scheme="https://codexdawn.github.io/categories/%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-7</title>
    <link href="https://codexdawn.github.io/2021/02/15/clean-code-7/"/>
    <id>https://codexdawn.github.io/2021/02/15/clean-code-7/</id>
    <published>2021-02-15T13:08:46.000Z</published>
    <updated>2021-02-15T15:45:32.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="경계"><a href="#경계" class="headerlink" title="경계"></a>경계</h1><h2 id="외부-코드-사용하기"><a href="#외부-코드-사용하기" class="headerlink" title="외부 코드 사용하기"></a>외부 코드 사용하기</h2><ul><li>java.util.Map이 제공하는 기능성과 유연성은 확실히 유용하지만, 그만큼 위험도 크다. (ex&gt; clear(), 제네릭스가 없는 Map객체 -&gt; 사용자가 맘만 먹으면 어떤 객체 유형도 추가 가능)</li></ul><figure class="highlight java"><figcaption><span>Map사용 나쁜예1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map sensors = <span class="keyword">new</span> HashMap();</span><br><span class="line">Sensor s = (Sensor) sensors.get(sensorId); </span><br></pre></td></tr></table></figure><ul><li>위 코드는 Map이 반환하는 Object를 올바른 유형으로 변환할 책임은 Map을 사용하는 클라이언트에 있다. (get(sensorId)) </li><li>위 코드는 동작은 하지만, 깨끗한 코드라고 보기 어렵고, 의도도 분명히 드러나지 않는다. </li></ul><figure class="highlight java"><figcaption><span>Map사용 나쁜예2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Sensor&gt; sensors = <span class="keyword">new</span> HashMap&lt;Sensor&gt;();</span><br><span class="line">Sensor s = sensors.get(sensorId); </span><br></pre></td></tr></table></figure><ul><li>위 코드는 ‘나쁜예1’ 코드의 제네릭스로 조금 개선하여 코드 가독성을 높였지만, “Map&lt;String,Sensor&gt; 가 사용자에게 필요하지 않은 기능까지 제공한다” 라는 부분은 해결하지 못했다. </li></ul><figure class="highlight java"><figcaption><span>Map사용 개선예</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sensors</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Map sensors = <span class="keyword">new</span> HashMap(); </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Sensor <span class="title">getById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Sensor) sensors.get(id); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위 코드는 경계 인터페이스인 Map을 Sensors 안으로 숨겼다. (캡슐화) 따라서 Map 인터페이스가 변하더라도 나머지 프로그램에는 영향이 없음. </li><li>제네릭스 사용하든 안하든 문제없음.</li><li>Sensors 클래스는 프로그램에 필요한 인터페이스만 제공 (코드는 이해도 증가, 오용하기 어려움)</li><li>Sensors 클래스는 설계 규칙과 비즈니스 규칙을 따르도록 강제할수있음.(인터페이스)</li><li>저자는 Map과 같은 경계 인터페이스를 무조건 캡슐화 하라는것이 아니라, Map가지고 이용하는 클래스나 클래스 계열 밖으로 노출되지 않도록 주의해야함. </li></ul><h2 id="경계-살피고-익히기"><a href="#경계-살피고-익히기" class="headerlink" title="경계 살피고 익히기"></a>경계 살피고 익히기</h2><ul><li>외부에서 가져온 라이브러리 혹은 패키지를 사용하고 싶다면, 곧바로 우리쪽 코드를 작성해 외부 코드를 호출하는 대신 먼저 간단한 테스트 케이스를 작성해 외부코드를 익히면 그나마 수월하다고 함. (학습 테스트)</li></ul><h2 id="log4j-익히기"><a href="#log4j-익히기" class="headerlink" title="log4j 익히기"></a>log4j 익히기</h2><ul><li>‘경계 살피고 익히기’ 에서 소개한 ‘학습 테스트’를 log4j를 익히는 과정으로 ‘학습 테스트’를 설명하는 구간이다. </li><li>log.info를 띄우는 방법을 차근차근 단위 테스트를 하면서, 사용법을 익히고 어느정도 숙달이 되면, 캡슐화를 통해 log4j라는 경계 인터페이스를 몰라도 되도록 만들면, 학습 테스트를 통해 경계 인터페이스를 잘 사용할수 있음. </li></ul><h2 id="학습-테스트는-공짜-이상이다"><a href="#학습-테스트는-공짜-이상이다" class="headerlink" title="학습 테스트는 공짜 이상이다"></a>학습 테스트는 공짜 이상이다</h2><ul><li>학습 테스트는 비용이 없다. (API를 사용하려면 배워야하기 때문)</li><li>투자하는 노력보다 얻는 성과가 크다. 패키지 새 버전이 나오면 학습 테스트를 돌려 차이가 있는지 확인 한다. </li><li>학습테스트는 패키지가 예상대로 도는지 검증함. </li><li>새 버전이 우리 코드와 호환되지않으면 학습 테스트가 이 사실을 곧바로 밝혀냄 </li><li>학습테스트로 단위 테스트를 짤때, 실제 코드와 동일한 방식으로 인터페이스를 사용하는 테스트 케이스가 필요함. </li></ul><h2 id="아직-존재하지-않는-코드를-사용하기"><a href="#아직-존재하지-않는-코드를-사용하기" class="headerlink" title="아직 존재하지 않는 코드를 사용하기"></a>아직 존재하지 않는 코드를 사용하기</h2><ul><li>경계와 관련해 또 다른 유형은 아는 코드와 모르는 코드를 분리하는 경계다. </li><li>저자의 예제인 Transmitter는 Transmitter의 외부 라이브러리에 대한 지식이 전혀 없는 상태에서 차근차근 적용하는 과정을 설명한 부분이다. </li></ul><p><img src="https://nesoy.github.io/assets/posts/20180207/adapterPattern.png" alt="송신기 예측하기"></p><ol><li>자체적인 인터페이스 정의인 Transmitter 인터페이스를 만들어서, 실제로 개발해야하는 transmit 메서드를 정의함. (transmit는 주파수와 스트림을 입력으로 받음) -&gt; 인터페이스를 구현하면 전적으로 개발자가 통제한다는 장점이 생김. (가독성 증가)</li><li>CommunicationController를 통해 사용될 로직만 정의함. </li><li>상대팀이 송신기 API를 정의한후에, TransmitterAdoptor를 구현해 사용할 API를 캡슐화하여 API가 바뀔때 수정할 코드를 한곳으로 몰아넣음.</li><li>FakeTransmitter클래스를 사용하여 실제 데이터가 없이도 Mock데이터로 기능구현 가능하도록 하였음.</li><li>Transmitter API 인터페이스가 나온다음 경계 테스트 케이스를 생성해 API를 올바로 사용하는지 테스트 할 수 있음. </li></ol><h2 id="깨끗한-경계"><a href="#깨끗한-경계" class="headerlink" title="깨끗한 경계"></a>깨끗한 경계</h2><ul><li>소프트웨어 설계가 우수하다면 변경하는데 많은 투자와 재작업이 필요없다. </li><li>경계에 위치하는 코드는 깔끔히 분리한다. 또한 기대치를 정의하는 테스트 케이스도 작성한다. </li><li>이쪽 코드에서 외부 패키지를 세세하게 알아야 할 필요없음. 통제가 불가능한 외부 패키지를 의존하지말고, 인터페이스로 분리해서 독자적인 패키지를 만들자.</li><li>외부 패키지를 호출하는 코드를 가능한 줄여 경계를 관리하자. 예시로본 Map처럼 새로운 클래스로 경계를 감싸거나(캡슐화) Adaptor패턴을 이용해 우리가 원하는 인터페이스를 패키지가 제공하는 인터페이스로 변환하자. </li></ul><h2 id="Adaptor패턴"><a href="#Adaptor패턴" class="headerlink" title="Adaptor패턴"></a>Adaptor패턴</h2><ul><li>Wrapper패턴으로 불리기도함. </li><li>일반상품을 예쁜 포장지로 싸서 선물용 상품으로 만드는것 결국 무엇인가를 포장해 다른 용도로 사용할 수 있게 교환해 주는것이 wrapper이며 adaptor이다. </li></ul><ol><li>상속 (inheritant)</li></ol><ul><li>Print &lt;– PrintBanner -&gt; Banner </li></ul><ol start="2"><li>위임 (delegation)</li></ol><ul><li>Print &lt;- PrintBanner &lt;&gt;-&gt; Banner</li><li>delegation(위임)은 제어를 외부 컴포넌트를 통해 맡기는 부분. (DI와 유사함. IoC)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;경계&quot;&gt;&lt;a href=&quot;#경계&quot; class=&quot;headerlink&quot; title=&quot;경계&quot;&gt;&lt;/a&gt;경계&lt;/h1&gt;&lt;h2 id=&quot;외부-코드-사용하기&quot;&gt;&lt;a href=&quot;#외부-코드-사용하기&quot; class=&quot;headerlink&quot; title=&quot;외부 코드</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="경계" scheme="https://codexdawn.github.io/categories/%EA%B2%BD%EA%B3%84/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-6</title>
    <link href="https://codexdawn.github.io/2021/02/09/clean-code-6/"/>
    <id>https://codexdawn.github.io/2021/02/09/clean-code-6/</id>
    <published>2021-02-09T10:24:13.000Z</published>
    <updated>2021-02-09T11:57:01.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="오류처리"><a href="#오류처리" class="headerlink" title="오류처리"></a>오류처리</h1><blockquote><p>뭔가 잘못될 가능성은 늘 존재한다. 뭔가 잘못되면 바로 잡을 책임은 바로 우리 프로그래머에 있다. </p></blockquote><h2 id="예외코드보다-예외를-사용하라"><a href="#예외코드보다-예외를-사용하라" class="headerlink" title="예외코드보다 예외를 사용하라"></a>예외코드보다 예외를 사용하라</h2><ul><li>예외가 지원되지 않았을 시절에는 오류코드로 예외처리를 사용하였다. </li><li>근래 언어들이 예외처리가 지원되면서, 오류가 발생하면 예외로 던지는걸 추천하고있음. </li><li>함수 호출 즉시 오류를 확인해야하기 때문에 예외처리를 하는것을 권장 </li></ul><h2 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h2><ul><li>코드를 작성할때 시작을 강제로 예외를 일으키는 테스트 케이스를 작성후 테스트를 통과하게 코드를 작성하는 방법을 권장 그러면 자연스럽게 try 블록의 트랜잭션 뻠위부터 구현하게 되므로 범위 내에서 트랜잭션 본질을 유지하기 쉽다. </li></ul><h2 id="미확인-unchecked-예외를-사용하라"><a href="#미확인-unchecked-예외를-사용하라" class="headerlink" title="미확인(unchecked) 예외를 사용하라"></a>미확인(unchecked) 예외를 사용하라</h2><ul><li><p>checked 예외는 OCP를 위반한다. 메서드에서 확인된 예외를 던졌는데 catch 블록이 세 단계 위에 있다면 그 사이 메서드 모두가 선언부에 해당 예외를 정의해야한다. 즉, 하위 단계에서 코드를 변경하면 상위 단계 메서드 선언부를 전부 고쳐야 한다는 말이다. 모듈과 관련된 코드가 전혀 바뀌지 않았더라도 (선언부가 바뀌었으므로) 모듈을 다시 빌드한 다음 배포해야 한다는 말이다. </p></li><li><p>checked 예외는 사용하는 모든 함수를 강제적으로 예외를 처리하게 하기때문에, 캡슐화가 깨진다. 그렇다고 checked예외가 무조건 나쁜건 아니다. (중요한 라이브러리를 개발한다면 모든 예외를 강제 해야한다.)</p></li></ul><h2 id="예외에-의미를-제공하라"><a href="#예외에-의미를-제공하라" class="headerlink" title="예외에 의미를 제공하라"></a>예외에 의미를 제공하라</h2><ul><li>printStackTrace정보를 던지는것 보다 타 개발자가 직관적으로 알수 있도록 의미있는 문구로 예외처리 하도록 하자.</li><li>예외를 잡을때 로그랑 같이 잡아서 좀 더 디테일한 예외상황에 대해서 알면 더 좋을듯하다. </li></ul><h2 id="호출자를-고려해-예외-클래스를-정의하라"><a href="#호출자를-고려해-예외-클래스를-정의하라" class="headerlink" title="호출자를 고려해 예외 클래스를 정의하라"></a>호출자를 고려해 예외 클래스를 정의하라</h2><ul><li>외부라이브러리의 API를 활용할때는 Wrapper클래스로 감싸서 모듈화 하는 방식 (Component로 빼는방식도 좋겠다.) 을 고려하자. </li><li>Wrapper클래스로 감싼 클래스를 가지고 그 라이브러리의 예외를 잡을 RuntimeException을 새로 정의해서 2-3 종류 이상 예외가 발생하는 라이브러리의 예외 의존도를 낮추도록 하게 하자.  </li></ul><h2 id="정상-흐름을-정의하라"><a href="#정상-흐름을-정의하라" class="headerlink" title="정상 흐름을 정의하라"></a>정상 흐름을 정의하라</h2><ul><li>try-catch를 논리코드를 작성하는 부분은 하지 말자. 예외는 예외 답게 처리하자.(가끔 if-else문처럼 사용하는 경우가 있음.그건 하지 말자.) </li><li>만약에 예외적인처리에서 뭔가 다른 액션을 처리해야한다면, 예외가 발생하는 로직을 분리해서 새로운 객체에 반환할 수 있도록 로직을 수정하는 사례가 있다. (특수사례 패턴 (Special Case Pattern) 참고 )</li></ul><h2 id="null을-반환하지-마라"><a href="#null을-반환하지-마라" class="headerlink" title="null을 반환하지 마라"></a>null을 반환하지 마라</h2><ul><li>보통 개발하다보면, claimInfo != null 혹은 ObjectUtils.isEmpty(claimInfo) 처럼 null 객체를 체크하는 경우가 자주 있다. 사실 NullPointerException이 유발될까바 저렇게 체크하는건데, 호출하는 메서드에서 null자체를 반환하지 않도록 만들라고 추천한다. (예외적인 상황이 발생했을때 빈객체 혹은 Collections.emptyList같은 객체로 말이다.)</li></ul><h2 id="null을-전달하지-마라"><a href="#null을-전달하지-마라" class="headerlink" title="null을 전달하지 마라"></a>null을 전달하지 마라</h2><ul><li>메서드에서 null을 반환하는것 보다 메서드로 Null을 전달하는건 더 나쁨.</li><li>파라미터단에 null이 들어오는걸 방지하려면, 여러가지가 있지만 저자는 assert를 활용해서 체크하는 방식을 추천</li><li>assert말고 Objects.requireNonNull로도 확인하기도함. 더러 Optional을 가지고 체크하기도하지만, 이부분은 비용이 많이 나가서 비추. </li><li>대다수 프로그래밍 언어는 호출자가 실수로 넘기는 Null을 적절히 처리하는 방법이없다. 그렇다면 애초에 null을 넘기지 못하도록 금지하는 정책이 합리적이다. 즉, 인수로 null이 넘어온다는 자체가 문제라는 말이다. </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;오류처리&quot;&gt;&lt;a href=&quot;#오류처리&quot; class=&quot;headerlink&quot; title=&quot;오류처리&quot;&gt;&lt;/a&gt;오류처리&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;뭔가 잘못될 가능성은 늘 존재한다. 뭔가 잘못되면 바로 잡을 책임은 바로 우리 프로그래머에</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="오류처리" scheme="https://codexdawn.github.io/categories/%EC%98%A4%EB%A5%98%EC%B2%98%EB%A6%AC/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-5</title>
    <link href="https://codexdawn.github.io/2021/02/08/clean-code-5/"/>
    <id>https://codexdawn.github.io/2021/02/08/clean-code-5/</id>
    <published>2021-02-08T11:10:39.000Z</published>
    <updated>2021-02-08T14:18:51.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="객체와-자료구조"><a href="#객체와-자료구조" class="headerlink" title="객체와 자료구조"></a>객체와 자료구조</h1><blockquote><p>변수를 비공개로 정의하는 이유가 있다. 남들이 변수에 의존하지 않게 만들고 싶어서다. </p></blockquote><h2 id="자료-추상화"><a href="#자료-추상화" class="headerlink" title="자료 추상화"></a>자료 추상화</h2><figure class="highlight java"><figcaption><span>6-1. 구체적인 Point클래스</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> x; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> y; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>6-2. 추상적인 Point클래스</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getY</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">setCartesian</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getR</span><span class="params">()</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getTheta</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPolar</span><span class="params">(<span class="keyword">double</span> r, <span class="keyword">double</span> theta)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-1-VS-6-2-코드의-승자는"><a href="#1-6-1-VS-6-2-코드의-승자는" class="headerlink" title="1. 6-1 VS 6-2 코드의 승자는?"></a>1. 6-1 VS 6-2 코드의 승자는?</h3><ul><li>6-1은 개별적으로 좌표값을 읽고 설정하게 강제함. </li><li>6-1은 구현ㅇ르 노출한다. 설사, private으로 변수를 선언해도, 각 값마다 getter/setter 함수를 제공한다면 구현을 외부로 노출하는 셈이다. </li><li>6-2는 자료 구조 이상을 표현한다. 클레스 메서드 마다 접근 정책을 강제한다. (무조건 구현하도록)</li><li>6-2는 좌표를 읽을 때는 각 값을 개별적으로 읽어야 한다. 하지만 좌표를 설정할 때는 두 값을 한번에 설정해야 한다. </li></ul><p>위 두코드의 승자는 6-2! 이유는 변수 사이에 함수라는 계층을 넣는다고, 구현이 저절로 감춰지지는 않는다. 구현을 감추려면 추상화가 필수다! 그저 형식에 치우쳐 getter/setter함수로 변수를 다룬다고 클래스가 되는게 아니다. 그보다는 추상 인터페이스를 제공해 사용자가 구현을 모른 채 자료의 핵심을 조작할 수 있어야 진정한 의미의 클래스다! </p><figure class="highlight java"><figcaption><span>6-3. 구체적인 Vehicle 클래스</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getFuelTankCapacityInGallons</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getGallonsOfGasoline</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>6-4. 추상적인 Vihicle클래스</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Vihicle</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getPercentFuelRemaining</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-3-VS-6-4-코드의-승자는"><a href="#2-6-3-VS-6-4-코드의-승자는" class="headerlink" title="2. 6-3 VS 6-4 코드의 승자는?"></a>2. 6-3 VS 6-4 코드의 승자는?</h3><ul><li>6-3은 자동차 연료 상태를 구체적인 숫자 값으로 알려준다. </li><li>6-4는 자동차 연료 상태를 백분율이라는 추상적인 개념으로 알려준다. </li><li>6-3은 두 함수가 변수값을 읽어 반환할 뿐이라는 사실이 거의 확실함. </li><li>6-4는 정보가 어디서 오는지 전혀 드러나지 않는다. </li></ul><p>위 두 코드의 승자는? 6-4! 그 이유는 자룔르 세세하게 공개하기 보다 추상적인 개념으로 표현하는 편이 더 좋다. 인터페이스나 getter/setter 함수 만으로 추상화가 이뤄지지 않는다. 개발자는 객체가 포함하는 자료를 표현할 가장 좋은ㅇ 방법을 심각하게 고민해야한다! </p><h2 id="자료-객체-비대칭"><a href="#자료-객체-비대칭" class="headerlink" title="자료/객체 비대칭"></a>자료/객체 비대칭</h2><figure class="highlight java"><figcaption><span>6-5. 절차적인 도형 (절차지향)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> Point topLeft; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> side; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> Point topLeft; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> height; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> width; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> Point center; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> radius; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Geomatry</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">(Object shape)</span> <span class="keyword">throws</span> NoSuchShapeException </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(shape <span class="keyword">instanceof</span> Square) &#123;</span><br><span class="line">Square s = (Square) shape; </span><br><span class="line"><span class="keyword">return</span> s.side * s.side; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape <span class="keyword">instanceof</span> Rectangle) &#123;</span><br><span class="line">Rectangle r = (Rectangle) shape; </span><br><span class="line"><span class="keyword">return</span> r.height * r.width; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape <span class="keyword">instanceof</span> Circle) &#123;</span><br><span class="line">Circle c = (Circle) shape; </span><br><span class="line"><span class="keyword">return</span> PI * c.radius * c.radius; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NoSuchShapeException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>6-6. 다형적인 도형 (객체지향)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Point topLeft; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> side; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> side * side; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Point topLeft;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> height; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> width; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> height * width; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Point center; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> radius; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> PI * radius * radius; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5-VS-6-6-코드의-승자는"><a href="#6-5-VS-6-6-코드의-승자는" class="headerlink" title="6-5 VS 6-6 코드의 승자는?"></a>6-5 VS 6-6 코드의 승자는?</h3><ul><li>6-5는 Geomatry 클래스 내부에 함수를 자유롭게 추가 할수 있다. </li><li>6-5는 새 도형이 추가된다면 Geomatry클래스 내부에 있는 함수들을 모두 수정해줘야 할수도 있다. </li><li>6-6은 6-5처럼 굳이 Geomatry클래스가 필요없고, 새 도형을 추가해도 기존 함수에 아무런 영향을 주지 않는다. </li><li>6-6은 새 함수를 추가하면 모든 도형 클래스에 (Shape 인터페이스에 속한) 새 함수를 강제적으로 넣어줘야함.</li></ul><p>위 두 코드의 승자는? 결론은 무승부! </p><ul><li>절차적인 코드는 기존 자료구조를 변경하지 않으면서 새 함수를 추가하기 쉽다. 반면, 객체 지향 코드는 기존 함수를 변경하지 않으면서 새 클래스를 추가하기 쉽다. </li><li>절차적인 코드는 새로운 자료 구조를 추가하기 어렵다. 그러려면 모든 함수를 고쳐야한다. 객체 지향 코드는 새로운 함수를 추가하기 어렵다. 그러려면 모든 클래스를 고쳐야한다. </li></ul><p>다시말해, 객체 지향 코드에서 어려운 변경은 절차적인 코드에서 쉬우며, 절차적인 코드에서 어려운 변경은 객체 지향 코드에서 쉽다!<br>복잡한 시스템을 짜다보면 새로운 함수가 아니라 새로운 자료 타입이 필요한 경우가 생긴다. 이때는 클래스 와 객체 지향 코드에서 쉽다!<br>반면, 새로운 자료 타입이 아니라 새로운 함수가 필요한 경우도 생긴다. 이때는 절차적인 코드와 자료구조가 좀 더 적합함! </p><h2 id="디미터-법칙"><a href="#디미터-법칙" class="headerlink" title="디미터 법칙"></a>디미터 법칙</h2><p>디미터 법칙은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙이다. 즉, 객체는 자료를 숨기고 함수를 공개한다.<br>디미터 법칙은 “클래스 C의 메서드 f는 다음과 같은 객체의 메서드만 호출해야한다.”</p><ul><li>클래스 C</li><li>f가 생성한 객체 </li><li>f 인수로 넘어온 객체 </li><li>C 인스턴스 변수에 저장된 객체 </li></ul><p>디미터 법칙을 해하는 가장 대표적인 예는 메서드 체이닝을 활용하는 부분 (모든 메서드 체이닝이 문제가 아니라는 것이 중요!) 이라 할수있다. </p><figure class="highlight java"><figcaption><span>디미터 법칙을 어긴 예</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath(); </span><br></pre></td></tr></table></figure><h3 id="기차-충돌"><a href="#기차-충돌" class="headerlink" title="기차 충돌"></a>기차 충돌</h3><p>위와 같은 코드를 기차 충돌이라고 한다. 위와 같은 코드는 차라리 아래와 같이 나누는편이 좋다. </p><figure class="highlight java"><figcaption><span>디미터 법칙을 어긴 예</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Option opts = ctxt.getOptions();</span><br><span class="line">File scrachDir = opts.getScratchDir();</span><br><span class="line"><span class="keyword">final</span> String outputDir = scratchDir.getAbsolutePath(); </span><br></pre></td></tr></table></figure><p>위 예제 역시 디미터 법칙을 해하는 요소이긴하다. 왜냐하면 ctxt객체가 Options를 포함하고, Options는 ScratchDir을 포함하고, ScartchDir은 AbsolutePath를 포함한다는 사실을 안다. 즉, 함수하나가 아는 지식이 방대하다. 위 코드를 사용하는 함수는 많은 객체를 탐색할 줄 안다는 말이다.<br>위 두 예제코드를 아래 코드처럼 구현했다면 디미터 법칙이 거론되지 않았을것이다. </p><figure class="highlight java"><figcaption><span>디미터 법칙을 어긴 예</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String outputDir = ctxt.options.scartchDir.absouletePath;  </span><br></pre></td></tr></table></figure><p>객체라면 내부 구조를 숨겨야 하므로 확실히 디미터 법칙을 위반한다. 반면, 자료구조라면 당연히 내부 구조를 노출하므로 디미터 법칙이 적용되지 않는다.</p><h3 id="잡종구조"><a href="#잡종구조" class="headerlink" title="잡종구조"></a>잡종구조</h3><p>절반은 객체, 절반은 자료구조인 잡종구조는 되도록 피하는것이 좋다. 프로그래머가 함수나 타입을 보호할지 공개할지 확신하지 못해 어중간하게 내놓은 설계에 불과함. </p><h3 id="구조체-감추기"><a href="#구조체-감추기" class="headerlink" title="구조체 감추기"></a>구조체 감추기</h3><blockquote><p>객체라면 ‘뭔가를 하라고’ 말해야지 속을 드러내라고 말하면 안된다. </p></blockquote><h2 id="자료-전달-객체-DTO"><a href="#자료-전달-객체-DTO" class="headerlink" title="자료 전달 객체 (DTO)"></a>자료 전달 객체 (DTO)</h2><ul><li>DTO는 공개변수만 있고 함수가 없는 클래스다. </li><li>Bean은 private변수를 getter/setter 함수로 조작한다. 일종의 사이비 캡슐화로, 일부 OO순수주의자나 만족시킬뿐 별다른 이익을 제공하지 않는다. </li></ul><h3 id="활성-레코드"><a href="#활성-레코드" class="headerlink" title="활성 레코드"></a>활성 레코드</h3><ul><li>활성 레코드는 DTO의 특수형태다. DTO와 같은 맥락이나, 대개 save나 find와 같은 탐색함수도 제공함. </li><li>활성 레코드는 자료구조로 취급해야함. </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;객체와-자료구조&quot;&gt;&lt;a href=&quot;#객체와-자료구조&quot; class=&quot;headerlink&quot; title=&quot;객체와 자료구조&quot;&gt;&lt;/a&gt;객체와 자료구조&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;변수를 비공개로 정의하는 이유가 있다. 남들이 변수에 의존하지</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="객체와 자료구조" scheme="https://codexdawn.github.io/categories/%EA%B0%9D%EC%B2%B4%EC%99%80-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-4</title>
    <link href="https://codexdawn.github.io/2021/01/27/clean-code-4/"/>
    <id>https://codexdawn.github.io/2021/01/27/clean-code-4/</id>
    <published>2021-01-27T02:27:07.000Z</published>
    <updated>2021-01-27T08:12:23.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="형식-맞추기"><a href="#형식-맞추기" class="headerlink" title="형식 맞추기"></a>형식 맞추기</h1><blockquote><p>프로그래머라면 형식을 깔끔하게 맞춰 코드를 짜야한다. 코드 형식을 맞추기 위한 간단한 규칙을 정하고, 그 규칙을 착실히 따라야한다. 팀으로 일한다면 팀이 합의해 규칙을 정하고, 모두가 그 규칙을 따라야 한다. 필요하다면 규칙을 자동으로 적용하는 도구를 활용한다. </p></blockquote><h2 id="1-형식을-맞추는-목적"><a href="#1-형식을-맞추는-목적" class="headerlink" title="1. 형식을 맞추는 목적"></a>1. 형식을 맞추는 목적</h2><ul><li>원래 코드가 사라질지라도 개발자의 스타일과 규율은 사라지지 않기 때문</li></ul><h2 id="2-적절한-행-길이를-유지하라"><a href="#2-적절한-행-길이를-유지하라" class="headerlink" title="2. 적절한 행 길이를 유지하라"></a>2. 적절한 행 길이를 유지하라</h2><ul><li>커다란 시스템도 코드라인이 500줄을 넘지 않고 200줄 정도 인 파일로 운영되고있음. </li><li>일반적으로 큰파일보다 작은 파일이 이해하기 쉽다. </li></ul><h3 id="2-1-신문기사-처럼-작성하라"><a href="#2-1-신문기사-처럼-작성하라" class="headerlink" title="2-1) 신문기사 처럼 작성하라"></a>2-1) 신문기사 처럼 작성하라</h3><ul><li>이름은 간단하면서도 설명이 가능할 정도로 신경 써서 짓는다.(이름만 보고도 올바른 모듈을 살펴보고있는지 아닌지를 판단할 정도로 신경써서 짓는다.)</li><li>소스 파일 첫부분은 고차원 개념과 알고리즘을 설명한다. 아래로 내려갈수록 의도를 세세하게 묘사한다. 마지막에는 가장 저차원 함수와 세부 내역이 나온다.</li></ul><h3 id="2-2-개념은-빈-행으로-분리하라"><a href="#2-2-개념은-빈-행으로-분리하라" class="headerlink" title="2-2) 개념은 빈 행으로 분리하라"></a>2-2) 개념은 빈 행으로 분리하라</h3><ul><li>빈 행은 새로운 개념을 시작한다는 시각적 단서다.</li></ul><h3 id="2-3-세로-밀집도"><a href="#2-3-세로-밀집도" class="headerlink" title="2-3) 세로 밀집도"></a>2-3) 세로 밀집도</h3><ul><li>줄바꿈이 개념을 분리한다면, 세로 밀집도는 연관성을 의미한다. (즉, 서로 밀집한 코드 행은 세로로 가까이 놓여야 한다는 뜻)</li></ul><h3 id="2-4-수직-거리"><a href="#2-4-수직-거리" class="headerlink" title="2-4) 수직 거리"></a>2-4) 수직 거리</h3><h4 id="2-4-1-변수선언"><a href="#2-4-1-변수선언" class="headerlink" title="2-4-1) 변수선언"></a>2-4-1) 변수선언</h4><ul><li>변수는 사용하는 위치에 최대한 가까이 선언한다. </li></ul><h4 id="2-4-2-인스턴스-변수"><a href="#2-4-2-인스턴스-변수" class="headerlink" title="2-4-2) 인스턴스 변수"></a>2-4-2) 인스턴스 변수</h4><ul><li>인스턴스 변수는 클래스 맨 처음에 선언 (DTO,VO 혹은 DI받은객체등..)</li></ul><h4 id="2-4-3-종속-함수"><a href="#2-4-3-종속-함수" class="headerlink" title="2-4-3) 종속 함수"></a>2-4-3) 종속 함수</h4><ul><li>한 함수가 다른 함수를 호출한다면 두 함수는 세로로 가까이 배치한다. </li><li>또한 가능하다면 호출하는 함수를 호출되는 함수보다 먼저 배치한다. </li></ul><h4 id="2-4-4-개념적-유사성"><a href="#2-4-4-개념적-유사성" class="headerlink" title="2-4-4) 개념적 유사성"></a>2-4-4) 개념적 유사성</h4><ul><li>개념적인 친화도가 높은 코드일수록 가까이 배치하도록 한다. </li></ul><blockquote><p>친화도가 높은 요인은 ? (ex&gt; JUnit 4.3.1 assertTrue,assertFalse override 메서드 구현체들)</p><ul><li>한 함수가 다른 함수를 호출 할때(메서드 종속성)</li><li>변수와 그 변수를 사용하는 메서드 </li></ul></blockquote><h4 id="2-4-5-세로-순서"><a href="#2-4-5-세로-순서" class="headerlink" title="2-4-5) 세로 순서"></a>2-4-5) 세로 순서</h4><ul><li>위에서 설명했듯이 함수 종속성(메서드 종속성)에 의해, 호출 되는 함수를 호출하는 함수보다 나중에 배치한다. </li></ul><h2 id="3-가로-형식-맞추기"><a href="#3-가로-형식-맞추기" class="headerlink" title="3. 가로 형식 맞추기"></a>3. 가로 형식 맞추기</h2><ul><li>가급적 한 행에 120자 이내로 행 길이를 제한 하도록 하자. </li></ul><h3 id="3-1-가로-공백과-밀집도"><a href="#3-1-가로-공백과-밀집도" class="headerlink" title="3-1) 가로 공백과 밀집도"></a>3-1) 가로 공백과 밀집도</h3><ul><li>가로로는 공백을 사용해 밀접한개념과 느슨한 개념을 표현함 (ex&gt; b<em>b - 4</em>a*c )</li></ul><h3 id="3-2-가로-정렬"><a href="#3-2-가로-정렬" class="headerlink" title="3-2) 가로 정렬"></a>3-2) 가로 정렬</h3><ul><li>현재 우리가 개발하는 방식 그대로 하면됨. (코딩 컨벤션이 있으면 그 형식에 맞춰서 개발해아함.)</li></ul><h3 id="3-3-들여쓰기"><a href="#3-3-들여쓰기" class="headerlink" title="3-3) 들여쓰기"></a>3-3) 들여쓰기</h3><ul><li>범위(scope) 로 이뤄진 계층을 표현하기 위해 코드 들여쓰기 사용함. </li></ul><h4 id="3-3-1-들여쓰기-무시하기"><a href="#3-3-1-들여쓰기-무시하기" class="headerlink" title="3-3-1) 들여쓰기 무시하기"></a>3-3-1) 들여쓰기 무시하기</h4><ul><li>가끔 If문 같은 경우 간단한 한줄짜리 로직을 개발할때, 들여쓰기를 무시할때가 있는데, 한줄의 로직도 들여쓰기를 다 해주는걸 권장함. </li></ul><h2 id="4-팀-규칙"><a href="#4-팀-규칙" class="headerlink" title="4. 팀 규칙"></a>4. 팀 규칙</h2><ul><li>팀내에 코드컨벤션이 있다면 그 컨벤션 규칙을 따르는것이 맞다. (각자 개발방식으로 가져가면 코드 유지가 어렵다.)</li><li><a href="https://google.github.io/styleguide/javaguide.html">구글 코드컨벤션</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;형식-맞추기&quot;&gt;&lt;a href=&quot;#형식-맞추기&quot; class=&quot;headerlink&quot; title=&quot;형식 맞추기&quot;&gt;&lt;/a&gt;형식 맞추기&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;프로그래머라면 형식을 깔끔하게 맞춰 코드를 짜야한다. 코드 형식을 맞추기 위</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="형식 맞추기" scheme="https://codexdawn.github.io/categories/%ED%98%95%EC%8B%9D-%EB%A7%9E%EC%B6%94%EA%B8%B0/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
</feed>
