<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codexdawn</title>
  
  
  <link href="https://codexdawn.github.io/atom.xml" rel="self"/>
  
  <link href="https://codexdawn.github.io/"/>
  <updated>2021-02-23T12:39:04.333Z</updated>
  <id>https://codexdawn.github.io/</id>
  
  <author>
    <name>codexdawn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>clean-code-12</title>
    <link href="https://codexdawn.github.io/2021/02/23/clean-code-12/"/>
    <id>https://codexdawn.github.io/2021/02/23/clean-code-12/</id>
    <published>2021-02-23T09:15:13.000Z</published>
    <updated>2021-02-23T12:39:04.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="동시성"><a href="#동시성" class="headerlink" title="동시성"></a>동시성</h1><h2 id="동시성이-필요한-이유"><a href="#동시성이-필요한-이유" class="headerlink" title="동시성이 필요한 이유?"></a>동시성이 필요한 이유?</h2><ul><li>동시성은 결합(coupling)을 없애는 전략이다. 즉, 무엇과 언제를 분리하는 전략이다. </li><li>스레드가 하나인 프로그램은 무엇과 언제가 서로 밀접하다. 그래서 호출 스택을 살펴보면 프로그램 상태가 곧바로 드러남. </li><li>단일스레드로 프로그램을 실행하면 안정적으로 수행은 가능하지만, 처리량에따라 처리수행속도가 느리다. 하지만 다중스레드를 활용하면, 상황에 따라서 안정적이지는 않으나, 처리수행속도는 스레드 갯수가 증가하면 할수록 빨라지게된다. </li></ul><h3 id="미신과-오해"><a href="#미신과-오해" class="headerlink" title="미신과 오해"></a>미신과 오해</h3><ul><li>동시성은 항상 성능을 높여준다 : 동시성은 때로 성능을 높여준다. 대기 시간이 아주 길어 여러 스레드가 프로세서를 공유 할 수 있거나, 여러 프로세서가 동시에 처리할 독립적인 계산이 충분히 많은 경우에만 성능이 높아진다. 어느쪽도 일상적으로 발생하는 상황은 아니다. </li><li>동시성을 구현해도 설계는 변하지 않는다 : 단일 스레드 시스템과 다중 스레드 시슽메은 설계가 판이하게 다르다. 일반적으로 무엇 과 언제를 분리하면 시스템 구조가 크게 달라진다. </li><li>웹 또는 EJB컨테이너를 사용하면 동시성을 이해할 필요가 없다 : 실제로는 컨테이너가 어떻게 동작하는지, 어떻게 동시 수정, 데드락 등과 같은 문제를 피할수 있는지를 알아야만한다. </li></ul><p>다음은 동시성과 관련된 타당한 생각 몇가지다. </p><ul><li>동시성은 다소 부하를 유발한다. : 성능 측면에서부하가 걸리며, 코드도 더 짜야한다.</li><li>동시성은 복잡하다 : 간단한 문제라도 동시성은 복잡하다. </li><li>일반적으로 동시성 버그는 재현하기 어렵다. : 그래서 진짜 결함으로 간주되지않고 일회성 문제로 여겨 무시하기 쉽다. </li><li>동시성을 구현하려면 흔히 근본적인 설계 전략을 재고 해야한다. </li></ul><h2 id="난관"><a href="#난관" class="headerlink" title="난관"></a>난관</h2><ul><li>동시성을 구현하기 어려운 이유는? 아래 코드를 확인해보자. </li></ul><figure class="highlight java"><figcaption><span>일반적인 코드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> lastIdUsed; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ++lastIdUsed; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>인스턴스 X를 생성후, lastIdUsed에 42로 설정하고, 2개의 스레드가 해당 인스턴스를 공유한다고 가정하자. 그럼 결과는 3가지중 하나가 발생한다.</li></ul><blockquote><p>위 코드가 2개의 스레드를 활용할 경우 발생되는 케이스 3가지</p><ul><li>A스레드가 43받고, B스레드는 44를 받는다. lastIdUsed는 44가 된다.</li><li>A스레드가 44받고, B스레드는 43을 받는다. lastIdUsed는 44가 된다. </li><li>A스레드와 B스레드가 43을 받는다. lastIdUsed는 43이 된다. </li></ul></blockquote><ul><li>대부분 정상적인 케이스로 로직이 흘러가지만, 간혹가다가 세번째와 같이 예측하지 못한 경우가 발생하기도 한다. 이 경우가 발생하는 이유는 두 스레드가 getNextId를 수행하는 잠재적인 경로는 최대 12,870개에 달하고, int를 long으로 변경하면 조합가능 경로수는 2,704,156개로 증가한다. </li></ul><h2 id="동시성-방어원칙"><a href="#동시성-방어원칙" class="headerlink" title="동시성 방어원칙"></a>동시성 방어원칙</h2><h3 id="SRP"><a href="#SRP" class="headerlink" title="SRP"></a>SRP</h3><ul><li>SRP는 주어진 메서드/클래스/컴포넌트를 변경할 이유가 하나여야 한다는 원칙이다. 동시성은 복잡성 하나만으로도 따로 분리해야할 이유로 충분함. </li></ul><blockquote><p>동시성을 구현할때 고려해야할 부분 </p><ul><li>동시성 코드는 독자적인 개발, 변경, 조율 주기가 있다.</li><li>동시성 코드에는 독자적인 난관이 있다. 다른 코드에서 겪는 난관과 다르며 훨씬 어렵다.</li><li>잘못 구현한 동시성 코드는 별의별 방식으로 실패한다. 주변에 있는 다른 코드가 발목을 잡지 않더라도 동시성 하나만으로도 충분히 어렵다. </li></ul></blockquote><p><strong>권장사항</strong> : 동시성 코드는 다른코드와 분리하라. (SRP 원칙을 철저하게 지켜라.)</p><h3 id="자료-범위를-제한하라"><a href="#자료-범위를-제한하라" class="headerlink" title="자료 범위를 제한하라"></a>자료 범위를 제한하라</h3><ul><li>앞서 봤듯, 두 스레드가 서로 간섭하므로 예상치 못한 결과를 내놓는데, 이런 문제를 해결하는 방안으로 공유 객체를 사용하는 코드 내 <strong>임계영역(critical sction)</strong> 을 <strong>sychronized</strong> 키워드로 보호하라고 권장.  </li></ul><blockquote><p>공유 자료를 수정하는 위치가 많을수록 다음 가능성도 커진다. </p><ul><li>보호할 임계영역을 빼먹는다. 그래서 공유자료를 수정하는 모든 코드를 망가뜨림. </li><li>모든 임계영역을 올바로 보호했는지 (DRY위반) 확인하느라 똑같은 노력과 수고를 반복함. </li><li>그렇지 않아도 찾아내기 어려운 버그가 더욱 찾기 어려워 진다. </li></ul></blockquote><p><strong>권장사항</strong> : 자료를 캡슐화 하라. 공유자료를 최대한 줄여라. </p><h3 id="자료-사본을-사용하라"><a href="#자료-사본을-사용하라" class="headerlink" title="자료 사본을 사용하라"></a>자료 사본을 사용하라</h3><ul><li>공유 자료를 줄이려면 처음부터 공유하지 않는 방법이 제일 최선임. 하지만 굳이 공유자료를 사용하려면 차라리 각 스레드가 객체를 복사해 사용한 후 한 스레드가 해당 사본에서 결과를 가져오는 방법도 가능하다. </li></ul><h3 id="스레드는-가능한-독립적으로-구현하라"><a href="#스레드는-가능한-독립적으로-구현하라" class="headerlink" title="스레드는 가능한 독립적으로 구현하라"></a>스레드는 가능한 독립적으로 구현하라</h3><ul><li>자신만의 세상에 존재하는 스레드를 구현한다. 즉, 다른 스레드와 자료를 공유하지 않는다. 각 스레드는 클라이언트 요청 하나를 처리한다. 모든 정보는 비공유 출처에서 가져오며 로컬 변수에 저장한다. 그러면 각 스레드는 세상에 자신만 있는듯이 돌아갈수 있다. 다른 스레드와 동기화할 필요가 없으므로 </li></ul><p><strong>권장사항</strong> : 독자적인 스레드로, 가능하다면 다른 프로세서에서, 돌려도 괜찮도록 자료를 독립적인 단위로 분할하라. </p><h2 id="라이브러리를-이해하라"><a href="#라이브러리를-이해하라" class="headerlink" title="라이브러리를 이해하라"></a>라이브러리를 이해하라</h2><blockquote><p>자바 5부터는 동시성 측면에서 이전 버전보다 많이 개선되었음. 자바5로 스레드 코드를 구현한다면 다음을 고려하라. </p><ul><li>스레드 환경에 안전한 컬렉션을 사용한다. 자바5부터 제공</li><li>서로 무관한 작업을 수행할때는 executor프레임워크로 사용한다. </li><li>가능하다면 스레드가 차단(blocking)되지 안흔 방법을 사용한다. (non-blocking IO)</li><li>일부 클래스 라이브러리는 스레드에 안전하지 못하다.</li></ul></blockquote><h3 id="스레드-환경에-안전한-컬렉션"><a href="#스레드-환경에-안전한-컬렉션" class="headerlink" title="스레드 환경에 안전한 컬렉션"></a>스레드 환경에 안전한 컬렉션</h3><ul><li>java.util.concurrent.ConcurrentHashMap은 거의 모든 상황에서 HashMap보다 빠르다. </li><li>좀 더 복잡한 동시성 설계를 지원하고자 자바5에서는 다른 클래스도 추가되었다. 아래를 참고하자.<blockquote><p>자바5에 추가된 동시성 설계에 도움줄 클래스 목록 </p><ul><li>ReentrantLock : 한 메서드에서 잠그고 다른 메서드에서 푸는 lock이다. </li><li>Semaphore : 전형적인 세마포어다. count가 있는 락이다.</li><li>CountDownLatch : 지정한 수만큼 이벤트가 발생하고 나서야 대기중인 스레드를 모두 해제하는 락이다. 모든 스레드에게 동시에 공평하게 시작할 기회를 준다. </li></ul></blockquote></li></ul><p><strong>권장사항</strong> : 언어가 제공하는 클래스를 검토하라. 자바에서는 java.util.concurrent, java.util.concurrent.atomic, java.util.concurrent.locks를 익혀라. </p><h2 id="실행모델을-이해하라"><a href="#실행모델을-이해하라" class="headerlink" title="실행모델을 이해하라"></a>실행모델을 이해하라</h2><blockquote><p>다중스레드 관련 용어 정리 </p><ul><li>한정된 자원(Bound Resource) : 다중 스레드 환경에서 사용하는 자원으로, 크기나 숫자가 제한적이다. 데이터베이스 연결, 길이가 일정한 읽기/쓰기 버퍼등이 예다. </li><li>상호 배제(Mutual Exclusion) : 한번에 한 스레드만 공유 자료나 공유 자원을 사용 할수 있는 경우를 가리킨다.</li><li>기아(Starvation) : 한 스레드나 여러 스레드가 굉장히 오랫동안 혹은 영원 자원을 기다린다. 예를들어, 항상 짧은 스레드에게 우선순위를 준다면, 짧은 스레드가 지속적으로 이어질 경우, 긴 스레드가 기아상태에 빠짐 </li><li>데드락(Deadlock) : 여러 스레드가 서로가 끝나기를 기다린다. 모든 스레드가 각기 필요한 자원을 다른 스레드가 점유하는 발마에 어느쪽도 더 이상 진행하지 못한다. </li><li>라이브락(Livelock) : lock을 거는 단계에서 각 스레드가 서로를 방해한다. 스레드는 계속해서 진행하려 하지만, 공명(resonance)로 인해, 굉장히 오랫동안 혹은 영원히 진행하지 못한다. </li></ul></blockquote><h3 id="다중-스레드-프로그래밍에서-사용하는-실행-모델"><a href="#다중-스레드-프로그래밍에서-사용하는-실행-모델" class="headerlink" title="다중 스레드 프로그래밍에서 사용하는 실행 모델"></a>다중 스레드 프로그래밍에서 사용하는 실행 모델</h3><h4 id="생산자-소비자-Producer-Consumer"><a href="#생산자-소비자-Producer-Consumer" class="headerlink" title="생산자-소비자 (Producer - Consumer)"></a>생산자-소비자 (Producer - Consumer)</h4><ul><li>하나 이상 생산자 스레드가 정보를 생성해 버퍼나 대기열(큐)에 넣는다. 하나 이상 소비자 스레드가 대기열에서 정보를 가져와 사용한다.</li><li>생산자 스레드와 소비자 스레드가 사용하는 대기열은 한정된 자원이다. </li><li>생산자 스레드는 대기열에 빈공간이 있어야 정보를 채운다.  즉, 빈공간이 생길때까지 기다린다. </li><li>대기열을 올바로 사용하고자 생산자 스레드와 소비스 스레드는 서로에게 시그널을 보낸다. </li><li>하지만 생산자 스레드 와 소비자 스레드가 동시에 시그널을 날리면? 무한으로 시그널을 기다릴 가능성이 존재한다. </li><li><a href="https://ko.wikipedia.org/wiki/%EC%83%9D%EC%82%B0%EC%9E%90-%EC%86%8C%EB%B9%84%EC%9E%90_%EB%AC%B8%EC%A0%9C">생산자-소비자</a> 참고 </li></ul><h4 id="읽기-쓰기-Readers-Writers"><a href="#읽기-쓰기-Readers-Writers" class="headerlink" title="읽기-쓰기 (Readers - Writers)"></a>읽기-쓰기 (Readers - Writers)</h4><ul><li>읽기 스레드를 위한 주된 정보원으로 공유 자원을 사용하지만, 쓰기 스레드가 이 공유 자원을 이따금 갱신한다고 하자. 이런 경우 처리율이 문제의 핵심이다.</li><li>처리율을 강조하면 기아 현상이 생기거나 오래된 정보가 쌓인다. </li><li>갱신을 허용하면 처리율에 영향을 미친다. </li><li>읽기 스레드와 쓰기 쓰레드간 균형을 잡지 않으면, 읽기 스레드를 강조하면 기아현상, 쓰기 스레드를 강조하면 처리율에 영향을 미치게 되므로 양쪽 균현을 잡으면서 동시 갱신 문제를 피하는 해법이 필요함. </li><li><a href="https://ko.wikipedia.org/wiki/%EB%8F%85%EC%9E%90-%EC%A0%80%EC%9E%90_%EB%AC%B8%EC%A0%9C">읽기-쓰기</a> 참고 </li></ul><h4 id="식사하는-철학자들-Dining-Philosopers"><a href="#식사하는-철학자들-Dining-Philosopers" class="headerlink" title="식사하는 철학자들(Dining Philosopers)"></a>식사하는 철학자들(Dining Philosopers)</h4><ul><li><a href="https://ko.wikipedia.org/wiki/%EC%8B%9D%EC%82%AC%ED%95%98%EB%8A%94_%EC%B2%A0%ED%95%99%EC%9E%90%EB%93%A4_%EB%AC%B8%EC%A0%9C">식사하는 철학자</a> 참고</li></ul><p><strong>권장사항</strong> : 위에서 설명한 기본 알고리즘과 각 해법을 이해하라 </p><h2 id="동기화하는-메서드-사이에-존재하는-의존성을-이해하라"><a href="#동기화하는-메서드-사이에-존재하는-의존성을-이해하라" class="headerlink" title="동기화하는 메서드 사이에 존재하는 의존성을 이해하라"></a>동기화하는 메서드 사이에 존재하는 의존성을 이해하라</h2><ul><li>동기화는 메서드 사이에서 의존성이 존재하면 동시성 코드에 찾아내기 어려운 버그가 생김 </li><li>자바에서는 <strong>sychronized</strong> 라는 개념이 존재함. </li><li>공유 클래스 하나에 동기화된 메서드가 여럿이라면 구현이 올바른지 다시 한번 확인해야함. </li></ul><blockquote><p>공유 객체 하나에 여러 메서드가 필요한 상황도 생긴다. 그럴때는 아래 3가지를 고려하라.</p><ul><li>client에서 잠금 : client에서 첫번째 메서드를 호출하기전 서버를 잠금. 마지막 메서드를 호출 할때까지 잠금을 유지. </li><li>server에서 잠금 : server에다 서버를 잠그고 모든 메서드를 호출한 후 잠금을 해제하는 메서드를 구현. client는 이 메서드를 호출 </li><li>연결서버(Adapted) : 잠금을 수행하는 중간 단계를 생성. 서버에서 잠금 방식과 유사하지만 원래서버는 변경안함. </li></ul></blockquote><h2 id="동기화하는-부분을-작게-만들어라"><a href="#동기화하는-부분을-작게-만들어라" class="headerlink" title="동기화하는 부분을 작게 만들어라"></a>동기화하는 부분을 작게 만들어라</h2><ul><li>동기화처리한다고 여기저기 <strong>sychronized</strong> 를 남발하면 곤란한다. </li><li>하지만 임계영역(critical section)은 반드시 보호해야 하기때문에, 코드를 짤 때는 임계영역의 수를 최대한 줄여야한다. </li><li>임계영역을 줄인답시고 거대한 임계영역 하나로 구현하는 순진한 프로그래머도 있는데.. 필요이상으로 임계영역 크기를 키우면 스레드간에 경쟁이 늘어나고 프로그램 성능이 저하됨. </li></ul><p><strong>권장사항</strong> : 동기화 하는 부분은 최대한 작게!! </p><h2 id="올바른-종료-코드는-구현하기-어렵다"><a href="#올바른-종료-코드는-구현하기-어렵다" class="headerlink" title="올바른 종료 코드는 구현하기 어렵다"></a>올바른 종료 코드는 구현하기 어렵다</h2><ul><li>깔끔하게 종료하는 코드는 올바로 구현하기 어렵다. 가장 흔히 발생하는 문제가 데드락이다. 즉, 스레드가 절대 오지않을 시그널을 기다린다. </li></ul><p><strong>권장사항</strong> : 종료 코드를 개발 초기부터 고민하고 동작하게 초기부터 구현하라. 생각보다 오래걸린다. 생각보다 어려우므로 이미 나온 알고리즘을 검토하라. </p><h2 id="스레드-코드-테스트하기"><a href="#스레드-코드-테스트하기" class="headerlink" title="스레드 코드 테스트하기"></a>스레드 코드 테스트하기</h2><p><strong>권장사항</strong> : 문제를 노출하는 테스트 케이스를 작성하라. 프로그램 설정과 시스템 설정과 부하를 바꿔가며 자주 돌려라. 테스트가 실패하면 원인을 추적하라. 다시 돌렸더니 통과하더라도 그냥 넘어가면 안되고 다시 재검증하여 해결하도록 노력해야한다. </p><blockquote><p>스레드 코드 테스트하는 지침서 </p><ul><li>말이 안되는 실패는 잠정적인 스레드 문제로 취급하라.</li><li>다중 스레드를 고려하지 않은 순차 코드부터 제대로 돌게 만들자.</li><li>다중 스레드를 쓰는 코드 부분을 다양한 환경에 쉽게 끼워 넣을 수 있도록 스레드 코드를 구현하라.</li><li>다중 스레드를 쓰는 코드 부분을 상황에 맞춰 조정 할 수 있게 작성하라.</li><li>프로세서 수보다 많은 스레드를 돌려보라.</li><li>다른 플랫폼에서 돌려보라.</li><li>코드에 보조코드를 넣어 돌려라. 강제로 실패를 일으키게 해보라. </li></ul></blockquote><h3 id="말이-안되는-실패는-잠정적인-스레드-문제로-취급하라"><a href="#말이-안되는-실패는-잠정적인-스레드-문제로-취급하라" class="headerlink" title="말이 안되는 실패는 잠정적인 스레드 문제로 취급하라."></a>말이 안되는 실패는 잠정적인 스레드 문제로 취급하라.</h3><ul><li>다중 스레드는 때떄로 ‘말이 안되는’ 오류를 일으킨다.</li><li>스레드 코드에 잠입한 버그는 수천 수백만번에 한번씩 드러나기도하기때문에, 실패를 재현하기 아주 어려움. </li><li>많은 개발자들은 이런 재현하기 어려운 실패를 ‘일회성’ 문제로 여기고 그냥 넘기는 부분이 많다.<br><strong>권장사항</strong> : 시스템 실패를 ‘일회성’이라 치부하지 마라. </li></ul><h3 id="다중-스레드를-고려하지-않은-순차코드부터-제대로-도게-만들자"><a href="#다중-스레드를-고려하지-않은-순차코드부터-제대로-도게-만들자" class="headerlink" title="다중 스레드를 고려하지 않은 순차코드부터 제대로 도게 만들자."></a>다중 스레드를 고려하지 않은 순차코드부터 제대로 도게 만들자.</h3><ul><li>스레드 환경 밖에서 코드가 제대로 동작하는지 확인하자.</li><li>일반적인 방법으로 스레드가 호출하는 POJO를 생성한다. POJO는 스레드를 모른다. 따라서 스레드 환경 밖에서 테스트가 가능</li><li>POJO에넣는 코드는 많을수록 좋다.<br><strong>권장사항</strong> : 스레드 환경 밖에서 생기는 버그와 스레드 환경에서 생기는 버그를 동시에 디버깅 하지 마라. 먼저 스레드 환경 밖에서 코드를 올바로 돌려라. </li></ul><h3 id="다중-스레드를-쓰는-코드-부분을-다양한-환경에-쉽게-끼워-넣을-수-있도록-스레드-코드를-구현하라"><a href="#다중-스레드를-쓰는-코드-부분을-다양한-환경에-쉽게-끼워-넣을-수-있도록-스레드-코드를-구현하라" class="headerlink" title="다중 스레드를 쓰는 코드 부분을 다양한 환경에 쉽게 끼워 넣을 수 있도록 스레드 코드를 구현하라."></a>다중 스레드를 쓰는 코드 부분을 다양한 환경에 쉽게 끼워 넣을 수 있도록 스레드 코드를 구현하라.</h3><p>다중 스레드를 쓰는 코드를 다양한 설정으로 실행하기 쉽게 구현하라</p><ul><li>한 스레드로 실행하거나, 여러 스레드로 실행하거나, 실행 중 스레드 수를 바꿔본다.</li><li>스레드 코드를 실제 환경이나 테스트 환경에서 돌려본다.</li><li>테스트 코드를 빨리, 천천히 다양한 속도로 돌려본다.</li><li>반복 테스트가 가능하도록 테스트 케이스를 작성한다.<br><strong>권장사항</strong> : 다양한 설정에서 실행할 목적으로 다른 환경에 쉽게 끼워 넣을수 있게 코드를 구현하라. </li></ul><h3 id="다중-스레드를-쓰는-코드-부분을-상황에-맞춰-조정-할-수-있게-작성하라"><a href="#다중-스레드를-쓰는-코드-부분을-상황에-맞춰-조정-할-수-있게-작성하라" class="headerlink" title="다중 스레드를 쓰는 코드 부분을 상황에 맞춰 조정 할 수 있게 작성하라."></a>다중 스레드를 쓰는 코드 부분을 상황에 맞춰 조정 할 수 있게 작성하라.</h3><ul><li>적절한 스레드 개수를 파악하려면 상당한 시행착오가 필요함. </li><li>스레드 개수를 조율하기 쉽게 코드를 구현하는 부분 필요. </li><li>프로그램이 돌아가는 도중에 스레드 개수를 변경하는 방법도 고려.</li><li>프로그램 처리율과 효율에 따라 스스로 스레드 개수를 조율하는 코드도 고민.</li></ul><h3 id="프로세서-수보다-많은-스레드를-돌려보라"><a href="#프로세서-수보다-많은-스레드를-돌려보라" class="headerlink" title="프로세서 수보다 많은 스레드를 돌려보라."></a>프로세서 수보다 많은 스레드를 돌려보라.</h3><ul><li>시스템이 스레드를 스와핑 할때도 문제가 발생한다. 스와핑을 일으키려면 프로세스 수보다 많은 스레드를 돌린다. 스와핑이 잦을 수록 임계영역을 빼먹은 코드나 데드락을 일으키는 코드를 찾기 쉬워진다. </li></ul><h3 id="다른-플랫폼에서-돌려보라"><a href="#다른-플랫폼에서-돌려보라" class="headerlink" title="다른 플랫폼에서 돌려보라."></a>다른 플랫폼에서 돌려보라.</h3><ul><li>다중 스레드 코드는 플랫폼에 따라 다르게 돌아감<br><strong>권장사항</strong> : 처음부터 그리고 자주 모든 목표 플랫폼에서 코드를 돌려라. </li></ul><h3 id="코드에-보조코드를-넣어-돌려라-강제로-실패를-일으키게-해보라"><a href="#코드에-보조코드를-넣어-돌려라-강제로-실패를-일으키게-해보라" class="headerlink" title="코드에 보조코드를 넣어 돌려라. 강제로 실패를 일으키게 해보라."></a>코드에 보조코드를 넣어 돌려라. 강제로 실패를 일으키게 해보라.</h3><ul><li>스레드 버그를 예방하려면 강제로 실패를 일켜야하는데, 방법은 보조 코드를 방법은 두가지가 존재한다. </li></ul><blockquote><p>보조코드 추가 방법 </p><ul><li>직접 구현하기</li><li>자동화 </li></ul></blockquote><h4 id="직접-구현하기"><a href="#직접-구현하기" class="headerlink" title="직접 구현하기"></a>직접 구현하기</h4><ul><li>코드에 직접 wait(), sleep(), yield(), priority() 함수를 추가 </li></ul><blockquote><p>직접 구현하면 발생되는 문제</p><ul><li>보조 코드를 삽입할 적정 위치를 찾아야함.</li><li>어떤 함수를 어디서 호출해야 적당한지 어떻게 아냐?</li><li>배포환경에 보조 코드를 그대로 남겨두면 프로그램 성능이 떨어짐.</li><li>무작위적이다. 오류가 드러날지도 모르고 드러나지 않을지도 모른다. 사실상 드러나지 않을 확률이 더 높다. </li></ul></blockquote><h4 id="자동화"><a href="#자동화" class="headerlink" title="자동화"></a>자동화</h4><ul><li>보조 코드를 자동으로 추가하려면,AOF(Aspect-Oriented Framework), CGLIB, ASM등과 같은 도구를 사용한다. (AOP 활용)</li></ul><p><strong>권장사항</strong> : 흔들기 기법을 사용해 오류를 찾아내라 (강제로 오류를 발생하게 해야함)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;동시성&quot;&gt;&lt;a href=&quot;#동시성&quot; class=&quot;headerlink&quot; title=&quot;동시성&quot;&gt;&lt;/a&gt;동시성&lt;/h1&gt;&lt;h2 id=&quot;동시성이-필요한-이유&quot;&gt;&lt;a href=&quot;#동시성이-필요한-이유&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="동시성" scheme="https://codexdawn.github.io/categories/%EB%8F%99%EC%8B%9C%EC%84%B1/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>java-effective-9</title>
    <link href="https://codexdawn.github.io/2021/02/23/java-effective-9/"/>
    <id>https://codexdawn.github.io/2021/02/23/java-effective-9/</id>
    <published>2021-02-23T08:26:08.000Z</published>
    <updated>2021-02-23T08:51:21.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="try-finally-보다는-try-with-resources를-사용하라"><a href="#try-finally-보다는-try-with-resources를-사용하라" class="headerlink" title="try-finally 보다는 try-with-resources를 사용하라"></a>try-finally 보다는 try-with-resources를 사용하라</h2><ul><li>자바 라이브러리에는 close메서드를 호출해 직접 닫아줘야하는 자원이 꽤 있음. (InputStream,OutputStream,java.sql.Connection등)</li><li>JAVA7이 들어서면서 try-with-resources가 제공됨. 이 구조를 사용하려면 AutoClosable이 구현되어있어야함. </li></ul><figure class="highlight java"><figcaption><span>try-with-resources 사용법1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">firstLineOfFile</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">try</span>(BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path))) &#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>try-with-resources 사용법2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(String src, String dst)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">try</span>(InputStream in = <span class="keyword">new</span> FileInputStream(src); </span><br><span class="line">OutputStream out = <span class="keyword">new</span> FileOutputStream(dst)) &#123;</span><br><span class="line"><span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE]; </span><br><span class="line"><span class="keyword">int</span> n; </span><br><span class="line"><span class="keyword">while</span>((n = in.read(buf)) &gt;= <span class="number">0</span>)</span><br><span class="line">out.write(buf,<span class="number">0</span>,n); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>try-with-resources 사용법3</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">firstLineOfFile</span><span class="params">(String path, String defaultVal)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">try</span>(BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path))) &#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine(); </span><br><span class="line">&#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line"><span class="keyword">return</span> defaultVal; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;try-finally-보다는-try-with-resources를-사용하라&quot;&gt;&lt;a href=&quot;#try-finally-보다는-try-with-resources를-사용하라&quot; class=&quot;headerlink&quot; title=&quot;try-finally </summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Effective Java" scheme="https://codexdawn.github.io/categories/Effective-Java/"/>
    
    <category term="객체 생성과 파괴" scheme="https://codexdawn.github.io/categories/%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%8C%8C%EA%B4%B4/"/>
    
    
    <category term="Java,EffectiveJava" scheme="https://codexdawn.github.io/tags/Java-EffectiveJava/"/>
    
  </entry>
  
  <entry>
    <title>java-effective-8</title>
    <link href="https://codexdawn.github.io/2021/02/23/java-effective-8/"/>
    <id>https://codexdawn.github.io/2021/02/23/java-effective-8/</id>
    <published>2021-02-23T07:43:45.000Z</published>
    <updated>2021-02-23T08:27:01.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="finalizer-와-cleaner-사용을-피하라"><a href="#finalizer-와-cleaner-사용을-피하라" class="headerlink" title="finalizer 와 cleaner 사용을 피하라"></a>finalizer 와 cleaner 사용을 피하라</h2><ul><li>자바는 두가지 객체 소멸자가 있는데, finalizer 와 cleaner이다. </li><li>finalizer는 예측할수 없고, 상황에 따라 위험할수 있어 일반적으로 불필요함. </li><li>cleaner는 finalizer보다는 덜 위험하지만, 여전히 예측할수 없고, 느리고, 일반적으로 불필요함. (GC에서 소멸하는 역할을 담당하기때문)</li><li>finalizer와 cleaner로는 제때 실행되어야하는 (realtime환경) 작업은 절대 할 수 없음. (application이 제때 종료되어야하는데, 게으른 finalizer/ cleaner로 인해 종료가 안되어있는 상태로 유지될 수있다.)</li><li>상태를 영구적으로 수정하는 작업에서는 절대로! finalizer나 cleaner에 의존해서는 안됨! </li><li>System.gc / System.runFinaliztion 메서드에 현혹되지 말자. GC 처리의 우선순위를 높여줄지언정 제때 처리된다는 보장이 없음 </li><li>finalizer/cleaner는 심각한 성능 문제도 동반한다. (AutoClosable처리에 비해 50배의 성능차 발생 )</li><li>finalizer/cleaner를 대신할 묘안은? AutoClosable을 구현해주고, 클라이언트에서 인스턴스를 다사용하면 close 메서드를 호출하면 됨. (일반적으로 예외가 발생해도 제대로 종료되도록 try-with-resources를 사용해야함.)</li></ul><blockquote><p>finalizer 와 cleaner는 그럼 언제 사용해야 잘사용했다고 칭찬받을까? </p><ol><li>자원의 소유자가 close메서드를 호출하지 못할걸 대비한 안전망이다.</li><li>Native-Peer와 연결된 객체 (JVM 메모리 구조중 - Native Method Area 영역을 말함 (JNI))에서 close하고 싶을때 호출한다. Native Method Area영역은 자바 객체가 아니기때문에 GC에서 관리하지 못한다. </li></ol></blockquote><ul><li>결론은 finalizer/cleaner활용보다는 AutoClosable로 객체life를 관리하고, try-with-resources로 객체를 호출해 관리하는것이 베스트이다. </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;finalizer-와-cleaner-사용을-피하라&quot;&gt;&lt;a href=&quot;#finalizer-와-cleaner-사용을-피하라&quot; class=&quot;headerlink&quot; title=&quot;finalizer 와 cleaner 사용을 피하라&quot;&gt;&lt;/a&gt;final</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Effective Java" scheme="https://codexdawn.github.io/categories/Effective-Java/"/>
    
    <category term="객체 생성과 파괴" scheme="https://codexdawn.github.io/categories/%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%8C%8C%EA%B4%B4/"/>
    
    
    <category term="Java,EffectiveJava" scheme="https://codexdawn.github.io/tags/Java-EffectiveJava/"/>
    
  </entry>
  
  <entry>
    <title>java-effective-7</title>
    <link href="https://codexdawn.github.io/2021/02/23/java-effective-7/"/>
    <id>https://codexdawn.github.io/2021/02/23/java-effective-7/</id>
    <published>2021-02-23T05:16:40.000Z</published>
    <updated>2021-02-23T07:41:01.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="다-쓴-객체는-참조를-해제하라"><a href="#다-쓴-객체는-참조를-해제하라" class="headerlink" title="다 쓴 객체는 참조를 해제하라"></a>다 쓴 객체는 참조를 해제하라</h2><figure class="highlight java"><figcaption><span>메모리누수가 일어는 위치는 어디인가?</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Object[] elements; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">elements = <span class="keyword">new</span> Object[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object e)</span> </span>&#123;</span><br><span class="line">ensureCapacity();</span><br><span class="line">elements[size++] = e; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> elements[--size]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//배열의 크기는 2배씩 증가 , 원소를 위한 공간을 적어도 하나 이상 확보 </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(elements.length == size) &#123;</span><br><span class="line">elements = Arrays.copyOf(elements,<span class="number">2</span> * size + <span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Q&gt; 위 코드에서 메모리 누수는 어디서 발생할까?</p><ul><li>스택이 커졌다 줄어둘때 스택에서 꺼내진 객체들을 GC가 회수 하지 않는다. 프로그램에서 더이상 사용하지 않더라도 말이다. (pop 메서드) </li></ul></blockquote><ul><li>위 코드의 메모리누수는 어떻게 해결해야하는가? 아래 코드를 확인해보자. </li></ul><figure class="highlight java"><figcaption><span>제대로 구현 pop메서드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException(); </span><br><span class="line">&#125;</span><br><span class="line">Object result = elements[--size]; </span><br><span class="line">elements[size] = <span class="keyword">null</span>; <span class="comment">//다 쓴 참조 해제  </span></span><br><span class="line"><span class="keyword">return</span> result; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위와 같이 null처리하면 실수로 사용하려하면, NullPointerException을 던지며 종료되어 조기에 발견 가능 </li></ul><blockquote><p>Q&gt; null처리는 언제 해야할까? (Stack 클래스 메모리 누수 이유)</p><ul><li>스택이 자기 메모리를 직접 관리하기 때문 (Heap에서 참조로 스택과 연결되어있어서 GC가 해제를 못함)</li></ul><p>개발자들은 자기 메모리를 직접 관리하는 클래스라면 프로그래머는 항시 메모리 누수에 주의 해야한다. </p></blockquote><ul><li><p>캐시 역시 메모리 누수의 주범이다. 객체 참조를 캐시에 넣고 이 사실을 까맣게 잊은채 그 객체를 다 쓴뒤로도 한참 놔두는일.이부분을 해소하려면, WeakHashMap을 사용해 캐시를 만들자. 그럼 다쓴 엔트리는 그 즉시 제거됨.  </p></li><li><p>리스너 혹은 콜백이라 불리는 것도 메모리누수의 주범이다. 클라이언트가 콜백을 등록하고 명확히 해지하지 않을때 발생한다. 이럴때는 콜백을 약한 참조로 저장하면 GC가 즉시 수거해감. (ex&gt; WeakHashMap에 키로 저장하면 됨.)</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;다-쓴-객체는-참조를-해제하라&quot;&gt;&lt;a href=&quot;#다-쓴-객체는-참조를-해제하라&quot; class=&quot;headerlink&quot; title=&quot;다 쓴 객체는 참조를 해제하라&quot;&gt;&lt;/a&gt;다 쓴 객체는 참조를 해제하라&lt;/h2&gt;&lt;figure class=&quot;hi</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Effective Java" scheme="https://codexdawn.github.io/categories/Effective-Java/"/>
    
    <category term="객체 생성과 파괴" scheme="https://codexdawn.github.io/categories/%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%8C%8C%EA%B4%B4/"/>
    
    
    <category term="Java,EffectiveJava" scheme="https://codexdawn.github.io/tags/Java-EffectiveJava/"/>
    
  </entry>
  
  <entry>
    <title>java-effective-6</title>
    <link href="https://codexdawn.github.io/2021/02/23/java-effective-6/"/>
    <id>https://codexdawn.github.io/2021/02/23/java-effective-6/</id>
    <published>2021-02-23T02:33:32.000Z</published>
    <updated>2021-02-23T03:32:53.847Z</updated>
    
    <content type="html"><![CDATA[<h2 id="불필요한-객체-생성을-피하라"><a href="#불필요한-객체-생성을-피하라" class="headerlink" title="불필요한 객체 생성을 피하라"></a>불필요한 객체 생성을 피하라</h2><ul><li>String객체를 인스턴스화 시키는건 미친짓이다. (new String(“s”))</li><li>소위 비싼 객체는 반복해서 사용하지 말고 캐싱하여 재사용하자 (static final로 만들어서 사용할수 있도록)</li></ul><figure class="highlight java"><figcaption><span>정규표현식 개선전 코드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRomanNumeral</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.matches(<span class="string">&quot;^(?=.)M*(C[MD]|DC&#123;0,3&#125;)&quot;</span>)a + <span class="string">&quot;(X[CL]|L?X&#123;0,3&#125;)(I[XV]|V?&#123;0,3&#125;$)&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>정규표현식 개선후 코드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RomanNumerals</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern ROMAN = Pattern.compile(<span class="string">&quot;^(?=.)M*(C[MD]|DC&#123;0,3&#125;)&quot;</span>)a + <span class="string">&quot;(X[CL]|L?X&#123;0,3&#125;)(I[XV]|V?&#123;0,3&#125;$&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRomanNumeral</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">reutrn ROMAN.matcher(s).matches(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>개선전 코드의 String.matches는 정규표현식으로 문자열 형태를 확인하는 가장 쉬운 방법이지만, 성능이 중요한 상황에서 반복해 사용하기엔 적합하지 않다. </li><li>개선후 코드이 Pattern객체는 한번 쓰고나서 곧바로 GC 대상으로 잡힌다. Pattern객체는 입력받은 정규표현식에 해당하는 유한 상태 머신을 만들기때문에 인스턴스 생성비용이 높다. 따라서 이부분을 개선하려면, 정규표현식을 표현하는 변수를 클래스 초기화 즉 정적 초기화(static final)하여 직접 생성해 캐싱해두고, 나중에 isRomanNumeral메서드가 호출될때 인스턴스를 재사용하도록 한다.</li><li>불필요한 객체를 만드는 또다른 예는 ‘오토박싱’이다. 아래 코드로 확인해보자 </li></ul><figure class="highlight java"><figcaption><span>정규표현식 개선후 코드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Long sum = <span class="number">0L</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> i = <span class="number">0</span>; i &lt;= Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">sum += i; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위 코드는 sum을 오토박싱해서 사용하고 있는데, 이부분은 결국 Long인스턴스변수를 계속 생성하고 있기때문에 성능저하를 유발한다. </li><li>박싱된 기본타입보다는 기본 타입을 사용하고, 의도치 않은 오토박싱이 숨어들지 않도록 주의해야함. </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;불필요한-객체-생성을-피하라&quot;&gt;&lt;a href=&quot;#불필요한-객체-생성을-피하라&quot; class=&quot;headerlink&quot; title=&quot;불필요한 객체 생성을 피하라&quot;&gt;&lt;/a&gt;불필요한 객체 생성을 피하라&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;String객체를 인스</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Effective Java" scheme="https://codexdawn.github.io/categories/Effective-Java/"/>
    
    <category term="객체 생성과 파괴" scheme="https://codexdawn.github.io/categories/%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%8C%8C%EA%B4%B4/"/>
    
    
    <category term="Java,EffectiveJava" scheme="https://codexdawn.github.io/tags/Java-EffectiveJava/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-11</title>
    <link href="https://codexdawn.github.io/2021/02/22/clean-code-11/"/>
    <id>https://codexdawn.github.io/2021/02/22/clean-code-11/</id>
    <published>2021-02-22T12:34:47.000Z</published>
    <updated>2021-02-22T13:50:51.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="창발성"><a href="#창발성" class="headerlink" title="창발성"></a>창발성</h1><blockquote><p><a href="https://terms.naver.com/entry.nhn?docId=4383255&cid=40942&categoryId=31528">창발성</a> : 하위 체계로부터 생겨나지만, 그 하위 체계로 환원되지 않는 속성을 말한다. (네이버사전 참고)</p></blockquote><h2 id="창발적-설계로-깔끔한-코드를-구현하자"><a href="#창발적-설계로-깔끔한-코드를-구현하자" class="headerlink" title="창발적 설계로 깔끔한 코드를 구현하자"></a>창발적 설계로 깔끔한 코드를 구현하자</h2><blockquote><p>켄트백 아저씨의 4가지 소프트웨어 설계 규칙 </p><ul><li>모든 테스트를 실행한다.</li><li>중복을 없앤다.</li><li>프로그래머 의도를 표현한다.</li><li>클래스와 메서드 수를 최소로 줄인다. </li></ul><p>켄트백 아저씨는 저 4가지 규칙을 잘 지키면 ‘단순하다’ 라고 말한다.<br>그리고 위 목록은 중요도 순서다. </p></blockquote><h2 id="단순한-설계-규칙-1-모든-테스트를-실행-하라"><a href="#단순한-설계-규칙-1-모든-테스트를-실행-하라" class="headerlink" title="단순한 설계 규칙 1: 모든 테스트를 실행 하라."></a>단순한 설계 규칙 1: 모든 테스트를 실행 하라.</h2><ul><li><p>테스트를 철저히 거쳐 모든 테스트 케이스를 항상 통과하는 시스템은 ‘테스트가 가능한 시스템’이다. 반대로 테스트가 불가능한 시스템은 검증도 불가능하다. </p><blockquote><p>설계 품질을 애쓴다는건 무엇을 하는걸까?</p><ul><li>크기가 작고 목적 하나만 수행하는 클래스를 만드려고 노력한다. SRP는 테스트가 훨씬 쉽다. </li><li>결합도가 높히지 않고, 응집도를 높이려 노력한다. (테스트케이스 많이 작성,DIP적용,DI,인터페이스,추상화 등을 통해 결합도 낮추도록 한다)</li></ul></blockquote></li><li><p>결론은 ‘테스트 케이스를 만들고 계속 돌려라’라는 간단한 규칙을 말한다. </p></li></ul><h2 id="단순한-설계-규칙-2-2-4-리팩터링"><a href="#단순한-설계-규칙-2-2-4-리팩터링" class="headerlink" title="단순한 설계 규칙 2: 2~4 리팩터링"></a>단순한 설계 규칙 2: 2~4 리팩터링</h2><ul><li>테스트 케이스를 모두 작성했다면, 코드와 클래스를 정리해도 괜춘함. 점진적 리팩토링이 필요한 시점이 된다. </li><li>테스트 케이스가 모두 작성되었기 때문에, 코드를 정리하면서 시스템이 깨질까 걱정할 필요는 전혀 없게 된다. </li></ul><h2 id="중복을-없애라"><a href="#중복을-없애라" class="headerlink" title="중복을 없애라"></a>중복을 없애라</h2><ul><li>우수한 설계에서 중복은 커다란 적이다. 중복은 추가 작업, 추가 위험, 불필요한 복잡도를 뜻하기 때문 </li><li>깔끔한 시스템을 만들려면 단 몇줄이라도 중복을 제거하겠다는 의지가 필요하다. 아래 코드를 살펴보자.</li></ul><figure class="highlight java"><figcaption><span>개선전 코드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scaleToOneDimension</span><span class="params">(<span class="keyword">float</span> desiredDimension, <span class="keyword">float</span> imageDimension)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Math.abs(desiredDimension - imageDimension) &lt; errorThreshold) &#123;</span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> scalingFactor = desiredDimension / imageDimension; </span><br><span class="line">scalingFactor = (<span class="keyword">float</span>) (Math.floor(scalingFactor * <span class="number">100</span>) * <span class="number">0.01f</span>); </span><br><span class="line"></span><br><span class="line">RenderOp newImage = ImageUtilities.getScaledImage(image,saclingFactor,scalingFactor);</span><br><span class="line">imgage.dispose();</span><br><span class="line">System.gc();</span><br><span class="line">image = newImage; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> degrees)</span> </span>&#123;</span><br><span class="line">RenderdOp newImage = ImageUtilities.getRoatedImage(image,degrees); </span><br><span class="line">image.dispose();</span><br><span class="line">System.gc();</span><br><span class="line">image = newImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>개선후 코드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scaleToOneDimension</span><span class="params">(<span class="keyword">float</span> desiredDimension, <span class="keyword">float</span> imageDimension)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Math.abs(desiredDimension - imageDimension) &lt; errorThreshold) &#123;</span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> scalingFactor = desiredDimension / imageDimension; </span><br><span class="line">scalingFactor = (<span class="keyword">float</span>) (Math.floor(scalingFactor * <span class="number">100</span>) * <span class="number">0.01f</span>); </span><br><span class="line"></span><br><span class="line">RenderOp newImage = replaceImage(ImageUtilities.getScaledImage(image,saclingFactor,scalingFactor));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> degrees)</span> </span>&#123;</span><br><span class="line">replaceImage(ImageUtilities.getRotatedImage(image,degrees));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceImage</span><span class="params">(RenderedOp newImage)</span> </span>&#123;</span><br><span class="line">image.dispose();</span><br><span class="line">System.gc();</span><br><span class="line">image = newImage; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>공통적인 코드를 새 메서드로 뽑고보니, 클래스가 SRP를 위반함. replaceImage메서드가 변경되면, getScaledImage,getRotatedImage 메서드가 변경될수 있기때문에, 두가지 책임이 부여가된다. </li><li>replaceImage 메서드를 공통으로 호출하도록 클래스로 분리시켜야한다. 분리시키면, 새 메서드의 가시성이 높아지고, 재사용의 기회가 주어진다. </li><li>Template Method 패턴은 고차원 중복을 제거할 목적으로 자주 사용되는 기법이다. 아래 예를 보자 </li></ul><figure class="highlight java"><figcaption><span>템플릿메서드패턴 적용전</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VacationPolicy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accueUSDivisionVacation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//지금까지 근무한 시간을 바탕으로 휴가 일수를 계산하는 코드 </span></span><br><span class="line"><span class="comment">// ..중략..</span></span><br><span class="line"><span class="comment">//휴가 일수가 미국 최소 법정 일수를 만족하는지 확인하는 코드 </span></span><br><span class="line"><span class="comment">// ..중략..</span></span><br><span class="line"><span class="comment">//휴가 일수를 급여 대장에 적용하는 코드 </span></span><br><span class="line"><span class="comment">// ..중략..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accueEUDivisionVacation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//지금까지 근무한 시간을 바탕으로 휴가 일수를 계산하는 코드 </span></span><br><span class="line"><span class="comment">// ..중략..</span></span><br><span class="line"><span class="comment">//휴가 일수가 유럽연합 최소 법정 일수를 만족하는지 확인하는 코드 </span></span><br><span class="line"><span class="comment">// ..중략..</span></span><br><span class="line"><span class="comment">//휴가 일수를 급여 대장에 적용하는 코드 </span></span><br><span class="line"><span class="comment">// ..중략..</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위 코드에서 최소 법정 일수를 계산하는 코드만 제외하면 두 메서드는 동일함. </li></ul><figure class="highlight java"><figcaption><span>템플릿메서드패턴 적용후</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VacationPolicy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accueVacation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">calculateBaseVacationHours();</span><br><span class="line">alterForLegalMinimums();</span><br><span class="line">applyToPayroll(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculateBaseVacationHours</span><span class="params">()</span> </span>&#123;<span class="comment">/*...중략...*/</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">alterForLegalMinimums</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">applyToPayroll</span><span class="params">()</span> </span>&#123;<span class="comment">/*...중략...*/</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">USVacationPolicy</span> <span class="keyword">extends</span> <span class="title">VacationPolicy</span> </span>&#123;</span><br><span class="line"><span class="meta">@Overrride</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">alterForLegalMinimums</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 미국 최소 법정 일수를 사용한다.  </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EUVacationPolicy</span> <span class="keyword">extends</span> <span class="title">VacationPolicy</span> </span>&#123;</span><br><span class="line"><span class="meta">@Overrride</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">alterForLegalMinimums</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 유럽연합 최소 법정 일수를 사용한다.  </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>하위 클래스는 중복되지 않는 정보만 제공해 accueVacation 알고리즘에서 빠진 ‘구멍’을 메운다. </li></ul><h2 id="표현하라"><a href="#표현하라" class="headerlink" title="표현하라"></a>표현하라</h2><p>개발자의 의도를 분명히 표현하는 방법 4가지! </p><ol><li>좋은 이름을 선택한다 : 이름과 기능이 완전이 딴판인 클래스나 함수로 유지보수 담당자를 놀라게 해서는 안된다. </li><li>함수와 클래스 크기를 가능한 줄인다. : 작은 클래스와 작은 함수는 이름 짓기도 쉽고, 구현하기도 쉽고, 이해하기도 쉽다.</li><li>표준 명칭을 사용한다. : 예를들어, 디자인 패턴은 의사소통과 표현력 강화가 주요 목적이다. 클래스가 COMMAND나 VISITOR와 같은 표전 패턴을 사용해 구현된다면, 클래스 이름에 패턴 이름을 넣어준다. 그러면 다른 개발자가 클래스 설계 의도를 이해하기 쉬워진다.</li><li>단위 테스트 케이스를 꼼꼼히 작성한다. : 테스트 케이스는 소위 예제로 보여주는 문서다. 다시 말해, 잘 만든 테스트케이스를 읽어보면 클래스 기능이 한눈에 들어온다. </li></ol><ul><li>위 규칙도 중요하지만 결론은 나중에 다른 개발자들이 내 코드를 보고 잘 이해시킬수 있도록 충분한 고민과 노력이 필요함. </li></ul><h2 id="클래스와-메서드-수를-최소로-줄여라"><a href="#클래스와-메서드-수를-최소로-줄여라" class="headerlink" title="클래스와 메서드 수를 최소로 줄여라"></a>클래스와 메서드 수를 최소로 줄여라</h2><ul><li>중복을 제거하고, 의도를 표현하고, SRP를 준수한다는 기본적인 개념도 극단으로 치달으면 득보다 실이 더 많아진다. 클래스와 메서드 크기를 줄이자고 조그만 클래스와 메서드를 수없이 만드는 사례도 없지 않다. 그래서 이 규칙은 함수와 클래스 수를 가능한 줄이라고 제안함. </li><li>목표는 함수 와 클래스 크기를 작게 유지하면서, 동시에 시스템 크기도 작게 유지하는데 있지만, 이 규칙은 설계 규칙 4가지중 가장 우선순위가 낮다. 결론은 테스트 케이스를 만들고 중복을 제거하고 의도를 표현하는 작업이 더 중요하다는 뜻 </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;창발성&quot;&gt;&lt;a href=&quot;#창발성&quot; class=&quot;headerlink&quot; title=&quot;창발성&quot;&gt;&lt;/a&gt;창발성&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://terms.naver.com/entry.nhn?docId=43832</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="창발성" scheme="https://codexdawn.github.io/categories/%EC%B0%BD%EB%B0%9C%EC%84%B1/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-10</title>
    <link href="https://codexdawn.github.io/2021/02/20/clean-code-10/"/>
    <id>https://codexdawn.github.io/2021/02/20/clean-code-10/</id>
    <published>2021-02-20T06:20:33.000Z</published>
    <updated>2021-02-20T10:03:44.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="시스템"><a href="#시스템" class="headerlink" title="시스템"></a>시스템</h1><blockquote><p>복잡성은 죽음이다. 개발자에게서 생기를 앗아가며, 제품을 계획하고 제작하고 테스트하기 어렵게 만든다. </p></blockquote><h2 id="도시를-세운다면"><a href="#도시를-세운다면" class="headerlink" title="도시를 세운다면 ?"></a>도시를 세운다면 ?</h2><ul><li>도시는 한사람의 힘으로 운영하기 힘들다. 수도관리팀, 전력관리팀 등 각분야를 관리하는 크고 작은 조직들이 존재한다. 이렇게 도시가 잘 운영되는 비결은 적절한 <strong>추상화</strong> 와 <strong>모듈화</strong> 때문이다. 그래서 큰 그림을 이해하지 못할지라도 개인과 개인이 관리하는 ‘구성요소’는 효율적으로 돌아간다. </li><li>흔히 소프트웨어 팀도 도시처럼 구성한다. </li></ul><h2 id="시스템-제작과-시스템-사용을-분리하라"><a href="#시스템-제작과-시스템-사용을-분리하라" class="headerlink" title="시스템 제작과 시스템 사용을 분리하라."></a>시스템 제작과 시스템 사용을 분리하라.</h2><ul><li>제작(construction)은 사용과 아주 다르다. </li></ul><blockquote><p>소프트웨어 시스템은 (어플리케이션 객체를 제작하고 <strong>의존성</strong> 을 서로 ‘연결’하는) 준비과정(준비과정 이후에 이어지는) 런타임 로직을 분리해야 한다.  </p></blockquote> <ul><li>소프트웨어 설계의 시작단계는 ‘관심사’다. 곧 <a href="https://ko.wikipedia.org/wiki/%EA%B4%80%EC%8B%AC%EC%82%AC_%EB%B6%84%EB%A6%AC#:~:text=%EC%BB%B4%ED%93%A8%ED%84%B0%20%EA%B3%BC%ED%95%99%EC%97%90%EC%84%9C%20%EA%B4%80%EC%8B%AC%EC%82%AC%20%EB%B6%84%EB%A6%AC,%EC%9D%98%20%EA%B4%80%EC%8B%AC%EC%82%AC%EB%A5%BC%20%ED%95%B4%EA%B2%B0%ED%95%9C%EB%8B%A4.&text=%EA%B4%80%EC%8B%AC%EC%82%AC%20%EB%B6%84%EB%A6%AC%EB%A5%BC%20%EC%9D%B4%EC%9A%A9%ED%95%98%EB%A9%B4,%EC%A0%95%EB%8F%84%EC%9D%98%20%EC%9E%90%EC%9C%A0%EA%B0%80%20%EC%83%9D%EA%B8%B4%EB%8B%A4.">‘관심사 분리’</a>를 의미한다. </li></ul><figure class="highlight java"><figcaption><span>lazy evaluation</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Service <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(service == <span class="keyword">null</span>) &#123;</span><br><span class="line">service = <span class="keyword">new</span> MyServiceImpl(...); <span class="comment">//모든상황에 기본값일까? </span></span><br><span class="line"><span class="keyword">return</span> service; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Q&gt; lazy evaluation(계산지연)의 장점</p><ol><li>실제 필요할때까지 객체를 생성 안함.</li><li>NullPointerException이 발생 안함. </li></ol></blockquote><h4 id="위-코드는-lazy-evaluation의-장점을-갖지만-단점은-무엇일까"><a href="#위-코드는-lazy-evaluation의-장점을-갖지만-단점은-무엇일까" class="headerlink" title="위 코드는 lazy evaluation의 장점을 갖지만 단점은 무엇일까?"></a>위 코드는 lazy evaluation의 장점을 갖지만 단점은 무엇일까?</h4><ul><li>MyServiceImpl에서 생략한 생성자 인수에 명시적으로 의존한다. 런타임 로직에서 의존성을 해결하지 않으면 컴파일이 안됨</li><li>테스트 문제 MyServiceImpl객체가 무거운 객체라면 즉, 의존하는 객체가 많다면, 의존하는 테스트 전용 객체(Mock Object)를 service필드에 할당을 해야한다. </li><li>일반 런타임 로직에다 객체 생성 로직을 섞어 놓은 탓에 service가 null인 경로 null이 아닌경로 등의 모든 실행경로를 테스트해야함. </li><li>책임이 둘이라는 말은 메서드가 작업을 두가지 이상 수행한다는 의미로 SRP를 위반함. </li><li>가장 큰 문제는 주석 처럼 모든상황에 적합할지 여부이다. </li></ul><h4 id="체계적이고-탄탄한-시스템을-만들고-싶다면"><a href="#체계적이고-탄탄한-시스템을-만들고-싶다면" class="headerlink" title="체계적이고 탄탄한 시스템을 만들고 싶다면?"></a>체계적이고 탄탄한 시스템을 만들고 싶다면?</h4><ul><li>lazy evaluation 같이 손쉬운 기법으로 모듈성을 깨서는 절대로 안됨. (객체를 생성하거나 의존성을 연결할때도 마찬가지) </li><li>설정 논리는 일반 실행 논리와 분리해야 모듈성이 높아진다. </li><li>주요 의존성을 해소하기 위한 방식은, 즉 전반적이며 일관적인 방식도 필요하다. </li></ul><h3 id="Main분리"><a href="#Main분리" class="headerlink" title="Main분리"></a>Main분리</h3><ul><li>Main분리는 시스템 생성과 시스템 사용을 분리하는 방법으로, 생성과 관련된 코드는 main 이나 main이 호출하는 모듈로 옮기고, 나머지 시슽메은 모든 객체가 생성되었고 모든 의존성이 연결되었다고 가정한다. </li></ul><h3 id="팩토리"><a href="#팩토리" class="headerlink" title="팩토리"></a>팩토리</h3><ul><li>객체가 생성되는 시점을 애플리케이션이 결정할 필요도 생기는데, 이때는 추상 팩토리 패턴(Abstract Factory)을 사용한다. </li></ul><h3 id="의존성-주입-Dependency-Injection"><a href="#의존성-주입-Dependency-Injection" class="headerlink" title="의존성 주입 (Dependency Injection)"></a>의존성 주입 (Dependency Injection)</h3><ul><li>사용과 제작을 분리하는 강력한 메커니즘 하나가 <a href="https://ko.wikipedia.org/wiki/%EC%9D%98%EC%A1%B4%EC%84%B1_%EC%A3%BC%EC%9E%85">의존성 주입</a> 이다.</li><li>의존성 주입은 제어 역전(IoC) 기법을 의존성 관리에 적용한 메커니즘이다. 제어역전은 한 객체가 맡은 보조 책임을 새로운 객체에게 전적으로 떠넘김. </li><li><strong>새로운 객체는 넘겨받은 책임만 맡으므로 SRP를 지키게됨.</strong> 의존성 관리 맥락에서는 객체는 의존성 자체를 인스턴스로 만드는 책임은 지지 않는다. 대신에 이런 책임을 다른 전담 메커니즘에 넘겨야만 한다. 그렇게 함으로써 제어를 역전한다. 전담 메커니즘으로는 main루틴이나 특수 컨테이너 대표적으로 spring framework같은게 있겠다. </li></ul><h2 id="확장"><a href="#확장" class="headerlink" title="확장"></a>확장</h2><blockquote><p>소프트웨어 시스템은 물리적인 시스템과 다르다. 관심사를 적절히 분리해 관리한다면 소프트웨어 아키텍처는 점진적으로 발전 할수 있다.    </p></blockquote><h3 id="횡단-관심사-cross-cutting"><a href="#횡단-관심사-cross-cutting" class="headerlink" title="횡단 관심사 (cross-cutting)"></a>횡단 관심사 (cross-cutting)</h3><ul><li>영속성과 같은 관심사는 애플리케이션의 자연스러운 객체 경계를 넘나드는 경향이 있다. </li><li>대표적인 횡단 관심사를 사용하는 개념이 <a href="https://ko.wikipedia.org/wiki/%EA%B4%80%EC%A0%90_%EC%A7%80%ED%96%A5_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D#:~:text=%EC%BB%B4%ED%93%A8%ED%8C%85%EC%97%90%EC%84%9C%20%EA%B4%80%EC%A0%90%20%EC%A7%80%ED%96%A5%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D,%EA%B2%83%EC%9D%B4%20%EB%AA%A9%EC%A0%81%EC%9D%B8%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84%EC%9D%B4%EB%8B%A4.">AOP</a> 이다. </li></ul><h2 id="자바-프록시"><a href="#자바-프록시" class="headerlink" title="자바 프록시"></a>자바 프록시</h2><ul><li>자바 프록시는 단순한 상황에 적합하다. 개별객체나 클래스에서 메서드 호출을 감싸는 경우가 좋은 예다. 하지만 JDK에서 제공하는 동적 프록시는 인터페이스만 지원한다. 클래스 프록시를 사용하려면 CGLIB,ASM,Javassist 등과 같은 바이트 코드 처리 라이브러리가 필요함. </li><li>코드 양과 크기는 프록시의 두가지 단점이다. 결국 프록시로는 깨끗한 코드를 작성하기 어려움 또한 프록시는 시스템 단위로 실행 ‘지점’을 명시하는 메커니즘도 제공하지 않는다. </li></ul><h2 id="순수-자바-AOP-프레임워크"><a href="#순수-자바-AOP-프레임워크" class="headerlink" title="순수 자바 AOP 프레임워크"></a>순수 자바 AOP 프레임워크</h2><ul><li>다행스럽게 대부분의 프록시 코드는 판박이라 도구로 자동화 할수 있다. 순수 자바 관점을 구현하는 스프링 AOP, JBoss AOP 등과 같은 여러 자바 프레임워크는 내부적으로 프록시를 사용한다. </li></ul><h2 id="AspectJ-관점"><a href="#AspectJ-관점" class="headerlink" title="AspectJ 관점"></a>AspectJ 관점</h2><ul><li><a href="https://ko.wikipedia.org/wiki/AspectJ">AspectJ</a>는 관점을 분리하는 강력하고 풍부한 도구 집합을 제공하지만, 새 도구를 활용하고 새 언어 문법과 사용법을 익혀야 한다는 단점이 있음. </li></ul><h2 id="테스트-주도-시스템-아키텍처-구축"><a href="#테스트-주도-시스템-아키텍처-구축" class="headerlink" title="테스트 주도 시스템 아키텍처 구축"></a>테스트 주도 시스템 아키텍처 구축</h2><blockquote><p>최선의 시스템 구조는 각기 POJO(또는 다른) 객체로 구현되는 모듈화된 관심사 영역(도메인)으로 구성된다. 이렇게 서로 다른 영역은 해당 영역 코드에 최소한의 영향을 미치는 관점이나 유사한 도구를 사용해 통합한다. 이런 구조 역시 코드와 마찬가지로 테스트 주도 기법을 적용할수 있다. </p></blockquote><ul><li>건축은 BDUF(Big Design Up Front) 방식을 취한다. 즉, 구현을 시작하기 전에 앞으로 벌어질 모든 사항을 설계하는 기법인데, 소프트웨어 개발은 BDUF방식이 매우 해롭다 (EJB가 왜 망했는지, Spring Framework가 왜 흥할수밖에 없었는지 생각해보면 알듯하다.)</li></ul><h2 id="의사-결정을-최적화-하라"><a href="#의사-결정을-최적화-하라" class="headerlink" title="의사 결정을 최적화 하라"></a>의사 결정을 최적화 하라</h2><blockquote><p>관심사를 모듈로 분리한 POJO시스템은 기민함(게으른)을 제공한다. 이런 기만함 덕택에 최신 정보에 기반해 최선의 시점에 최적의 결정을 내리기가 쉬워진다. 또한 결정의 복잡성도 줄어든다.  </p></blockquote><h2 id="명백한-가치가-있을때-표준을-현명하게-사용하라"><a href="#명백한-가치가-있을때-표준을-현명하게-사용하라" class="headerlink" title="명백한 가치가 있을때 표준을 현명하게 사용하라"></a>명백한 가치가 있을때 표준을 현명하게 사용하라</h2><blockquote><p>표준을 사용하면 아이디어와 컴포넌트를 재사용하기 쉽고, 적절한 경험을 가진 사람을 구하기 쉬우며, 좋은 아이디어를 캡슐화하기 쉽고, 컴포넌트를 엮기 쉽다. 하지만 때로는 표준을 만드는 시간이 너무 오래 걸려 업계가 기다리지 못한다. 어떤 표준은 원래 표준을 제정한 목적을 잊어버리기도 한다.</p></blockquote><ul><li>EJB2는 단지 표준이라는 이유만으로 아주 많은 팀이 사용했음. 심지어 가벼운 프로젝트도 EJB2를 채택함. 하지만 EJB2의 무거운 시스템 과 오버엔지니어링된 시스템을 아주 과장되게 포장된 표준에 집착하는 바람에 고객 가치가 뒷전으로 밀려난 사례가 많았음.</li></ul><h2 id="시스템은-도메인-특화-언어가-필요하다-DSL"><a href="#시스템은-도메인-특화-언어가-필요하다-DSL" class="headerlink" title="시스템은 도메인 특화 언어가 필요하다. (DSL)"></a>시스템은 도메인 특화 언어가 필요하다. (DSL)</h2><ul><li>DSL은 간단한 스크립트 언어나 표준 언어로 구현한 API를 가리킨다. DSL코드로 짠 코드는 도메인 전문가가 작성한 구조적인 산문처럼 읽힌다. </li><li>좋은 DSL은 도메인 개념과 그 개념을 구현한 코드사이에 존재하는 의사소통 간극을 줄여준다. (애자일 기법이 팀과 프로젝트 이해관계자 사이에 의사소통 간극을 줄여줌.)</li><li>효과적으로 DSL을 활용하면 추상화 수준을 코드 관용구나 디자인 패턴 이상으로 끌어올릴수있음. 그래서 개발자가 적절한 추상화 수준에서 코드 의도를 표현 가능함. </li></ul><blockquote><p>DSL을 사용하면 고차원 정책에서 저차원 세부사항까지 모든 추상화 수준과 모든 도메인을 POJO로 표현가능함. </p></blockquote><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>깨끗하지 못한 아키텍처는 도메인 논리를 흐리며 기민성을 떨어뜨린다. (제품품질 저하, 버그유발상승)</li><li>모든 추상화 단계에서 의도는 명확히 표현해야함. 그러려면 POJO를 작성하고 관점 혹은 관점과 유사한 매커니즘을 사용해 각 구현 관심사를 분리해야함.(AOP)</li><li>시스템을 설계하든 개별 모듈을 설계하든, 실제로 돌아가는 가장 단순한 수단을 사용해야 한다는 사실을 명심. (EJB -&gt; Spring framework, JPA)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;시스템&quot;&gt;&lt;a href=&quot;#시스템&quot; class=&quot;headerlink&quot; title=&quot;시스템&quot;&gt;&lt;/a&gt;시스템&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;복잡성은 죽음이다. 개발자에게서 생기를 앗아가며, 제품을 계획하고 제작하고 테스트하기 어렵게 만든</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="시스템" scheme="https://codexdawn.github.io/categories/%EC%8B%9C%EC%8A%A4%ED%85%9C/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-9</title>
    <link href="https://codexdawn.github.io/2021/02/16/clean-code-9/"/>
    <id>https://codexdawn.github.io/2021/02/16/clean-code-9/</id>
    <published>2021-02-16T09:34:14.000Z</published>
    <updated>2021-02-16T12:53:47.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="클래스"><a href="#클래스" class="headerlink" title="클래스"></a>클래스</h1><h2 id="클래스-체계"><a href="#클래스-체계" class="headerlink" title="클래스 체계"></a>클래스 체계</h2><ul><li>클래스 내부 체계 순서 </li></ul><ol><li><p>변수 목록<br>public static final -&gt; private static final -&gt; 인스턴스 변수 </p></li><li><p>공개함수 </p></li><li><p>비공개 함수 </p></li></ol><ul><li>3장 함수에서 익혔듯이, 비공개 함수는 자신을 호출하는 공개 함수 직후에 넣는다. 즉, 추상화 단계가 순차적으로 내려감 (신문기사 처럼 작성)</li></ul><h3 id="캡슐화"><a href="#캡슐화" class="headerlink" title="캡슐화"></a>캡슐화</h3><ul><li>변수와 유틸리티 함수는 가능한 공개하지 않는 편이 좋음 (그렇다고 반드시 숨겨야하는 법칙은 없음.)</li><li>테스트를 하려면 접근제한자가 protected 혹은 public으로 해야한다. 하지만 가급적이면 비공개 상태를 유지하는 방법에 최선을 다해야함. </li><li>캡슐화를 풀어주는 결정은 언제나 최후의 보루라는 마음가짐자세가 필요. </li></ul><h2 id="클래스는-작아야-한다"><a href="#클래스는-작아야-한다" class="headerlink" title="클래스는 작아야 한다!"></a>클래스는 작아야 한다!</h2><ul><li>클래스를 만들때 첫번째 규칙은 크기다. 클래스는 작아야한다! 최대한 작아야한다! </li><li>함수는 물리적인 행 수로 크기를 측정했다면, 클래스는 맡은 책임을 카운트한다. (RDD)</li><li>클래스 이름은 해당 클래스 책임을 기술해야함. 실제로 작명은 클래스 크기를 줄이는 첫번째 관문! (EX&gt; Processor, Manager, Super 등과 같은 단어가 클래스명에 있다면 여러 책임을 떠안고 있다는 증거다.)</li><li>클래스의 설명은 if, and, or, but,~하며 등을 사용하지 않고, 25단어 내외로 설명이 가능해야함. </li></ul><figure class="highlight java"><figcaption><span>충분히 작을까? -기존 70개메서드를 5개로 줄였지만?</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperDashboard</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">MetaDataUser</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Component <span class="title">getLastFocusedComponent</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastFocused</span><span class="params">(Component lastFocused)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMajorVersionNumber</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinorVersionNumber</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBuildNumber</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="단일-책임의-원칙-SRP"><a href="#단일-책임의-원칙-SRP" class="headerlink" title="단일 책임의 원칙 (SRP)"></a>단일 책임의 원칙 (SRP)</h3><ul><li>SRP는 클래스나 모듈을 변경할 이유가 하나! 단 하나뿐이어야 한다는 원칙이다. </li></ul><blockquote><p>Q&gt; SuperDashboard 클래스에서 변경해야할 이유가 두가지인데 그 두가지는 무엇일까? </p><ol><li>소프트웨어 버전 : 버전 정보는 소프트웨어 출시할 때마다 달라짐. </li><li>자바 스윙 컴포넌트를 관리 : 스윙 코드를 변경 할때마다 버전 번호가 달라짐. </li></ol><p>Q&gt; SuperDashboard 클래스를 SRP 원칙을 적용하려면? </p><ol><li>버전 정보를 관리하는 메서드를 Version클래스로 분리한다. </li></ol></blockquote><ul><li>큰 클래스 몇개가 아니라 작은 클래스 여럿으로 이뤄진 시스템이 더 바람직함. 작은 클래스는 각자 맡은 책임이 하나며, 변경할 이유가 하나며, 다른 작은 클래스와 협력해 시스템에 필요한 동작을 수행한다. </li></ul><h3 id="응집도-Cohesion"><a href="#응집도-Cohesion" class="headerlink" title="응집도 (Cohesion)"></a>응집도 (Cohesion)</h3><ul><li>클래스는 인스턴스 변수 수가 작아야 한다. </li></ul><blockquote><p>Q&gt; 응집도가 높은 것은? </p><ol><li>메서드가 변수를 더 많이 사용할수록 메서드와 클래스는 응집도가 더 높다.</li><li>모든 인스턴스 변수를 메서드마다 사용하는 클래스는 응집도가 가장 높다. </li><li>Stack이 응집도가 높은 클래스예시중 하나다. </li></ol></blockquote><ul><li>‘함수를 작게, 매개변수 목록을 짧게!’라는 전략을 따르다보면, 때때로 몇몇 메서드만이 사용하는 인스턴스 변수가 아주 많아진다. 이는 십중팔구 새로운 클래스로 쪼개야 한다는 신호다. </li><li>응집도가 높아질수록 변수와 메서드를 적절히 분리해 새로운 클래스 두세 개로 쪼개준다. </li></ul><h3 id="응집도를-유지하면-작은-클래스-여럿이-나온다"><a href="#응집도를-유지하면-작은-클래스-여럿이-나온다" class="headerlink" title="응집도를 유지하면 작은 클래스 여럿이 나온다"></a>응집도를 유지하면 작은 클래스 여럿이 나온다</h3><ul><li>큰 함수를 작은 메서드 여럿으로 나누기만 해도 클래스 수가 많아진다. </li></ul><blockquote><p>큰 함수를 작은 메서드 여럿으로 나누면 어떻게 될까? </p><ol><li>큰함수를 작은 메서드로 쪼갠다. </li><li>쪼갰더니 빼내려는 코드가 큰함수에 정의된 변수 넷을 사용한다.</li><li>그렇다면 변수 4개를 새 함수에 인수로 넘겨야할까? NO! </li><li>4개의 변수를 인스턴스 변수로 승격 시킨다면 새 함수는 인수가 필요 없게됨. 그만큼 함수를 쪼개기 쉬워진다. </li><li>위와 같이 쪼개고, 인스턴스변수로 승격시키면 응집력을 잃어버리게 된다. (몇몇 함수만 사용하는 인스턴스 변수가 점점 더 늘기 때문)</li><li>하지만!!! 몇몇 함수가 몇몇 변수만 사용한다면 독자적인 클래스로 분리해도 되지 않을까? YES!</li><li>클래스가 응집력을 잃는다면 클래스를 쪼개라!!!</li></ol></blockquote><ul><li>응집도 높은클래스로 만들기 위해서는 잘 쪼개야 하는데, 쪼개면서 테스트 슈트를 작성해 수없이 테스트해서 나누는 방법이 필요. </li></ul><h2 id="변경하기-쉬운-클래스"><a href="#변경하기-쉬운-클래스" class="headerlink" title="변경하기 쉬운 클래스"></a>변경하기 쉬운 클래스</h2><ul><li>대다수 시스템은 지속적인 변경이 가해진다. 그리고 뭔가 변경할때마다 시스템이 의도대로 동작하지 않을 위험이 따른다. </li><li>깨끗한 시스템은 클래스를 체계적으로 정리해 변경에 수반하는 위험을 낮춘다. </li></ul><figure class="highlight java"><figcaption><span>변경이 필요해 손대야 하는 클래스</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sql</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sql</span><span class="params">(String table, Column[] columns)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">insert</span><span class="params">(Object[] fields)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">selectAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">findByKey</span><span class="params">(String keyColumn, String keyValue)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">select</span><span class="params">(Column column, String pattern)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">select</span><span class="params">(Criteria criteria)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> String <span class="title">preparedInsert</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">private</span> String <span class="title">columnList</span><span class="params">(Column[] columns)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">private</span> String <span class="title">valuesList</span><span class="params">(Object[] fields, <span class="keyword">final</span> Column[] columns)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">selectWithCriteria</span><span class="params">(String criteria)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">private</span> String <span class="title">placeholderList</span><span class="params">(Column[] columns)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="comment">//출처: https://velog.io/@ybg7955/Clean-Code-10%EC%9E%A5-%ED%81%B4%EB%9E%98%EC%8A%A4</span></span></span><br></pre></td></tr></table></figure><blockquote><p>Q&gt; 위 코드를 손대야하는 2가지 이유!</p><ol><li>새로운 SQL문을 지원하려면 반드시 Sql클래스에 손대야함. </li><li>기존 SQL문 하나를 수정해도 반드시 Sql클래스를 손대야함. </li></ol><p>위 두가지 이유로 SRP를 위반하고 있음.<br>만약에 가까운 장래에 update문을 추가할 필요가 없다면 굳이 손 안대도됨. </p></blockquote><figure class="highlight java"><figcaption><span>닫힌 클래스 집합</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sql</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Sql</span><span class="params">(String table, Column[] columns)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateSql</span> <span class="keyword">extends</span> <span class="title">Sql</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CreateSql</span><span class="params">(String table, Column[] columns)</span> </span></span><br><span class="line"><span class="function">@Override <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class SelectSql extends Sql </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SelectSql</span><span class="params">(String table, Column[] columns)</span> </span></span><br><span class="line"><span class="function">@Override <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class InsertSql extends Sql </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InsertSql</span><span class="params">(String table, Column[] columns, Object[] fields)</span> </span></span><br><span class="line"><span class="function">@Override <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">valuesList</span><span class="params">(Object[] fields, <span class="keyword">final</span> Column[] columns)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class SelectWithCriteriaSql extends Sql </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SelectWithCriteriaSql</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">String table, Column[] columns, Criteria criteria)</span> </span></span><br><span class="line"><span class="function">@Override <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class SelectWithMatchSql extends Sql </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SelectWithMatchSql</span><span class="params">(String table, Column[] columns, Column column, String pattern)</span> </span></span><br><span class="line"><span class="function">@Override <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class FindByKeySql extends Sql <span class="keyword">public</span> <span class="title">FindByKeySql</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">String table, Column[] columns, String keyColumn, String keyValue)</span> </span></span><br><span class="line"><span class="function">@Override <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class PreparedInsertSql extends Sql </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PreparedInsertSql</span><span class="params">(String table, Column[] columns)</span> </span></span><br><span class="line"><span class="function">@Override <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">placeholderList</span><span class="params">(Column[] columns)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class Where </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Where</span><span class="params">(String criteria)</span> <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColumnList</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ColumnList</span><span class="params">(Column[] columns)</span> <span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">generate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//출처: https://velog.io/@ybg7955/Clean-Code-10%EC%9E%A5-%ED%81%B4%EB%9E%98%EC%8A%A4</span></span><br></pre></td></tr></table></figure><blockquote><p>Q&gt; 기존 Sql클래스를 쪼갠 위 코드는 어떤 장점을 가질까? </p><ol><li>클래스 코드가 극도로 단순함</li><li>함수 하나를 수정했다고 다른 함수가 망가질 위험이 없다,</li><li>테스트 관점에서 모든 논리를 구석구석 증명하기 쉬워졌음. (클래스 분리)</li><li>update문 추가할때 기존 클래스 변경 안해도됨. </li></ol><p>위 코드는 결국 SRP 와 OCP를 잘 준수한 코드가 된다. </p></blockquote><ul><li>새 기능을 수정하거나 기존 기능을 변경할때 건드릴 코드가 최소인 시스템 구조가 바람직하다. 이상적인 시스템이라면 새 기능을 추가할때 시스템을 확장 할 뿐 기존 코드를 변경하지 않는다. </li></ul><h2 id="변경으로부터-격리"><a href="#변경으로부터-격리" class="headerlink" title="변경으로부터 격리"></a>변경으로부터 격리</h2><ul><li>요구사항은 변하기 마련이다. 따라서 코드도 변하기 마련이다. </li><li>변경으로 부터 격리를 시키는 방법은 결합도를 낮춰서 유연성과 재사용성을 높이는 코드로 만들어야한다. </li></ul><blockquote><p>Q&gt; 결합도가 낮다는건 어떤 의미일까?</p><ul><li>각 시스템 요소가 다른 요소로 부터 그리고 변경으로부터 잘 격리되어 있다는 의미</li></ul></blockquote><ul><li>결합도를 낮추면 자연스럽게 SOLID원칙의 DIP를 지킬수있다. (클래스가 상세구현이 아닌 추상화에 의존한다 라는 원칙)</li></ul><figure class="highlight java"><figcaption><span>변경으로부터 격리시킨 예제</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StockExchange</span> </span>&#123; </span><br><span class="line">    <span class="function">Money <span class="title">currentPrice</span><span class="params">(String symbol)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> Portfolio &#123;</span><br><span class="line">    <span class="keyword">private</span> StockExchange exchange;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Portfolio</span><span class="params">(StockExchange exchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exchange = exchange; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PortfolioTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> FixedStockExchangeStub exchange;</span><br><span class="line">    <span class="keyword">private</span> Portfolio portfolio;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        exchange = <span class="keyword">new</span> FixedStockExchangeStub(); </span><br><span class="line">        exchange.fix(<span class="string">&quot;MSFT&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        portfolio = <span class="keyword">new</span> Portfolio(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GivenFiveMSFTTotalShouldBe500</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        portfolio.add(<span class="number">5</span>, <span class="string">&quot;MSFT&quot;</span>);</span><br><span class="line">        Assert.assertEquals(<span class="number">500</span>, portfolio.value()); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//출처: https://data-make.tistory.com/641 [Data Makes Our Future]</span></span><br></pre></td></tr></table></figure><ul><li>Portfolio 클래스는 TokyoStockExchange라는 상세한 구현 클래스가 아니라 StockExchange 인터페이스에 의존한다. 이와 같은 추상화로 실제로 주가를 얻어오는 출처나 얻어오는 방식 등과 같은 구체적인 사실을 모두 숨긴다. (DIP를 잘 활용한 사례)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;클래스&quot;&gt;&lt;a href=&quot;#클래스&quot; class=&quot;headerlink&quot; title=&quot;클래스&quot;&gt;&lt;/a&gt;클래스&lt;/h1&gt;&lt;h2 id=&quot;클래스-체계&quot;&gt;&lt;a href=&quot;#클래스-체계&quot; class=&quot;headerlink&quot; title=&quot;클래스 체계&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="클래스" scheme="https://codexdawn.github.io/categories/%ED%81%B4%EB%9E%98%EC%8A%A4/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-8</title>
    <link href="https://codexdawn.github.io/2021/02/16/clean-code-8/"/>
    <id>https://codexdawn.github.io/2021/02/16/clean-code-8/</id>
    <published>2021-02-16T05:56:17.000Z</published>
    <updated>2021-02-16T08:12:27.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="단위-테스트"><a href="#단위-테스트" class="headerlink" title="단위 테스트"></a>단위 테스트</h1><h2 id="TDD법칙-세-가지"><a href="#TDD법칙-세-가지" class="headerlink" title="TDD법칙 세 가지"></a>TDD법칙 세 가지</h2><blockquote><p><strong>첫째 법칙</strong> : 실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다.<br><strong>둘째 법칙</strong> : 컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다.<br><strong>셋째 법칙</strong> : 현재 실패하는 테스트를 통과할 정도로만 실제코드를 작성한다. </p></blockquote><ul><li>위와 같이 일하면 매일 수 십개, 매달 수 백개, 매년 수천개에 달하는 테스트 케이스가 나온다. (결국 실제 코드를 모두 테스트하는 격이됨.)</li><li>실제 코드와 맞먹을 정도로 방대한 테스트 코드는 심각한 관리 문제를 유발하기도 한다. (그래서 테스트 케이스도 리팩토링 한다는 소리가 여기서 나옴.)</li></ul><h2 id="깨끗한-테스트-코드-유지하기"><a href="#깨끗한-테스트-코드-유지하기" class="headerlink" title="깨끗한 테스트 코드 유지하기"></a>깨끗한 테스트 코드 유지하기</h2><ul><li>실제 코드가 진화하면 테스트코드도 변경해줘야함.</li><li>테스트코드가 지저분할수록 변경하기 어려움. (테스트케이스 추가하는 시간이 실제 코드 짜는 시간보다 더 오래걸림.)</li><li>테스트코드도 실무코드 못지 않게 깨끗하게 잘 관리가 잘되어야함. (주기적인 리팩토링도 고려해야함.) </li></ul><h3 id="테스트는-유연성-유지보수성-재사용성을-제공한다"><a href="#테스트는-유연성-유지보수성-재사용성을-제공한다" class="headerlink" title="테스트는 유연성, 유지보수성, 재사용성을 제공한다."></a>테스트는 유연성, 유지보수성, 재사용성을 제공한다.</h3><ul><li>코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목은 바로 __단위테스트__다. (테스트케이스가 없다면 잠정적 버그이기 때문.)</li></ul><h2 id="깨끗한-테스트-코드"><a href="#깨끗한-테스트-코드" class="headerlink" title="깨끗한 테스트 코드"></a>깨끗한 테스트 코드</h2><ul><li>깨끗한 테스트 코드를 만드려면 무조건 <strong>가독성</strong> 이다. </li><li><a href="http://fitnesse.org/FitNesse.FullReferenceGuide.UserGuide.WritingAcceptanceTests.AcceptanceTestPatterns.BuildOperateCheck">BUILD-OPERATE-CHECK</a> 테스트 구조에 적합함.(Build : 테스트 자료를 만들고 Operate : 테스트 자료를 조작하고 Check : 잘되는지 확인)</li></ul><h3 id="도메인에-특화된-테스트-언어"><a href="#도메인에-특화된-테스트-언어" class="headerlink" title="도메인에 특화된 테스트 언어"></a>도메인에 특화된 테스트 언어</h3><ul><li>도메인에 특화된 언어 (DSL) 로 구현하여 테스트코드를 깔끔하게 유지하는게 중요. <blockquote><p><a href="https://www.jetbrains.com/ko-kr/mps/concepts/domain-specific-languages/">DSL</a>?<br>도메인 특화 언어는 관련 특정 분야에 최적화된 프로그래밍 언어입니다. DSL은 해당 분야 또는 도메인의 개념과 규칙을 사용합니다.<br>(EX&gt; SQL)</p></blockquote></li><li>DSL로 구현함에 목적은 흔히 쓰는 시스템 조작 API (저자기준으로 assertEquals)를 사용하는 대신, 함수와 유틸리티를 구현한 후 그 함수와 유틸리티를 사용하므로 테스트 코드를 짜기도 읽기도 쉬워짐.(저자기준 assertResponseIsXML,assertResponseContains)</li></ul><h3 id="이중-표준"><a href="#이중-표준" class="headerlink" title="이중 표준"></a>이중 표준</h3><ul><li>테스트 코드에 적용하는 표준은 실제 코드에 적용하는 표준과 확실히 다르다. </li><li>단순하고 간결하고 표현력이 풍부해야 하지만, 실제 코드만큼 효율적인 필요는 없다. </li><li>실제코드에 비즈니스로직을 제대로 검증하는 부분이라면, 테스트코드가 실제코드에 매핑할 필요까지는 없다는 이야기. </li></ul><h2 id="테스트당-assert-하나"><a href="#테스트당-assert-하나" class="headerlink" title="테스트당 assert 하나"></a>테스트당 assert 하나</h2><ul><li><p>JUnit 으로 테스트 코드를 짤 때는 함수마다 assert문을 단 하나만 사용해야함. (결론이 하나 이기 때문) </p></li><li><p>TDD에서 given-when-then(mockito,BDD) 법칙을 활용하는게 좋다. (테스트 코드가 일관성 있게 유지됨)</p></li><li><p>given-when-then으로 테스트코드를 짜다보면 중복코드가 많아짐.</p><blockquote><p>Q&gt; given-when-then의 중복코드 해결방법? </p><ol><li>Template Method 패턴(given/when부분을 부모클래스,then을 자식클래스) </li><li>@Before 함수에 given/when의 공통로직을 넣고, @Test함수에 then을 넣는방식 </li></ol></blockquote></li><li><p>무조건 1함수-1assert를 지킬 의무는 없지만, 가급적 지켜달라는 소리다. 필요할때는 과감하게 여러 assert도 활용할수도 있어야함. </p></li></ul><h3 id="테스트당-개념-하나"><a href="#테스트당-개념-하나" class="headerlink" title="테스트당 개념 하나"></a>테스트당 개념 하나</h3><ul><li>테스트 함수마다 한 개념만 테스트 하라. </li><li>3장 함수에서 설명했듯, 함수내에 가급적 하나의 기능만 넣도록 가이드한다. 테스트 함수도 마찬가지다! (결국 여러개의 개념이 들어갔다는건 함수가 여러 기능을 한다는 증거)</li></ul><h2 id="F-I-R-S-T"><a href="#F-I-R-S-T" class="headerlink" title="F.I.R.S.T"></a>F.I.R.S.T</h2><ul><li>Fast : 테스트는 빨라야 한다. (테스트 로직이 느려지지 않도록 성능이슈를 늘 고민해야함.)</li><li>Independent : 각 테스트는 서로 의존하면 안됨. (각 테스트는 독립적으로 그리고 어떤 순서로 실행해도 괜찮아야함.)</li><li>Repeatable : 테스트는 어떤 환경에서도 반복 가능해야함. (지속적으로 테스트가 클래스 내에 전체테스트가 돌수 있어야함.)</li><li>Self-Validating : 테스트는 Bool값으로 결과를 내야함. (성공이냐 실패냐로 판가름)</li><li>Timely : 테스트는 적시에 작성해야함. (단위 테스트는 테스트하려는 실제 코드를 구현하기 직전에 구현 해아함.)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;단위-테스트&quot;&gt;&lt;a href=&quot;#단위-테스트&quot; class=&quot;headerlink&quot; title=&quot;단위 테스트&quot;&gt;&lt;/a&gt;단위 테스트&lt;/h1&gt;&lt;h2 id=&quot;TDD법칙-세-가지&quot;&gt;&lt;a href=&quot;#TDD법칙-세-가지&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="단위 테스트" scheme="https://codexdawn.github.io/categories/%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-7</title>
    <link href="https://codexdawn.github.io/2021/02/15/clean-code-7/"/>
    <id>https://codexdawn.github.io/2021/02/15/clean-code-7/</id>
    <published>2021-02-15T13:08:46.000Z</published>
    <updated>2021-02-15T15:45:32.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="경계"><a href="#경계" class="headerlink" title="경계"></a>경계</h1><h2 id="외부-코드-사용하기"><a href="#외부-코드-사용하기" class="headerlink" title="외부 코드 사용하기"></a>외부 코드 사용하기</h2><ul><li>java.util.Map이 제공하는 기능성과 유연성은 확실히 유용하지만, 그만큼 위험도 크다. (ex&gt; clear(), 제네릭스가 없는 Map객체 -&gt; 사용자가 맘만 먹으면 어떤 객체 유형도 추가 가능)</li></ul><figure class="highlight java"><figcaption><span>Map사용 나쁜예1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map sensors = <span class="keyword">new</span> HashMap();</span><br><span class="line">Sensor s = (Sensor) sensors.get(sensorId); </span><br></pre></td></tr></table></figure><ul><li>위 코드는 Map이 반환하는 Object를 올바른 유형으로 변환할 책임은 Map을 사용하는 클라이언트에 있다. (get(sensorId)) </li><li>위 코드는 동작은 하지만, 깨끗한 코드라고 보기 어렵고, 의도도 분명히 드러나지 않는다. </li></ul><figure class="highlight java"><figcaption><span>Map사용 나쁜예2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Sensor&gt; sensors = <span class="keyword">new</span> HashMap&lt;Sensor&gt;();</span><br><span class="line">Sensor s = sensors.get(sensorId); </span><br></pre></td></tr></table></figure><ul><li>위 코드는 ‘나쁜예1’ 코드의 제네릭스로 조금 개선하여 코드 가독성을 높였지만, “Map&lt;String,Sensor&gt; 가 사용자에게 필요하지 않은 기능까지 제공한다” 라는 부분은 해결하지 못했다. </li></ul><figure class="highlight java"><figcaption><span>Map사용 개선예</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sensors</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Map sensors = <span class="keyword">new</span> HashMap(); </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Sensor <span class="title">getById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Sensor) sensors.get(id); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위 코드는 경계 인터페이스인 Map을 Sensors 안으로 숨겼다. (캡슐화) 따라서 Map 인터페이스가 변하더라도 나머지 프로그램에는 영향이 없음. </li><li>제네릭스 사용하든 안하든 문제없음.</li><li>Sensors 클래스는 프로그램에 필요한 인터페이스만 제공 (코드는 이해도 증가, 오용하기 어려움)</li><li>Sensors 클래스는 설계 규칙과 비즈니스 규칙을 따르도록 강제할수있음.(인터페이스)</li><li>저자는 Map과 같은 경계 인터페이스를 무조건 캡슐화 하라는것이 아니라, Map가지고 이용하는 클래스나 클래스 계열 밖으로 노출되지 않도록 주의해야함. </li></ul><h2 id="경계-살피고-익히기"><a href="#경계-살피고-익히기" class="headerlink" title="경계 살피고 익히기"></a>경계 살피고 익히기</h2><ul><li>외부에서 가져온 라이브러리 혹은 패키지를 사용하고 싶다면, 곧바로 우리쪽 코드를 작성해 외부 코드를 호출하는 대신 먼저 간단한 테스트 케이스를 작성해 외부코드를 익히면 그나마 수월하다고 함. (학습 테스트)</li></ul><h2 id="log4j-익히기"><a href="#log4j-익히기" class="headerlink" title="log4j 익히기"></a>log4j 익히기</h2><ul><li>‘경계 살피고 익히기’ 에서 소개한 ‘학습 테스트’를 log4j를 익히는 과정으로 ‘학습 테스트’를 설명하는 구간이다. </li><li>log.info를 띄우는 방법을 차근차근 단위 테스트를 하면서, 사용법을 익히고 어느정도 숙달이 되면, 캡슐화를 통해 log4j라는 경계 인터페이스를 몰라도 되도록 만들면, 학습 테스트를 통해 경계 인터페이스를 잘 사용할수 있음. </li></ul><h2 id="학습-테스트는-공짜-이상이다"><a href="#학습-테스트는-공짜-이상이다" class="headerlink" title="학습 테스트는 공짜 이상이다"></a>학습 테스트는 공짜 이상이다</h2><ul><li>학습 테스트는 비용이 없다. (API를 사용하려면 배워야하기 때문)</li><li>투자하는 노력보다 얻는 성과가 크다. 패키지 새 버전이 나오면 학습 테스트를 돌려 차이가 있는지 확인 한다. </li><li>학습테스트는 패키지가 예상대로 도는지 검증함. </li><li>새 버전이 우리 코드와 호환되지않으면 학습 테스트가 이 사실을 곧바로 밝혀냄 </li><li>학습테스트로 단위 테스트를 짤때, 실제 코드와 동일한 방식으로 인터페이스를 사용하는 테스트 케이스가 필요함. </li></ul><h2 id="아직-존재하지-않는-코드를-사용하기"><a href="#아직-존재하지-않는-코드를-사용하기" class="headerlink" title="아직 존재하지 않는 코드를 사용하기"></a>아직 존재하지 않는 코드를 사용하기</h2><ul><li>경계와 관련해 또 다른 유형은 아는 코드와 모르는 코드를 분리하는 경계다. </li><li>저자의 예제인 Transmitter는 Transmitter의 외부 라이브러리에 대한 지식이 전혀 없는 상태에서 차근차근 적용하는 과정을 설명한 부분이다. </li></ul><p><img src="https://nesoy.github.io/assets/posts/20180207/adapterPattern.png" alt="송신기 예측하기"></p><ol><li>자체적인 인터페이스 정의인 Transmitter 인터페이스를 만들어서, 실제로 개발해야하는 transmit 메서드를 정의함. (transmit는 주파수와 스트림을 입력으로 받음) -&gt; 인터페이스를 구현하면 전적으로 개발자가 통제한다는 장점이 생김. (가독성 증가)</li><li>CommunicationController를 통해 사용될 로직만 정의함. </li><li>상대팀이 송신기 API를 정의한후에, TransmitterAdoptor를 구현해 사용할 API를 캡슐화하여 API가 바뀔때 수정할 코드를 한곳으로 몰아넣음.</li><li>FakeTransmitter클래스를 사용하여 실제 데이터가 없이도 Mock데이터로 기능구현 가능하도록 하였음.</li><li>Transmitter API 인터페이스가 나온다음 경계 테스트 케이스를 생성해 API를 올바로 사용하는지 테스트 할 수 있음. </li></ol><h2 id="깨끗한-경계"><a href="#깨끗한-경계" class="headerlink" title="깨끗한 경계"></a>깨끗한 경계</h2><ul><li>소프트웨어 설계가 우수하다면 변경하는데 많은 투자와 재작업이 필요없다. </li><li>경계에 위치하는 코드는 깔끔히 분리한다. 또한 기대치를 정의하는 테스트 케이스도 작성한다. </li><li>이쪽 코드에서 외부 패키지를 세세하게 알아야 할 필요없음. 통제가 불가능한 외부 패키지를 의존하지말고, 인터페이스로 분리해서 독자적인 패키지를 만들자.</li><li>외부 패키지를 호출하는 코드를 가능한 줄여 경계를 관리하자. 예시로본 Map처럼 새로운 클래스로 경계를 감싸거나(캡슐화) Adaptor패턴을 이용해 우리가 원하는 인터페이스를 패키지가 제공하는 인터페이스로 변환하자. </li></ul><h2 id="Adaptor패턴"><a href="#Adaptor패턴" class="headerlink" title="Adaptor패턴"></a>Adaptor패턴</h2><ul><li>Wrapper패턴으로 불리기도함. </li><li>일반상품을 예쁜 포장지로 싸서 선물용 상품으로 만드는것 결국 무엇인가를 포장해 다른 용도로 사용할 수 있게 교환해 주는것이 wrapper이며 adaptor이다. </li></ul><ol><li>상속 (inheritant)</li></ol><ul><li>Print &lt;– PrintBanner -&gt; Banner </li></ul><ol start="2"><li>위임 (delegation)</li></ol><ul><li>Print &lt;- PrintBanner &lt;&gt;-&gt; Banner</li><li>delegation(위임)은 제어를 외부 컴포넌트를 통해 맡기는 부분. (DI와 유사함. IoC)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;경계&quot;&gt;&lt;a href=&quot;#경계&quot; class=&quot;headerlink&quot; title=&quot;경계&quot;&gt;&lt;/a&gt;경계&lt;/h1&gt;&lt;h2 id=&quot;외부-코드-사용하기&quot;&gt;&lt;a href=&quot;#외부-코드-사용하기&quot; class=&quot;headerlink&quot; title=&quot;외부 코드</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="경계" scheme="https://codexdawn.github.io/categories/%EA%B2%BD%EA%B3%84/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-6</title>
    <link href="https://codexdawn.github.io/2021/02/09/clean-code-6/"/>
    <id>https://codexdawn.github.io/2021/02/09/clean-code-6/</id>
    <published>2021-02-09T10:24:13.000Z</published>
    <updated>2021-02-09T11:57:01.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="오류처리"><a href="#오류처리" class="headerlink" title="오류처리"></a>오류처리</h1><blockquote><p>뭔가 잘못될 가능성은 늘 존재한다. 뭔가 잘못되면 바로 잡을 책임은 바로 우리 프로그래머에 있다. </p></blockquote><h2 id="예외코드보다-예외를-사용하라"><a href="#예외코드보다-예외를-사용하라" class="headerlink" title="예외코드보다 예외를 사용하라"></a>예외코드보다 예외를 사용하라</h2><ul><li>예외가 지원되지 않았을 시절에는 오류코드로 예외처리를 사용하였다. </li><li>근래 언어들이 예외처리가 지원되면서, 오류가 발생하면 예외로 던지는걸 추천하고있음. </li><li>함수 호출 즉시 오류를 확인해야하기 때문에 예외처리를 하는것을 권장 </li></ul><h2 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h2><ul><li>코드를 작성할때 시작을 강제로 예외를 일으키는 테스트 케이스를 작성후 테스트를 통과하게 코드를 작성하는 방법을 권장 그러면 자연스럽게 try 블록의 트랜잭션 뻠위부터 구현하게 되므로 범위 내에서 트랜잭션 본질을 유지하기 쉽다. </li></ul><h2 id="미확인-unchecked-예외를-사용하라"><a href="#미확인-unchecked-예외를-사용하라" class="headerlink" title="미확인(unchecked) 예외를 사용하라"></a>미확인(unchecked) 예외를 사용하라</h2><ul><li><p>checked 예외는 OCP를 위반한다. 메서드에서 확인된 예외를 던졌는데 catch 블록이 세 단계 위에 있다면 그 사이 메서드 모두가 선언부에 해당 예외를 정의해야한다. 즉, 하위 단계에서 코드를 변경하면 상위 단계 메서드 선언부를 전부 고쳐야 한다는 말이다. 모듈과 관련된 코드가 전혀 바뀌지 않았더라도 (선언부가 바뀌었으므로) 모듈을 다시 빌드한 다음 배포해야 한다는 말이다. </p></li><li><p>checked 예외는 사용하는 모든 함수를 강제적으로 예외를 처리하게 하기때문에, 캡슐화가 깨진다. 그렇다고 checked예외가 무조건 나쁜건 아니다. (중요한 라이브러리를 개발한다면 모든 예외를 강제 해야한다.)</p></li></ul><h2 id="예외에-의미를-제공하라"><a href="#예외에-의미를-제공하라" class="headerlink" title="예외에 의미를 제공하라"></a>예외에 의미를 제공하라</h2><ul><li>printStackTrace정보를 던지는것 보다 타 개발자가 직관적으로 알수 있도록 의미있는 문구로 예외처리 하도록 하자.</li><li>예외를 잡을때 로그랑 같이 잡아서 좀 더 디테일한 예외상황에 대해서 알면 더 좋을듯하다. </li></ul><h2 id="호출자를-고려해-예외-클래스를-정의하라"><a href="#호출자를-고려해-예외-클래스를-정의하라" class="headerlink" title="호출자를 고려해 예외 클래스를 정의하라"></a>호출자를 고려해 예외 클래스를 정의하라</h2><ul><li>외부라이브러리의 API를 활용할때는 Wrapper클래스로 감싸서 모듈화 하는 방식 (Component로 빼는방식도 좋겠다.) 을 고려하자. </li><li>Wrapper클래스로 감싼 클래스를 가지고 그 라이브러리의 예외를 잡을 RuntimeException을 새로 정의해서 2-3 종류 이상 예외가 발생하는 라이브러리의 예외 의존도를 낮추도록 하게 하자.  </li></ul><h2 id="정상-흐름을-정의하라"><a href="#정상-흐름을-정의하라" class="headerlink" title="정상 흐름을 정의하라"></a>정상 흐름을 정의하라</h2><ul><li>try-catch를 논리코드를 작성하는 부분은 하지 말자. 예외는 예외 답게 처리하자.(가끔 if-else문처럼 사용하는 경우가 있음.그건 하지 말자.) </li><li>만약에 예외적인처리에서 뭔가 다른 액션을 처리해야한다면, 예외가 발생하는 로직을 분리해서 새로운 객체에 반환할 수 있도록 로직을 수정하는 사례가 있다. (특수사례 패턴 (Special Case Pattern) 참고 )</li></ul><h2 id="null을-반환하지-마라"><a href="#null을-반환하지-마라" class="headerlink" title="null을 반환하지 마라"></a>null을 반환하지 마라</h2><ul><li>보통 개발하다보면, claimInfo != null 혹은 ObjectUtils.isEmpty(claimInfo) 처럼 null 객체를 체크하는 경우가 자주 있다. 사실 NullPointerException이 유발될까바 저렇게 체크하는건데, 호출하는 메서드에서 null자체를 반환하지 않도록 만들라고 추천한다. (예외적인 상황이 발생했을때 빈객체 혹은 Collections.emptyList같은 객체로 말이다.)</li></ul><h2 id="null을-전달하지-마라"><a href="#null을-전달하지-마라" class="headerlink" title="null을 전달하지 마라"></a>null을 전달하지 마라</h2><ul><li>메서드에서 null을 반환하는것 보다 메서드로 Null을 전달하는건 더 나쁨.</li><li>파라미터단에 null이 들어오는걸 방지하려면, 여러가지가 있지만 저자는 assert를 활용해서 체크하는 방식을 추천</li><li>assert말고 Objects.requireNonNull로도 확인하기도함. 더러 Optional을 가지고 체크하기도하지만, 이부분은 비용이 많이 나가서 비추. </li><li>대다수 프로그래밍 언어는 호출자가 실수로 넘기는 Null을 적절히 처리하는 방법이없다. 그렇다면 애초에 null을 넘기지 못하도록 금지하는 정책이 합리적이다. 즉, 인수로 null이 넘어온다는 자체가 문제라는 말이다. </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;오류처리&quot;&gt;&lt;a href=&quot;#오류처리&quot; class=&quot;headerlink&quot; title=&quot;오류처리&quot;&gt;&lt;/a&gt;오류처리&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;뭔가 잘못될 가능성은 늘 존재한다. 뭔가 잘못되면 바로 잡을 책임은 바로 우리 프로그래머에</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="오류처리" scheme="https://codexdawn.github.io/categories/%EC%98%A4%EB%A5%98%EC%B2%98%EB%A6%AC/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-5</title>
    <link href="https://codexdawn.github.io/2021/02/08/clean-code-5/"/>
    <id>https://codexdawn.github.io/2021/02/08/clean-code-5/</id>
    <published>2021-02-08T11:10:39.000Z</published>
    <updated>2021-02-08T14:18:51.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="객체와-자료구조"><a href="#객체와-자료구조" class="headerlink" title="객체와 자료구조"></a>객체와 자료구조</h1><blockquote><p>변수를 비공개로 정의하는 이유가 있다. 남들이 변수에 의존하지 않게 만들고 싶어서다. </p></blockquote><h2 id="자료-추상화"><a href="#자료-추상화" class="headerlink" title="자료 추상화"></a>자료 추상화</h2><figure class="highlight java"><figcaption><span>6-1. 구체적인 Point클래스</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> x; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> y; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>6-2. 추상적인 Point클래스</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getY</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">setCartesian</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getR</span><span class="params">()</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getTheta</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPolar</span><span class="params">(<span class="keyword">double</span> r, <span class="keyword">double</span> theta)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-1-VS-6-2-코드의-승자는"><a href="#1-6-1-VS-6-2-코드의-승자는" class="headerlink" title="1. 6-1 VS 6-2 코드의 승자는?"></a>1. 6-1 VS 6-2 코드의 승자는?</h3><ul><li>6-1은 개별적으로 좌표값을 읽고 설정하게 강제함. </li><li>6-1은 구현ㅇ르 노출한다. 설사, private으로 변수를 선언해도, 각 값마다 getter/setter 함수를 제공한다면 구현을 외부로 노출하는 셈이다. </li><li>6-2는 자료 구조 이상을 표현한다. 클레스 메서드 마다 접근 정책을 강제한다. (무조건 구현하도록)</li><li>6-2는 좌표를 읽을 때는 각 값을 개별적으로 읽어야 한다. 하지만 좌표를 설정할 때는 두 값을 한번에 설정해야 한다. </li></ul><p>위 두코드의 승자는 6-2! 이유는 변수 사이에 함수라는 계층을 넣는다고, 구현이 저절로 감춰지지는 않는다. 구현을 감추려면 추상화가 필수다! 그저 형식에 치우쳐 getter/setter함수로 변수를 다룬다고 클래스가 되는게 아니다. 그보다는 추상 인터페이스를 제공해 사용자가 구현을 모른 채 자료의 핵심을 조작할 수 있어야 진정한 의미의 클래스다! </p><figure class="highlight java"><figcaption><span>6-3. 구체적인 Vehicle 클래스</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getFuelTankCapacityInGallons</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getGallonsOfGasoline</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>6-4. 추상적인 Vihicle클래스</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Vihicle</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getPercentFuelRemaining</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-3-VS-6-4-코드의-승자는"><a href="#2-6-3-VS-6-4-코드의-승자는" class="headerlink" title="2. 6-3 VS 6-4 코드의 승자는?"></a>2. 6-3 VS 6-4 코드의 승자는?</h3><ul><li>6-3은 자동차 연료 상태를 구체적인 숫자 값으로 알려준다. </li><li>6-4는 자동차 연료 상태를 백분율이라는 추상적인 개념으로 알려준다. </li><li>6-3은 두 함수가 변수값을 읽어 반환할 뿐이라는 사실이 거의 확실함. </li><li>6-4는 정보가 어디서 오는지 전혀 드러나지 않는다. </li></ul><p>위 두 코드의 승자는? 6-4! 그 이유는 자룔르 세세하게 공개하기 보다 추상적인 개념으로 표현하는 편이 더 좋다. 인터페이스나 getter/setter 함수 만으로 추상화가 이뤄지지 않는다. 개발자는 객체가 포함하는 자료를 표현할 가장 좋은ㅇ 방법을 심각하게 고민해야한다! </p><h2 id="자료-객체-비대칭"><a href="#자료-객체-비대칭" class="headerlink" title="자료/객체 비대칭"></a>자료/객체 비대칭</h2><figure class="highlight java"><figcaption><span>6-5. 절차적인 도형 (절차지향)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> Point topLeft; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> side; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> Point topLeft; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> height; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> width; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> Point center; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">double</span> radius; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Geomatry</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">(Object shape)</span> <span class="keyword">throws</span> NoSuchShapeException </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(shape <span class="keyword">instanceof</span> Square) &#123;</span><br><span class="line">Square s = (Square) shape; </span><br><span class="line"><span class="keyword">return</span> s.side * s.side; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape <span class="keyword">instanceof</span> Rectangle) &#123;</span><br><span class="line">Rectangle r = (Rectangle) shape; </span><br><span class="line"><span class="keyword">return</span> r.height * r.width; </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (shape <span class="keyword">instanceof</span> Circle) &#123;</span><br><span class="line">Circle c = (Circle) shape; </span><br><span class="line"><span class="keyword">return</span> PI * c.radius * c.radius; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NoSuchShapeException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>6-6. 다형적인 도형 (객체지향)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Point topLeft; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> side; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> side * side; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Point topLeft;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> height; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> width; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> height * width; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Point center; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> radius; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> PI * radius * radius; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5-VS-6-6-코드의-승자는"><a href="#6-5-VS-6-6-코드의-승자는" class="headerlink" title="6-5 VS 6-6 코드의 승자는?"></a>6-5 VS 6-6 코드의 승자는?</h3><ul><li>6-5는 Geomatry 클래스 내부에 함수를 자유롭게 추가 할수 있다. </li><li>6-5는 새 도형이 추가된다면 Geomatry클래스 내부에 있는 함수들을 모두 수정해줘야 할수도 있다. </li><li>6-6은 6-5처럼 굳이 Geomatry클래스가 필요없고, 새 도형을 추가해도 기존 함수에 아무런 영향을 주지 않는다. </li><li>6-6은 새 함수를 추가하면 모든 도형 클래스에 (Shape 인터페이스에 속한) 새 함수를 강제적으로 넣어줘야함.</li></ul><p>위 두 코드의 승자는? 결론은 무승부! </p><ul><li>절차적인 코드는 기존 자료구조를 변경하지 않으면서 새 함수를 추가하기 쉽다. 반면, 객체 지향 코드는 기존 함수를 변경하지 않으면서 새 클래스를 추가하기 쉽다. </li><li>절차적인 코드는 새로운 자료 구조를 추가하기 어렵다. 그러려면 모든 함수를 고쳐야한다. 객체 지향 코드는 새로운 함수를 추가하기 어렵다. 그러려면 모든 클래스를 고쳐야한다. </li></ul><p>다시말해, 객체 지향 코드에서 어려운 변경은 절차적인 코드에서 쉬우며, 절차적인 코드에서 어려운 변경은 객체 지향 코드에서 쉽다!<br>복잡한 시스템을 짜다보면 새로운 함수가 아니라 새로운 자료 타입이 필요한 경우가 생긴다. 이때는 클래스 와 객체 지향 코드에서 쉽다!<br>반면, 새로운 자료 타입이 아니라 새로운 함수가 필요한 경우도 생긴다. 이때는 절차적인 코드와 자료구조가 좀 더 적합함! </p><h2 id="디미터-법칙"><a href="#디미터-법칙" class="headerlink" title="디미터 법칙"></a>디미터 법칙</h2><p>디미터 법칙은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙이다. 즉, 객체는 자료를 숨기고 함수를 공개한다.<br>디미터 법칙은 “클래스 C의 메서드 f는 다음과 같은 객체의 메서드만 호출해야한다.”</p><ul><li>클래스 C</li><li>f가 생성한 객체 </li><li>f 인수로 넘어온 객체 </li><li>C 인스턴스 변수에 저장된 객체 </li></ul><p>디미터 법칙을 해하는 가장 대표적인 예는 메서드 체이닝을 활용하는 부분 (모든 메서드 체이닝이 문제가 아니라는 것이 중요!) 이라 할수있다. </p><figure class="highlight java"><figcaption><span>디미터 법칙을 어긴 예</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath(); </span><br></pre></td></tr></table></figure><h3 id="기차-충돌"><a href="#기차-충돌" class="headerlink" title="기차 충돌"></a>기차 충돌</h3><p>위와 같은 코드를 기차 충돌이라고 한다. 위와 같은 코드는 차라리 아래와 같이 나누는편이 좋다. </p><figure class="highlight java"><figcaption><span>디미터 법칙을 어긴 예</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Option opts = ctxt.getOptions();</span><br><span class="line">File scrachDir = opts.getScratchDir();</span><br><span class="line"><span class="keyword">final</span> String outputDir = scratchDir.getAbsolutePath(); </span><br></pre></td></tr></table></figure><p>위 예제 역시 디미터 법칙을 해하는 요소이긴하다. 왜냐하면 ctxt객체가 Options를 포함하고, Options는 ScratchDir을 포함하고, ScartchDir은 AbsolutePath를 포함한다는 사실을 안다. 즉, 함수하나가 아는 지식이 방대하다. 위 코드를 사용하는 함수는 많은 객체를 탐색할 줄 안다는 말이다.<br>위 두 예제코드를 아래 코드처럼 구현했다면 디미터 법칙이 거론되지 않았을것이다. </p><figure class="highlight java"><figcaption><span>디미터 법칙을 어긴 예</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String outputDir = ctxt.options.scartchDir.absouletePath;  </span><br></pre></td></tr></table></figure><p>객체라면 내부 구조를 숨겨야 하므로 확실히 디미터 법칙을 위반한다. 반면, 자료구조라면 당연히 내부 구조를 노출하므로 디미터 법칙이 적용되지 않는다.</p><h3 id="잡종구조"><a href="#잡종구조" class="headerlink" title="잡종구조"></a>잡종구조</h3><p>절반은 객체, 절반은 자료구조인 잡종구조는 되도록 피하는것이 좋다. 프로그래머가 함수나 타입을 보호할지 공개할지 확신하지 못해 어중간하게 내놓은 설계에 불과함. </p><h3 id="구조체-감추기"><a href="#구조체-감추기" class="headerlink" title="구조체 감추기"></a>구조체 감추기</h3><blockquote><p>객체라면 ‘뭔가를 하라고’ 말해야지 속을 드러내라고 말하면 안된다. </p></blockquote><h2 id="자료-전달-객체-DTO"><a href="#자료-전달-객체-DTO" class="headerlink" title="자료 전달 객체 (DTO)"></a>자료 전달 객체 (DTO)</h2><ul><li>DTO는 공개변수만 있고 함수가 없는 클래스다. </li><li>Bean은 private변수를 getter/setter 함수로 조작한다. 일종의 사이비 캡슐화로, 일부 OO순수주의자나 만족시킬뿐 별다른 이익을 제공하지 않는다. </li></ul><h3 id="활성-레코드"><a href="#활성-레코드" class="headerlink" title="활성 레코드"></a>활성 레코드</h3><ul><li>활성 레코드는 DTO의 특수형태다. DTO와 같은 맥락이나, 대개 save나 find와 같은 탐색함수도 제공함. </li><li>활성 레코드는 자료구조로 취급해야함. </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;객체와-자료구조&quot;&gt;&lt;a href=&quot;#객체와-자료구조&quot; class=&quot;headerlink&quot; title=&quot;객체와 자료구조&quot;&gt;&lt;/a&gt;객체와 자료구조&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;변수를 비공개로 정의하는 이유가 있다. 남들이 변수에 의존하지</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="객체와 자료구조" scheme="https://codexdawn.github.io/categories/%EA%B0%9D%EC%B2%B4%EC%99%80-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-4</title>
    <link href="https://codexdawn.github.io/2021/01/27/clean-code-4/"/>
    <id>https://codexdawn.github.io/2021/01/27/clean-code-4/</id>
    <published>2021-01-27T02:27:07.000Z</published>
    <updated>2021-01-27T08:12:23.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="형식-맞추기"><a href="#형식-맞추기" class="headerlink" title="형식 맞추기"></a>형식 맞추기</h1><blockquote><p>프로그래머라면 형식을 깔끔하게 맞춰 코드를 짜야한다. 코드 형식을 맞추기 위한 간단한 규칙을 정하고, 그 규칙을 착실히 따라야한다. 팀으로 일한다면 팀이 합의해 규칙을 정하고, 모두가 그 규칙을 따라야 한다. 필요하다면 규칙을 자동으로 적용하는 도구를 활용한다. </p></blockquote><h2 id="1-형식을-맞추는-목적"><a href="#1-형식을-맞추는-목적" class="headerlink" title="1. 형식을 맞추는 목적"></a>1. 형식을 맞추는 목적</h2><ul><li>원래 코드가 사라질지라도 개발자의 스타일과 규율은 사라지지 않기 때문</li></ul><h2 id="2-적절한-행-길이를-유지하라"><a href="#2-적절한-행-길이를-유지하라" class="headerlink" title="2. 적절한 행 길이를 유지하라"></a>2. 적절한 행 길이를 유지하라</h2><ul><li>커다란 시스템도 코드라인이 500줄을 넘지 않고 200줄 정도 인 파일로 운영되고있음. </li><li>일반적으로 큰파일보다 작은 파일이 이해하기 쉽다. </li></ul><h3 id="2-1-신문기사-처럼-작성하라"><a href="#2-1-신문기사-처럼-작성하라" class="headerlink" title="2-1) 신문기사 처럼 작성하라"></a>2-1) 신문기사 처럼 작성하라</h3><ul><li>이름은 간단하면서도 설명이 가능할 정도로 신경 써서 짓는다.(이름만 보고도 올바른 모듈을 살펴보고있는지 아닌지를 판단할 정도로 신경써서 짓는다.)</li><li>소스 파일 첫부분은 고차원 개념과 알고리즘을 설명한다. 아래로 내려갈수록 의도를 세세하게 묘사한다. 마지막에는 가장 저차원 함수와 세부 내역이 나온다.</li></ul><h3 id="2-2-개념은-빈-행으로-분리하라"><a href="#2-2-개념은-빈-행으로-분리하라" class="headerlink" title="2-2) 개념은 빈 행으로 분리하라"></a>2-2) 개념은 빈 행으로 분리하라</h3><ul><li>빈 행은 새로운 개념을 시작한다는 시각적 단서다.</li></ul><h3 id="2-3-세로-밀집도"><a href="#2-3-세로-밀집도" class="headerlink" title="2-3) 세로 밀집도"></a>2-3) 세로 밀집도</h3><ul><li>줄바꿈이 개념을 분리한다면, 세로 밀집도는 연관성을 의미한다. (즉, 서로 밀집한 코드 행은 세로로 가까이 놓여야 한다는 뜻)</li></ul><h3 id="2-4-수직-거리"><a href="#2-4-수직-거리" class="headerlink" title="2-4) 수직 거리"></a>2-4) 수직 거리</h3><h4 id="2-4-1-변수선언"><a href="#2-4-1-변수선언" class="headerlink" title="2-4-1) 변수선언"></a>2-4-1) 변수선언</h4><ul><li>변수는 사용하는 위치에 최대한 가까이 선언한다. </li></ul><h4 id="2-4-2-인스턴스-변수"><a href="#2-4-2-인스턴스-변수" class="headerlink" title="2-4-2) 인스턴스 변수"></a>2-4-2) 인스턴스 변수</h4><ul><li>인스턴스 변수는 클래스 맨 처음에 선언 (DTO,VO 혹은 DI받은객체등..)</li></ul><h4 id="2-4-3-종속-함수"><a href="#2-4-3-종속-함수" class="headerlink" title="2-4-3) 종속 함수"></a>2-4-3) 종속 함수</h4><ul><li>한 함수가 다른 함수를 호출한다면 두 함수는 세로로 가까이 배치한다. </li><li>또한 가능하다면 호출하는 함수를 호출되는 함수보다 먼저 배치한다. </li></ul><h4 id="2-4-4-개념적-유사성"><a href="#2-4-4-개념적-유사성" class="headerlink" title="2-4-4) 개념적 유사성"></a>2-4-4) 개념적 유사성</h4><ul><li>개념적인 친화도가 높은 코드일수록 가까이 배치하도록 한다. </li></ul><blockquote><p>친화도가 높은 요인은 ? (ex&gt; JUnit 4.3.1 assertTrue,assertFalse override 메서드 구현체들)</p><ul><li>한 함수가 다른 함수를 호출 할때(메서드 종속성)</li><li>변수와 그 변수를 사용하는 메서드 </li></ul></blockquote><h4 id="2-4-5-세로-순서"><a href="#2-4-5-세로-순서" class="headerlink" title="2-4-5) 세로 순서"></a>2-4-5) 세로 순서</h4><ul><li>위에서 설명했듯이 함수 종속성(메서드 종속성)에 의해, 호출 되는 함수를 호출하는 함수보다 나중에 배치한다. </li></ul><h2 id="3-가로-형식-맞추기"><a href="#3-가로-형식-맞추기" class="headerlink" title="3. 가로 형식 맞추기"></a>3. 가로 형식 맞추기</h2><ul><li>가급적 한 행에 120자 이내로 행 길이를 제한 하도록 하자. </li></ul><h3 id="3-1-가로-공백과-밀집도"><a href="#3-1-가로-공백과-밀집도" class="headerlink" title="3-1) 가로 공백과 밀집도"></a>3-1) 가로 공백과 밀집도</h3><ul><li>가로로는 공백을 사용해 밀접한개념과 느슨한 개념을 표현함 (ex&gt; b<em>b - 4</em>a*c )</li></ul><h3 id="3-2-가로-정렬"><a href="#3-2-가로-정렬" class="headerlink" title="3-2) 가로 정렬"></a>3-2) 가로 정렬</h3><ul><li>현재 우리가 개발하는 방식 그대로 하면됨. (코딩 컨벤션이 있으면 그 형식에 맞춰서 개발해아함.)</li></ul><h3 id="3-3-들여쓰기"><a href="#3-3-들여쓰기" class="headerlink" title="3-3) 들여쓰기"></a>3-3) 들여쓰기</h3><ul><li>범위(scope) 로 이뤄진 계층을 표현하기 위해 코드 들여쓰기 사용함. </li></ul><h4 id="3-3-1-들여쓰기-무시하기"><a href="#3-3-1-들여쓰기-무시하기" class="headerlink" title="3-3-1) 들여쓰기 무시하기"></a>3-3-1) 들여쓰기 무시하기</h4><ul><li>가끔 If문 같은 경우 간단한 한줄짜리 로직을 개발할때, 들여쓰기를 무시할때가 있는데, 한줄의 로직도 들여쓰기를 다 해주는걸 권장함. </li></ul><h2 id="4-팀-규칙"><a href="#4-팀-규칙" class="headerlink" title="4. 팀 규칙"></a>4. 팀 규칙</h2><ul><li>팀내에 코드컨벤션이 있다면 그 컨벤션 규칙을 따르는것이 맞다. (각자 개발방식으로 가져가면 코드 유지가 어렵다.)</li><li><a href="https://google.github.io/styleguide/javaguide.html">구글 코드컨벤션</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;형식-맞추기&quot;&gt;&lt;a href=&quot;#형식-맞추기&quot; class=&quot;headerlink&quot; title=&quot;형식 맞추기&quot;&gt;&lt;/a&gt;형식 맞추기&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;프로그래머라면 형식을 깔끔하게 맞춰 코드를 짜야한다. 코드 형식을 맞추기 위</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="형식 맞추기" scheme="https://codexdawn.github.io/categories/%ED%98%95%EC%8B%9D-%EB%A7%9E%EC%B6%94%EA%B8%B0/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-3</title>
    <link href="https://codexdawn.github.io/2021/01/26/clean-code-3/"/>
    <id>https://codexdawn.github.io/2021/01/26/clean-code-3/</id>
    <published>2021-01-26T05:09:06.000Z</published>
    <updated>2021-01-27T08:20:14.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="주석"><a href="#주석" class="headerlink" title="주석"></a>주석</h1><blockquote><p>주석은 쉰들러 리스트가 아니다. 주석은 ‘순수하게 선하지’ 못하다. 사실상 주석은 기껏해야 필요악이다. </p></blockquote><h2 id="1-주석은-나쁜-코드를-보완하지-못한다"><a href="#1-주석은-나쁜-코드를-보완하지-못한다" class="headerlink" title="1. 주석은 나쁜 코드를 보완하지 못한다."></a>1. 주석은 나쁜 코드를 보완하지 못한다.</h2><ul><li>코드에 주석을 추가하는 이유는 코드 품질이 나쁘기 때문이다. </li><li>표현력이 풍부하고 깔끔하며(2장,3장을 잘 준수한) 주석이 없는 코드는, 복잡하고 어수선하며 주석이 많이 달린 코듭모다 훨씬 좋다.</li></ul><h2 id="2-코드로-의도를-표현하라"><a href="#2-코드로-의도를-표현하라" class="headerlink" title="2. 코드로 의도를 표현하라!"></a>2. 코드로 의도를 표현하라!</h2><p>2장.의도있는이름 과 3장.함수를 이어가는 맥락임. </p><figure class="highlight java"><figcaption><span>나쁜예</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//직원에게 복지 혜택을 받을 자격이 있는지 검사한다. </span></span><br><span class="line"><span class="keyword">if</span>((employee.flags &amp; HOURLY_FLAG) &amp;&amp; (employee.age &gt; <span class="number">65</span>))</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>개선예</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//직원에게 복지 혜택을 받을 자격이 있는지 검사한다. </span></span><br><span class="line"><span class="keyword">if</span>(employee.isEligibleForFullBenefits())</span><br></pre></td></tr></table></figure><h2 id="3-좋은-주석"><a href="#3-좋은-주석" class="headerlink" title="3. 좋은 주석"></a>3. 좋은 주석</h2><h3 id="3-1-법적인-주석"><a href="#3-1-법적인-주석" class="headerlink" title="3-1) 법적인 주석"></a>3-1) 법적인 주석</h3><p>소위 Copyright, GNU같은 오픈소스 라이선스 관련 부분을 헤더에 추가하는 부분을 말한다. </p><h3 id="3-2-정보를-제공하는-주석"><a href="#3-2-정보를-제공하는-주석" class="headerlink" title="3-2) 정보를 제공하는 주석"></a>3-2) 정보를 제공하는 주석</h3><figure class="highlight java"><figcaption><span>정보제공좋은예</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//테스트중인 Responder 인스턴스를 반환한다. </span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Responder <span class="title">responderInstance</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>위와같이 정보를 제공하는 주석은 달아주는편이 좋긴하나, 가급적 함수이름에 정보를 담는편이 더 좋다. responderBeingTested로 바꾸면 주석이 필요 없어진다.</p><h3 id="3-3-의도를-설명하는-주석"><a href="#3-3-의도를-설명하는-주석" class="headerlink" title="3-3) 의도를 설명하는 주석"></a>3-3) 의도를 설명하는 주석</h3><ul><li>분명한 의도를 가진 코드에 한해서만 설명하는 주석을 다는것에 초점. (의도만 명확하게 드러나도록만 주석처리 할 것)</li><li>의도된 소스가 만약에 소스 수정이 되었으면 그 내용이 변경됨에 따라 주석변경을 반드시 해야할 것.</li></ul><h3 id="3-4-의미를-명확하게-밝히는-주석"><a href="#3-4-의미를-명확하게-밝히는-주석" class="headerlink" title="3-4) 의미를 명확하게 밝히는 주석"></a>3-4) 의미를 명확하게 밝히는 주석</h3><figure class="highlight java"><figcaption><span>정보제공좋은예</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assertTrue(a.compareTo(a) == <span class="number">0</span>) <span class="comment">// a == a</span></span><br><span class="line">assertTrue(a.compareTo(b) != <span class="number">0</span>) <span class="comment">// a != b </span></span><br><span class="line">assertTrue(a.compareTo(b) == -<span class="number">1</span>) <span class="comment">// a &lt; b </span></span><br><span class="line">assertTrue(b.compareTo(a) == <span class="number">1</span>) <span class="comment">// b &gt; a</span></span><br></pre></td></tr></table></figure><ul><li>주석이 올바른지 검증하기 쉽지는 않다. (팩트만 달아두도록 해야하는데..)</li><li>가급적 100% 확인이 불가능하다 싶으면 주석을 빼는 방향을 고려해야함. (잘못된 정보를 제공해 혼란주기 딱좋은 예시)</li></ul><h3 id="3-5-결과를-경고하는-주석"><a href="#3-5-결과를-경고하는-주석" class="headerlink" title="3-5) 결과를 경고하는 주석"></a>3-5) 결과를 경고하는 주석</h3><ul><li>실행하면 오래걸려서 손해를 보거나 실행해서 위험할때 주의를 주는 케이스라면 주석을 달아두는것도 좋다. </li><li>예시에 <code>SimpleDateFormat 이 스레드에 안전하지 못하다</code> 라고 주석을 달아놔서 주의를 줬지만, 가장 좋은 해결책은 문제를 알았으면 제거하거나 수정하는게 가장 좋다. 나쁜코드를 남기는건 risk다. </li></ul><h3 id="3-6-TODO-주석"><a href="#3-6-TODO-주석" class="headerlink" title="3-6) TODO 주석"></a>3-6) TODO 주석</h3><ul><li>TODO주석은 당장 구현하기 어려운 업무를 기술할 때 사용한다. </li><li>TODO주석은 더이상 필요없거나, 기능삭제, 누군가에게 문제를 봐달라는 요청, 부탁등에 유용하다.</li><li>하지만 위 조건이 유효하지않을때는 TODO를 남겨놓지 말고, 제거하자. </li></ul><h3 id="3-7-중요성을-강조하는-주석"><a href="#3-7-중요성을-강조하는-주석" class="headerlink" title="3-7) 중요성을 강조하는 주석"></a>3-7) 중요성을 강조하는 주석</h3><ul><li>자칫 대수롭지 않다고 여겨질 뭔가의 중요성을 강조하기 위해서도 주석을 사용함</li></ul><h3 id="3-8-공개-API에서-JavaDocs"><a href="#3-8-공개-API에서-JavaDocs" class="headerlink" title="3-8) 공개 API에서 JavaDocs"></a>3-8) 공개 API에서 JavaDocs</h3><ul><li>설명이 잘 된 공개 API에서는 JavaDocs는 정말 유용하고 만족스럽다. </li><li>하지만 그릇된 정보를 전달하지 않도록 주의해야함. </li></ul><h2 id="4-나쁜-주석"><a href="#4-나쁜-주석" class="headerlink" title="4. 나쁜 주석"></a>4. 나쁜 주석</h2><h3 id="4-1-주절-거리는-주석"><a href="#4-1-주절-거리는-주석" class="headerlink" title="4-1) 주절 거리는 주석"></a>4-1) 주절 거리는 주석</h3><ul><li>작성자에게만 의미가 있는 주석은 아무 의미가 없다. (모두에게 의미가 전달되어야 의미가 있는 주석인데, 혼자만 아는 주석은 다른 동료개발자들과 불통한다는 증거)</li></ul><h3 id="4-2-같은-이야기를-중복하는-주석"><a href="#4-2-같은-이야기를-중복하는-주석" class="headerlink" title="4-2) 같은 이야기를 중복하는 주석"></a>4-2) 같은 이야기를 중복하는 주석</h3><ul><li>헤더에 달아놓은 주석과 같은 코드내용을 적는건 시간낭비 다. 주석의 의미를 알아가는데 오히려 시간을 더 투자해야 할 수 있다.</li></ul><h3 id="4-3-오해할-여지가-있는-주석"><a href="#4-3-오해할-여지가-있는-주석" class="headerlink" title="4-3) 오해할 여지가 있는 주석"></a>4-3) 오해할 여지가 있는 주석</h3><ul><li>코드보다 읽기 어려운 주석에 담긴 ‘살짝 잘못된 정보’는 다른 개발자가 그 주석을 참고하고 개발하는데 많은 시간을 투자하게 만들수도있다. </li></ul><h3 id="4-4-의무적으로-다하는-주석"><a href="#4-4-의무적으로-다하는-주석" class="headerlink" title="4-4) 의무적으로 다하는 주석"></a>4-4) 의무적으로 다하는 주석</h3><ul><li>모든 메서드에 JavaDocs를 달거나 모든 변수에 주석을 달아야 한다는 규칙은 어리석은 결정이다.<br>(참고&gt; IntelliJ IDE는 JavaDocs의 잘못된 변수가 오기입되는걸 방지해 주긴한다.)</li></ul><h3 id="4-5-이력을-기록하는-주석"><a href="#4-5-이력을-기록하는-주석" class="headerlink" title="4-5) 이력을 기록하는 주석"></a>4-5) 이력을 기록하는 주석</h3><ul><li>주석에 코드변경 history 남기면 코드적으로 공해가 따로 없다. (그냥 github코드 비교를 보는게 나을듯.)</li></ul><h3 id="4-6-있으나-마나한-주석"><a href="#4-6-있으나-마나한-주석" class="headerlink" title="4-6) 있으나 마나한 주석"></a>4-6) 있으나 마나한 주석</h3><ul><li>너무 당연한 사실을 주석으로 다는건 코드적으로 공해다. </li></ul><h3 id="4-7-무서운-잡음"><a href="#4-7-무서운-잡음" class="headerlink" title="4-7) 무서운 잡음"></a>4-7) 무서운 잡음</h3><ul><li>복사 붙여넣기 잘못해서 잘못기입한 주석은 타개발자에게 불편하게 만드는 요소가된다.</li></ul><h3 id="4-8-함수나-변수로-표현할수-있다면-주석을-달지-마라"><a href="#4-8-함수나-변수로-표현할수-있다면-주석을-달지-마라" class="headerlink" title="4-8) 함수나 변수로 표현할수 있다면 주석을 달지 마라."></a>4-8) 함수나 변수로 표현할수 있다면 주석을 달지 마라.</h3><ul><li>주석은 가급적 없는것이 더 좋기때문에 가급적 변수나 함수 이름에 개발자가 알도록 네이밍을 잘 하자.</li></ul><h3 id="4-9-위치를-표시하는-주석-닫는-괄호에-다는-주석-공로를-돌리거나-저자를-표시하는-쭈석"><a href="#4-9-위치를-표시하는-주석-닫는-괄호에-다는-주석-공로를-돌리거나-저자를-표시하는-쭈석" class="headerlink" title="4-9) 위치를 표시하는 주석 , 닫는 괄호에 다는 주석 , 공로를 돌리거나 저자를 표시하는 쭈석"></a>4-9) 위치를 표시하는 주석 , 닫는 괄호에 다는 주석 , 공로를 돌리거나 저자를 표시하는 쭈석</h3><ul><li>가끔 코드가 수행되는 위치나, while,for문에 닫는 중괄호에 닫는 표시를 하는 주석을 볼수있는데, 그부분은 좋은 주석이 아니다.</li><li>쓸데없이 누가 개발했는지 주석으로 명시하는건 코드 공해다. (몰라도되는 정보이며,요즘은 IDE로 금방 히스토리 알수있음.) </li></ul><h3 id="4-10-주석으로-처리한-코드"><a href="#4-10-주석으로-처리한-코드" class="headerlink" title="4-10) 주석으로 처리한 코드"></a>4-10) 주석으로 처리한 코드</h3><ul><li>가끔 다음에 다시 코드를 재사용 해야 하거나, 임시로 잠시 주석을 달아놓는 경우가 있는데, 주석된 코드가 오랫동안 사용되지 않을것 같으면, 제거하자. </li><li>github이나 소스관리시스템에서 다 저장하고있으니, 일단 지우고 소스 히스토리보면서 개선하는 방향으로 하자. </li></ul><h3 id="4-11-HTML주석"><a href="#4-11-HTML주석" class="headerlink" title="4-11) HTML주석"></a>4-11) HTML주석</h3><ul><li>html주석은 IDE에서 조차 읽기 어렵다. </li><li>html주석은 웹페이지에 올릴 목적으로 사용하는 주석이므로, html삽입하는 주체는 프로그래머가 아니라 html 주석 tool이 되어야한다. </li></ul><h3 id="4-12-전역-정보"><a href="#4-12-전역-정보" class="headerlink" title="4-12) 전역 정보"></a>4-12) 전역 정보</h3><ul><li>주석을 달아야한다면, 근처에 있는 코드만 기술하라. 전역정보의 주석은 기술하지마라. </li></ul><h3 id="4-13-너무-많은-정보"><a href="#4-13-너무-많은-정보" class="headerlink" title="4-13) 너무 많은 정보"></a>4-13) 너무 많은 정보</h3><ul><li>TMI는 그냥 읽기도 불편한 쓰레기 정보다. 간단 명료 하게 핵심만 전달하자. </li></ul><h3 id="4-14-모호한-관계-주석-과-코드-와의-일맥상통"><a href="#4-14-모호한-관계-주석-과-코드-와의-일맥상통" class="headerlink" title="4-14) 모호한 관계 (주석 과 코드 와의 일맥상통)"></a>4-14) 모호한 관계 (주석 과 코드 와의 일맥상통)</h3><ul><li>주석과 주석이 설명하는 코드의 관계는 명백해야 한다. 이왕 공들여 주석을 달았으면, 독자가 주석과 코드를 읽어보고 무슨 소린지 알아야하지 않겠는가? </li></ul><h3 id="4-15-함수-헤더"><a href="#4-15-함수-헤더" class="headerlink" title="4-15) 함수 헤더"></a>4-15) 함수 헤더</h3><ul><li>짧은 함수는 긴 설명이 필요없다. 짧고 한가지만 수행하며 이름을 잘 붙인 함수가 주석으로 헤더를 추가한 함수보다 훨씬 좋다. </li></ul><h3 id="4-16-비공개-모드에서-JavaDocs"><a href="#4-16-비공개-모드에서-JavaDocs" class="headerlink" title="4-16) 비공개 모드에서 JavaDocs"></a>4-16) 비공개 모드에서 JavaDocs</h3><ul><li>접근제한자가 private메서드인 경우 굳이 JavaDocs를 할 필요는 없다. (코드 공해)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;주석&quot;&gt;&lt;a href=&quot;#주석&quot; class=&quot;headerlink&quot; title=&quot;주석&quot;&gt;&lt;/a&gt;주석&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;주석은 쉰들러 리스트가 아니다. 주석은 ‘순수하게 선하지’ 못하다. 사실상 주석은 기껏해야 필요악이다. </summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="주석" scheme="https://codexdawn.github.io/categories/%EC%A3%BC%EC%84%9D/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>java-effective-5</title>
    <link href="https://codexdawn.github.io/2021/01/22/java-effective-5/"/>
    <id>https://codexdawn.github.io/2021/01/22/java-effective-5/</id>
    <published>2021-01-22T01:14:26.000Z</published>
    <updated>2021-02-15T13:07:16.597Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>많은 클래스가 하나 이상의 자원에 의존한다. </p></blockquote><h2 id="아이템5-자원을-직접-명시하지-말고-의존-객체-주입을-사용하라"><a href="#아이템5-자원을-직접-명시하지-말고-의존-객체-주입을-사용하라" class="headerlink" title="아이템5. 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라"></a>아이템5. 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라</h2><figure class="highlight java"><figcaption><span>정적 유틸리티를 잘못 만든 예 - 유연하지 않고 테스트하기 어렵다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellChecker</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Lexicon dictionary = ...; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SpellChecker</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">//객체생성방지 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String word)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">suggestions</span><span class="params">(String typo)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>싱글턴을 잘못 만든 예 - 유연하지 않고 테스트하기 어렵다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellChecker</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Lexicon dictionary = ... ;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SpellChecker</span><span class="params">(...)</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SpellChecker INSTANCE = <span class="keyword">new</span> SpellChecker(...) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String word)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">suggestions</span><span class="params">(String typo)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>두 방식 모두 사전을 단 하나만 사용한다고 가정한다는 점에서 그리 훌륭해 보이지 않는다. (용도에 따라서 다양한 사전을 구현할수 있기때문)<br>사용하는 자원에 따라 동작이 달라지는 클래스에는 정적 유틸리티 클래스나 싱글턴 방식이 적합하지 않다.<br>대신, 클래스가 여러 자원 인스턴스를 지원해야 하며, 클라이언트가 원하는 자원을 사용해야한다. 이 조건을 만족하는 간단한 패턴이 있으니,<br>바로 인스턴스를 생성할 때 생성자에 필오한 자원을 넘겨주는 방식이다. (생성자 DI 방식)</p><figure class="highlight java"><figcaption><span>DI는 유연성과 테스트 용이성을 높여준다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellChecker</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Lexicon dictionary;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpellChecker</span><span class="params">(Lexicon dictionary)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dictionary = Objects.requireNonNull(dictionary); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String word)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">suggestions</span><span class="params">(String typo)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DI를 사용하면, 딱 하나의 자원 (dictionary) 만 사용하지만, 자원이 몇 개든 의존 관계가 어떻든 잘 동작함. 또한 불변을 보장하여 (같은 자원을 사용하려는) 여러 클라이언트가 의존 객체들을 안심하고 공유할 수 있기도 하다.<br>의존객체주입은 생성자, 정적 팩터리, 빌더 모두에 똑같이 응용 할 수 있다.<br>이 패턴의 쓸만한 변형으로, 생성자에 자원 팩터리를 넘겨주는 방식이 있다.</p><blockquote><p>펙터리란? </p><ul><li>호출 할때 마다 특정 타입의 인스턴스를 반복해서 만들어주는 객체 </li></ul></blockquote><p>즉, 팩터리 메서드 패턴을 구현 한 것이다. 자바8에서 소개한 Supplier<T> 인터페이스가 팩터리를 표현한 완벽한 예다.<br>Supplier<T> 를 입력으로 받는 메서드는 일반적으로 한정적 와일드카드 타입을 사용해 팩터리의 타입 매개변수를 제한해야한다. 이 방식을 사용해 클라이언트는 자신이 명시한 타입의 하위 타입이라면 무엇이든 생성할 수 있는 팩터리를 넘길수 있다. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;&lt;p&gt;많은 클래스가 하나 이상의 자원에 의존한다. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;아이템5-자원을-직접-명시하지-말고-의존-객체-주입을-사용하라&quot;&gt;&lt;a href=&quot;#아이템5-자원을-직접-명시하지-말고-의존-객체-</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Effective Java" scheme="https://codexdawn.github.io/categories/Effective-Java/"/>
    
    <category term="객체 생성과 파괴" scheme="https://codexdawn.github.io/categories/%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%8C%8C%EA%B4%B4/"/>
    
    
    <category term="Java,EffectiveJava" scheme="https://codexdawn.github.io/tags/Java-EffectiveJava/"/>
    
  </entry>
  
  <entry>
    <title>clean-code-2</title>
    <link href="https://codexdawn.github.io/2021/01/21/clean-code-2/"/>
    <id>https://codexdawn.github.io/2021/01/21/clean-code-2/</id>
    <published>2021-01-21T07:25:42.000Z</published>
    <updated>2021-01-27T10:01:13.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h1><h2 id="1-작게-만들어라"><a href="#1-작게-만들어라" class="headerlink" title="1.작게 만들어라!"></a>1.작게 만들어라!</h2><ul><li>함수를 만드는 첫번째 규칙은 <strong>작게</strong> 다. </li><li>함수를 만드는 둘째 규칙은 <strong>더작게</strong> 다. </li><li>켄트 벡 아저씨 기준으로 모든 함수가 2~4줄 정도가 작게만드는 기준이다.  </li></ul><h3 id="1-1-블록과-들여쓰기"><a href="#1-1-블록과-들여쓰기" class="headerlink" title="1-1) 블록과 들여쓰기"></a>1-1) 블록과 들여쓰기</h3><ul><li>if/else/while 문 등에 들어가는 블록은 한 줄이어야 한다. 대개 거기서 함수를 호출한다. 그러면 바깥을 감싸는 함수가 작아질 뿐아니라, 블록안에서 호출하는 함수 이름을 적절히 짓는다면, 코드를 이해하기도 쉬워진다. 이 말은 중첩 구조가 생길 만큼 함수가 커져서는 안 된다는 뜻이다. 그러므로 함수에서 들여쓰기 수준은 1단이나 2단을 넘어서는 안된다. </li><li><a href="https://www.sonarsource.com/docs/CognitiveComplexity.pdf">Cognitive Complexity 이슈 체크 하기</a></li></ul><h2 id="2-한-가지만-해라"><a href="#2-한-가지만-해라" class="headerlink" title="2. 한 가지만 해라!"></a>2. 한 가지만 해라!</h2><blockquote><p>함수는 한 가지를 해야한다. 그 한 가지를 잘 해야 한다. 그 한 가지만을 해야 한다. </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">renderPageWithSetupsAndTeardowns</span><span class="params">(PageData pageData, <span class="keyword">boolean</span> isSuite)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isTestPage(pageData))</span><br><span class="line">incloudeSetupAndTeardownPages(pageData, isSuite);</span><br><span class="line"><span class="keyword">return</span> pageData.getHtml();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드는 한 가지만 하는가? 디테일 하게 보면 세 가지를 한다고 주장 할 수도 있다.</p><ul><li>페이지가 테스트 페이지인지 판단한다. </li><li>그렇다면 섦정 페이지와 해제 페이지를 넣는다. </li><li>페이지를 HTML로 렌더링한다.</li></ul><p>과연 한가지인가 세가지인가? 위에서 언급하는 세 단계는 지정된 함수 이름아래에서 추상화 수준이 <strong>하나</strong> 다. 지정된 함수 이름아래에서 추상화 수준이 하나인 단계만 수행한다면 그 함수는 한 가지 작업만 한다.<br>따라서, 함수가 한가지만 하는지 판단하는 방법은 하나 더 있는데, 단순히 다른 표현이 아니라 의미 있는 이름으로 다른 함수를 추출할 수 있다면 그 함수는 여러 작업을 하는 셈이다. </p><h2 id="3-함수-당-추상화-수준은-하나로"><a href="#3-함수-당-추상화-수준은-하나로" class="headerlink" title="3. 함수 당 추상화 수준은 하나로!"></a>3. 함수 당 추상화 수준은 하나로!</h2><ul><li>한 함수내에 추상화 수준을 섞으면 코드를 읽는 사람이 헷갈린다. 특정 표현이 근본 개념인지 아니면 세부사항인지 구분하기 어려운탓이다. 하지만 문제는 여기서 그치지않고, 근본 개념과 세부사항을 뒤섞기 시작하면, 깨어진 창문처럼 사람들이 함수에 세부사항을 점점 더 추가한다. </li></ul><h3 id="3-1-위에서-아래로-코드-읽기-내려가기-규칙"><a href="#3-1-위에서-아래로-코드-읽기-내려가기-규칙" class="headerlink" title="3-1) 위에서 아래로 코드 읽기 : 내려가기 규칙"></a>3-1) 위에서 아래로 코드 읽기 : 내려가기 규칙</h3><ul><li>코드는 위에서 아래로 이야기 처럼 읽혀야 좋다. </li><li>한 함수 다음에는 추상화 수준이 한 단계 낮은 함수가 온다. 즉, 위에서 아래로 프로그램을 읽으면 함수 추상화 수준이 한 번에 한 단계씩 낮아진다. 이것을 <strong>내려가기 규칙</strong> 이라고 한다. </li></ul><p>결국 저자가 말하는 내려가기 규칙 역시 <strong>한 가지</strong> 만 하는 함수를 구현하기 위한 방법이라서 제안하고 있는 부분이다.<br>내려가기 규칙을 잘 활용하면 각 함수는 다음 함수를 소개한다.(종속 함수) 따라서 각 함수는 일정한 추상화 수준을 유지한다. (3-7 코드를 확인해보자!)</p><h2 id="4-Switch-문"><a href="#4-Switch-문" class="headerlink" title="4. Switch 문"></a>4. Switch 문</h2><p>switch문은 작게 만들기 어렵다. 원론적으로 switch 문자체는 N가지 처리를 하는 분기문이기 때문이다. 아래 스위치 문을 확인해보자. </p><figure class="highlight java"><figcaption><span>switch문 나쁜예</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Money <span class="title">calculatePay</span><span class="params">(Employee e)</span> <span class="keyword">throws</span> InvaliEmployeeType </span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(e.type) &#123;</span><br><span class="line"><span class="keyword">case</span> COMMITIONED:</span><br><span class="line">  <span class="keyword">return</span> calculrateCommitionedPay(e); </span><br><span class="line"><span class="keyword">case</span> HOULY: </span><br><span class="line">  <span class="keyword">return</span> calculrateHoulyPay(e); </span><br><span class="line"><span class="keyword">case</span> SALARIED: </span><br><span class="line">  <span class="keyword">return</span> calculateSalariedPay(e);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> InvalidEmployeeType(e.type); </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>위 함수는 몇가지 문제가 있다.</p><ul><li>함수가 길다. 새직원 유형을 추가하면 더 길어짐. </li><li>‘한가지’ 작업만 수행하지 않는다. </li><li>SRP(Single Responseibliity Prinsiple) - 단일책임의원칙을 위반함 코드를 변경할 이유가 여럿 있기때문에</li><li>OCP(Open Closed Prinsiple) - 개방폐쇄원칙 위반함. 새 직원 유형을 추가할때마다 코드를 변경해줘야 하기때문 </li></ul><blockquote><p>OOP에서 SOLID? (<a href="https://ko.wikipedia.org/wiki/SOLID_(%EA%B0%9D%EC%B2%B4_%EC%A7%80%ED%96%A5_%EC%84%A4%EA%B3%84)">SOLID Wiki 참고</a>)<br>S : SRP(Single Responsibility Principle) : 한 클래스는 하나의 책임만 가져아 한다.<br>O : OCP(Open/Closed Principle) : 소프트웨어 요소는 확장에는 열려 있으나, 변경에는 닫혀 있어야 한다.<br>L : LSP(Liskov Substitution Principle) : 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.<br>I : ISP(Interface Segregation Principle) : 특정 클라이언트를 위한 인터페이스 여러개가 범용 인터페이스 하나보다 낫다.<br>D : DIP(Dependency Inversion Principle) : 프로그래머는 추상화에 의존해야지, 구체화에 의존하면 안된다. (의존성 주입은 이 원칙을 따름)</p></blockquote><p>그렇다면 위 switch문은 어떻게 개선 할 수 있을까? 아래 코드를 보자 </p><figure class="highlight java"><figcaption><span>switch 개선코드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isPayday</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Money <span class="title">calculatePay</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">deliveryPay</span><span class="params">(Money pay)</span></span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">makeEmployee</span><span class="params">(EmployeeRecord r)</span> <span class="keyword">throws</span> InvalidEmployeeType</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeFactoryImpl</span> <span class="keyword">implements</span> <span class="title">EmployeeFactory</span> </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">makeEmployee</span><span class="params">(EmployeeRecord r)</span> <span class="keyword">throws</span> InvaliEmployeeType </span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(r.type) &#123;</span><br><span class="line"><span class="keyword">case</span> COMMITIONED:</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> CommissionedEmployee(r);</span><br><span class="line"><span class="keyword">case</span> HOULY: </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> HourlyEmployee(r);</span><br><span class="line"><span class="keyword">case</span> SALARIED: </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SalariedEmployee(r); </span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> InvalidEmployeeType(e.type); </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>개선된 코드에서 확인 가능하듯, 추상 클래스에 switch문을 숨겨놨다. 팩토리는 switch문을 통해 적절한 Employee 파생 클래스의 인스턴스를 생성한다.<br>calculratePay, isPayday, deliveryPay등 과 같은 함수는 Employee 인터페이스를 거쳐 호출 된다. 그러면 다형성으로 인해 실제 파생 클래스의 함수가 실행된다. </p><h2 id="5-서술적인-이름을-사용하라"><a href="#5-서술적인-이름을-사용하라" class="headerlink" title="5. 서술적인 이름을 사용하라."></a>5. 서술적인 이름을 사용하라.</h2><ul><li>이름이 길어져도 좋다. 시간이 걸려도 길고 서술적인 이름이 짧고 어려운 이름 보다 낫다. </li><li>길고 서술적인 이름이 길고 서술적인 주석보다 낫다! 함수이름을 정할때는 여러 단어가 쉽게 읽히는 명명법을 사용한다. 그런 다음, 여러 단어를 사용해 함수 기능을 잘 표현하는 이름을 선택한다. </li></ul><h2 id="6-함수-인수"><a href="#6-함수-인수" class="headerlink" title="6. 함수 인수"></a>6. 함수 인수</h2><p>함수에서 이상적인 인수 개수는 0개 곧 무항이다. 그 다음은 1개 , 그 다음은 2개, 3개는 가능한 피하는 편이 좋고, 4개 이상은 특별한 이유가 필요하다. 특별한 이유가 있어도 사용하면 안된다. </p><h3 id="6-1-많이-쓰는-단항"><a href="#6-1-많이-쓰는-단항" class="headerlink" title="6-1) 많이 쓰는 단항"></a>6-1) 많이 쓰는 단항</h3><p>함수에 인수를 1개 넘기는 이유는 2가지가 있다. </p><ul><li>인수에 질문을 던지는 경우 </li><li>인수를 뭔가 변환해서 반환하는 경우 </li></ul><p>위 두가지가 아니면 단항 함수는 가급적 피하도록 하자. 예를들어서 <code>void includeSetupPageInto(StringBuffer pageText)</code> 는 피한다. 변환 함수에서 출력 인수를 사용하면 혼란을 일으킨다.<br>입력 인수를 변환하는 함수라면 변환해서 결과는 반환값으로 돌려주도록 하자. (ex- StringBuffer transform(StringBuffer in) 이 void transform(StringBuffer in)보다 좋다.) </p><h3 id="6-2-플래그-인수"><a href="#6-2-플래그-인수" class="headerlink" title="6-2) 플래그 인수"></a>6-2) 플래그 인수</h3><p>플래그 인수는 추하다. 함수로 boolean형태로 넘기는 형태는 정말 끔찍하다. 왜냐하면, 함수가 한꺼번에 여러가지를 처리한다고 대놓고 공표하는 셈이니까!<br>플래그가 참이면 이거 거짓이면 저거 이런식으로 말이다. (2가지 추상형태로 나뉘게됨)</p><h3 id="6-3-이항-함수"><a href="#6-3-이항-함수" class="headerlink" title="6-3) 이항 함수"></a>6-3) 이항 함수</h3><p>인수가 2개인 함수는 인수가 1개인 함수보다 이해하기 어렵다. 이항함수가 무조건 나쁘다는것은 아니고, 프로그램 짜다보면 불가피 한 경우가 생긴다.<br>하지만 그만큼 위험이 따른다는 사실을 인지하고 가능하면 단항함수로 바꾸도록 애써야한다. </p><h3 id="6-4-삼항-함수"><a href="#6-4-삼항-함수" class="headerlink" title="6-4) 삼항 함수"></a>6-4) 삼항 함수</h3><p>이건 2항보다 더 이해하기 어렵다. 그래서 삼항함수는 만들때는 신중히 고려하도록 권고하고있다. </p><h3 id="6-5-인수-객체"><a href="#6-5-인수-객체" class="headerlink" title="6-5) 인수 객체"></a>6-5) 인수 객체</h3><p>인수가 2-3개 필요하다면 일부를 독자적인 클래스 변수로 선언할 가능성을 짚어본다.</p><blockquote><p>Circle makeCircle(double x, double y, double radius);<br>Circle makeCircle(Point point, double radius); </p></blockquote><p><code>Point</code>객체로 어떻게 3개 인수를 2개인수로 눈속임이라 여겨질지 모르겠으나 그렇지않다. 위 예제에서는 x와y를 묶었듯이 변수를 묶어 넘기려면 이름을 붙여야 하므로 결국은 개념을 표현하게 된다. </p><h3 id="6-7-인수-목록"><a href="#6-7-인수-목록" class="headerlink" title="6-7) 인수 목록"></a>6-7) 인수 목록</h3><p>때로는 인수 개수가 가변적인 함수도 필요하다. <code>String.format</code> 메서드가 가장 좋은 예이다.<br><code>String.format</code>메서드는 여러개의 String을 받는 가변인수를 포함한다. 따라서 사용될때는 여러가지 인수를 받지만, 결국은 이항함수이다.<br>가변인수를 취하는 함수는 단항,이항,삼항 함수로 취급할수 있다. 하지만 이를 넘어서는 인수를 사용할 경우 문제가 있다. (결국 가변인수를 사용해도 3항이상 넘어가는걸 유의하자는 의미)</p><h3 id="6-8-동사와-키워드"><a href="#6-8-동사와-키워드" class="headerlink" title="6-8) 동사와 키워드"></a>6-8) 동사와 키워드</h3><p>함수의 의도나 인수의 순서와 의도를 제대로 표현하려면 좋은 함수 이름이 필수다! 단항 함수는 함수와 인수가 동사/명사 쌍을 이뤄야한다. (ex- writeField(name))<br>그리고 함수이름에 키워드를 추가하는 형식이다. (assertEquals -&gt; assertExpectedEqualsActual(expected, actual)) </p><h2 id="7-부수효과를-일으키지마라"><a href="#7-부수효과를-일으키지마라" class="headerlink" title="7. 부수효과를 일으키지마라!"></a>7. 부수효과를 일으키지마라!</h2><p>부수효과는 거짓말이다. 함수에서 한가지만 하겠다고 약속했는데, 남몰래 다른 짓을 하니까. 때로는 함수로 넘어온 인수나 시스템 전역 변수를 수정한다. 어느쪽이든 교활하고 해로운 거짓말이다.<br>많은 경우 시간적인 결합이나 순서 종속성을 초래한다. 결론은 두가지 일을 하게되면 차라리 메서드명을 두가지일을 한다고 명시를 하도록 해서 개발자가 명확하게 기능을 메서드명으로 이해할수있도록 하자. </p><h2 id="8-명령과-조회를-분리하라"><a href="#8-명령과-조회를-분리하라" class="headerlink" title="8. 명령과 조회를 분리하라!"></a>8. 명령과 조회를 분리하라!</h2><p>함수는 뭔가를 수행하거나 뭔가에 답하거나 둘 중 하나만 해야한다. 둘 다 하면 안된다. 즉, 객체 상태를 변경하거나 아니면 객체 정보를 반환하거나 둘 중 하나다.<br>둘다 하면 혼란을 초래한다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String attribute, String value)</span></span>; </span><br></pre></td></tr></table></figure><p>위 함수는 이름이 attribute인 속성을 찾아 값을 value로 설정한후 성공하면 true, 실패면 false로 리턴하도록 한다.<br>이 상태에서 if(set(“username”,”unclebob”))..이렇게 사용하면, 이해가 될까? 안된다..<br>따라서 username이라는 attribute가 존재하는지 확인하는 메서드와 set하는 메서드는 분리 되어야한다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(attributeExists(<span class="string">&quot;username&quot;</span>)) &#123;</span><br><span class="line">setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;unclebob&quot;</span>); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="9-오류코드보다-예외를-사용하라"><a href="#9-오류코드보다-예외를-사용하라" class="headerlink" title="9. 오류코드보다 예외를 사용하라!"></a>9. 오류코드보다 예외를 사용하라!</h2><p>오류로 걸러낼때 상수 혹은 변수로 비교해서 걸러내는것 보다, try-catch문으로 오류 를걸러내는것이 더 깔끔하다. </p><h3 id="9-1-try-catch-블록-뽑아내기"><a href="#9-1-try-catch-블록-뽑아내기" class="headerlink" title="9-1) try-catch 블록 뽑아내기"></a>9-1) try-catch 블록 뽑아내기</h3><p>try-catch문은 추하다. (코드가 드럽다는 소리다.) 코드 구조에 혼란을 일으키며, 정상 동작과 오류 처리 동작을 뒤섞는다. 그러므로 try-catch 블록을 별도 함수로 뽑아내는 편이 좋다.<br>(try-catch문을 별로로 메서드로 추출하라는 소리다.)</p><h3 id="9-2-오류처리도-한-가지-작업이다"><a href="#9-2-오류처리도-한-가지-작업이다" class="headerlink" title="9-2) 오류처리도 한 가지 작업이다"></a>9-2) 오류처리도 한 가지 작업이다</h3><p>함수는 한가지 작업만 해야한다. 오류처리도 마찬가지다. 오류를 처리하는 함수는 오류만 처리해야 마땅하다. </p><h3 id="9-3-Error-java-의존성-자석"><a href="#9-3-Error-java-의존성-자석" class="headerlink" title="9-3) Error.java 의존성 자석"></a>9-3) Error.java 의존성 자석</h3><p>오류 코드를 반환한다는건 클래스든 열거형 변수든 어디선가 오류 코드를 정의한다는 소리다.<br>결론은 위 와같이 변수를 추가해서 하는것보다, 예외클래스를 하나 생성해서 예외처리를 하는것이 차라리 더 낫다. 오류 코드대신 예외처리를 하는 방향으로 하자. </p><h2 id="10-반복하지-마라"><a href="#10-반복하지-마라" class="headerlink" title="10. 반복하지 마라!"></a>10. 반복하지 마라!</h2><p>중복코드를 남발하지 말자는 소리다 </p><h2 id="11-구조적-프로그래밍"><a href="#11-구조적-프로그래밍" class="headerlink" title="11. 구조적 프로그래밍"></a>11. 구조적 프로그래밍</h2><p>함수는 return문이 하나 여야한다. loop안에서 break,continue같은걸 사용해서는 안되며, goto문은 더더욱 안된다.<br>단, 함수를 작게 만든다면, 간혹 return,break,continue를 여러차례 사용해도 괜찮다. </p><h2 id="12-함수를-어떻게-짜죠"><a href="#12-함수를-어떻게-짜죠" class="headerlink" title="12. 함수를 어떻게 짜죠 ?"></a>12. 함수를 어떻게 짜죠 ?</h2><p>코딩은 글짓기와 유사함.<br>일단 코딩함(들여쓰기도 많고 중복도 많고해도 일단 짠다. 1차원적 코딩) -&gt; 단위테스트 수행 -&gt; 코드다듬기 -&gt; 함수만들고, 이름바꾸고,중복제거하고 -&gt; 메서드줄이고 순서바꿈 -&gt; 때로는 전체 클래스 쪼갬 (이와중에도 단위테스트는 여전히 통과되야함.)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;함수&quot;&gt;&lt;a href=&quot;#함수&quot; class=&quot;headerlink&quot; title=&quot;함수&quot;&gt;&lt;/a&gt;함수&lt;/h1&gt;&lt;h2 id=&quot;1-작게-만들어라&quot;&gt;&lt;a href=&quot;#1-작게-만들어라&quot; class=&quot;headerlink&quot; title=&quot;1.작게 만들</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="함수" scheme="https://codexdawn.github.io/categories/%ED%95%A8%EC%88%98/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>clean_code_1</title>
    <link href="https://codexdawn.github.io/2021/01/20/clean-code-1/"/>
    <id>https://codexdawn.github.io/2021/01/20/clean-code-1/</id>
    <published>2021-01-20T11:22:29.000Z</published>
    <updated>2021-01-21T07:26:39.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="의미-있는-이름"><a href="#의미-있는-이름" class="headerlink" title="의미 있는 이름"></a>의미 있는 이름</h1><h2 id="1-의도를-분명히-밝혀라"><a href="#1-의도를-분명히-밝혀라" class="headerlink" title="1. 의도를 분명히 밝혀라"></a>1. 의도를 분명히 밝혀라</h2><blockquote><p><strong>변수나 함수 그리고 클래스 이름은 다음과 같은 굵직한 질문에 모두 답해야한다.</strong> </p><ul><li>변수(혹은 함수나 클래스)의 존재 이유는? </li><li>수행 기능은? </li><li>사용 방법은? </li><li>따로 주석이 필요하다면 의도를 분명히 드러내지 못했다는 말이다.  </li></ul></blockquote><p>의도가 드러나는 이름을 사용하면 코드 이해와 변경이 쉬워진다. 다음 코드는 무엇을 할까?</p><figure class="highlight java"><figcaption><span>의미가불명확한코드</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;<span class="keyword">int</span>[]&gt; getThen() &#123;</span><br><span class="line"><span class="keyword">public</span> List&lt;<span class="keyword">int</span>[]&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] x : theList) &#123;</span><br><span class="line"><span class="keyword">if</span>(x[<span class="number">0</span>] == <span class="number">4</span>)</span><br><span class="line">list1.add(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> list1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>의미가부여된코드1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;<span class="keyword">int</span>[]&gt; getFlaggedCells() &#123;</span><br><span class="line">List&lt;<span class="keyword">int</span>[]&gt; flaggedCells = ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] cell: gameBoard) &#123;</span><br><span class="line"><span class="keyword">if</span>(cell[STATUS_VALUE] == FLAGGED) &#123;</span><br><span class="line">flaggedCells.add(cell); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> flaggedCells; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>의미가부여된코드2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Cell&gt; <span class="title">getFlaggedCells</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;Cell&gt; flaggedCells = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Cell cell : gameBoard) &#123;</span><br><span class="line"><span class="keyword">if</span>(cell.isFlagged()) &#123;</span><br><span class="line">flaggedCells.add(cell);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> flaggedCells; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1,2,3번 코드가 발전된 부분을 비교해보자. 우선 1번에서 2번코드는 의미를 부여해서 코드가 어떤 동작을 목적으로 개발되었는지 알수있도록 의미를 부여하였으며, 2번에서 3번코드는 <code>Cell</code>이라는 객체를 만들어 해당 객체의 명확한 의도를 정의 했고,<br><code>cell.isFlagged()</code> 메서드를 작성해서 FLAGGED라는 상수를 감춰서 좀 더 이해하기 쉽고 이쁘게 코드를 구성했다는 걸 알수있다. 이 처럼 모든 코드에는 명확한 의도가 네이밍을 통해 알수 있어야한다. </p><h2 id="2-그릇된-정보를-피하라"><a href="#2-그릇된-정보를-피하라" class="headerlink" title="2. 그릇된 정보를 피하라"></a>2. 그릇된 정보를 피하라</h2><p>프로그래머는 코드에 그릇된 단서를 남겨서는 안된다. </p><h3 id="그릇된-단서는-코드-의미를-흐린다"><a href="#그릇된-단서는-코드-의미를-흐린다" class="headerlink" title="그릇된 단서는 코드 의미를 흐린다."></a>그릇된 단서는 코드 의미를 흐린다.</h3><p>예를들어, 여러 계정을 그룹으로 묶을 때, 실제 List가 아니라면, aacountList라 명명하지 않는다. 프로그래머에게 List라는 단어는 특수한 의미다.<br>계정을 담는 컨테이너가 실제 List가 아니라면 프로그래머에게 그릇된 정보를 제공하는 셈이다. 그러므로 accountGroup, bunchOfAccounts 아니면, Accounts라 명명한다. </p><h3 id="서로-흡사한-이름을-사용하지-않는다"><a href="#서로-흡사한-이름을-사용하지-않는다" class="headerlink" title="서로 흡사한 이름을 사용하지 않는다."></a>서로 흡사한 이름을 사용하지 않는다.</h3><p>한 모듈에서 XYZControllerForEfficientHandlingOfStrings 라는 이름을 사용하고, 조금 떨어진 모듈에서 XYZContllerForEfficientStorageOfStrings라는 이름을 사용한다면? 두 단어는 겁나게 비슷하다. </p><h3 id="유사한-개념은-유사한-표기법을-사용한다"><a href="#유사한-개념은-유사한-표기법을-사용한다" class="headerlink" title="유사한 개념은 유사한 표기법을 사용한다."></a>유사한 개념은 유사한 표기법을 사용한다.</h3><p>이것도 <strong>정보</strong> 다. 일관성이 떨어지는 표기법은 <strong>그릇된 정보</strong> 다. 요즘 IDE는 몇자만 입력하면 후보목록에 유사한 개념이 알파멧 순으로 나온다면 그리고 각 개념의 차이가 명백히 드러난다면 코드 자동 완성 기능은 굉장히 유용해진다.<br>십중팔구 개발자들은 네이밍만 보고 객체를 선택한다(상세 주석이나 메서드 목록 잘 안보고 네이밍만으로 판단하는 경우 많음)</p><h2 id="3-의미-있게-구분하라"><a href="#3-의미-있게-구분하라" class="headerlink" title="3. 의미 있게 구분하라"></a>3. 의미 있게 구분하라</h2><h3 id="컴파일러를-통과할지라도-연속된-숫자를-덧붙이거나-불용어-noise-word-를-추가하는-방식은-비추천"><a href="#컴파일러를-통과할지라도-연속된-숫자를-덧붙이거나-불용어-noise-word-를-추가하는-방식은-비추천" class="headerlink" title="컴파일러를 통과할지라도 연속된 숫자를 덧붙이거나 불용어 (noise word) 를 추가하는 방식은 비추천"></a>컴파일러를 통과할지라도 연속된 숫자를 덧붙이거나 불용어 (noise word) 를 추가하는 방식은 비추천</h3><p>이름이 달라야한다면 의미도 달라져야함. (a1,a2….) </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyChars</span><span class="params">(<span class="keyword">char</span> a1[] , <span class="keyword">char</span> a2[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a1.length; i++) &#123;</span><br><span class="line">a2[i]  = a1[i]; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드에서 함수의 인수명을 source 와 destination 으로 사용했으면 가독성이 훨씬 좋았을것이다. </p><h3 id="불용어를-추가한-이름-역시-아무런-정보를-제공하지-못함"><a href="#불용어를-추가한-이름-역시-아무런-정보를-제공하지-못함" class="headerlink" title="불용어를 추가한 이름 역시 아무런 정보를 제공하지 못함."></a>불용어를 추가한 이름 역시 아무런 정보를 제공하지 못함.</h3><p><code>Product</code>라는 클래스가 있다고 가정하면, 다른 클래스를 <code>ProductInfo</code>, <code>ProductData</code> 라 부른다면 개념을 구분하지 않은 채 이름만 달리는 경우다. Info 와 Data는 의미가 불명확하기 때문에 그 클래스나 메소드등의 기능에 따라 분명한 네이밍을 정하는것이 중요하다. </p><h2 id="4-발음하기-쉬운-이름을-사용하라"><a href="#4-발음하기-쉬운-이름을-사용하라" class="headerlink" title="4. 발음하기 쉬운 이름을 사용하라."></a>4. 발음하기 쉬운 이름을 사용하라.</h2><p>저자가 아는 분이 <code>genymdhms</code>(generate date, year, month,day,hour,minute,second)라는 네이밍을 사용했다고 한다. 저거 어떻게 발음해야함? 부르기도 힘들다. 저딴식으로 네이밍 적지말자. 부르기 쉬운 명칭이 이해도 빠르다. </p><h2 id="5-검색하기-쉬운-이름을-사용하라"><a href="#5-검색하기-쉬운-이름을-사용하라" class="headerlink" title="5. 검색하기 쉬운 이름을 사용하라."></a>5. 검색하기 쉬운 이름을 사용하라.</h2><p>보통 변수나 상수명을 정의할때 대충 정의하면 무슨 의미인지도 모르고, 공통적으로 사용되는 단어나 알파벳등이 들어갔을때 검색하기 힘든 경우가 있다. 어떤 변수,상수,클래스,메서드든 간에 의미를 확인해서 검색하기 쉬운 단어로 사용하도록 하자.</p><h2 id="6-인코딩을-피하라"><a href="#6-인코딩을-피하라" class="headerlink" title="6. 인코딩을 피하라."></a>6. 인코딩을 피하라.</h2><p>대표적으로 헝거리식 표기법 예전 C혹은 WinAPI시대에서나 볼수있는 부분으로, 변수명 앞에 멤버변수라는 의미를 담아 m_name 혹은 인터페이스 클래스라는 의미를 담아 IShape이런식으로 명칭을 정해서 사용을 자주했는데, 이제는 이런식으로 굳이 안해도 컴파일이나 개발하는데 큰 이슈를 주지않음<br>(예전에는 메서드 길이제한 문자제한등으로 헝거리식표기법을 사용했었음. 하지만 이제는 시대가 발전하면서 큰의미가 없어졌음. 메서드에 수십자적어도 심지어 한글을 적어도 이슈없음.)</p><h2 id="7-자신의-기억력을-자랑하지-마라"><a href="#7-자신의-기억력을-자랑하지-마라" class="headerlink" title="7. 자신의 기억력을 자랑하지 마라."></a>7. 자신의 기억력을 자랑하지 마라.</h2><p>변수명 개같이 짓지 말자. for문을 예를들면 비교적 로직이 짧은 for문을 사용하면, i,x등의 변수명을 사용해도 괜찮지만, 로직이 복잡하고 내용이 긴 for문은 명확한 변수명으로 타 개발자가 혼돈하지 않고 명시하도록 하자. </p><h2 id="8-클래스-이름"><a href="#8-클래스-이름" class="headerlink" title="8. 클래스 이름"></a>8. 클래스 이름</h2><p>클래스 이름 과 객체 이름은 명사나 명사구가 적합함. (Customer, WikiPAge..)</p><h2 id="9-메서드-이름"><a href="#9-메서드-이름" class="headerlink" title="9. 메서드 이름"></a>9. 메서드 이름</h2><p>메서드 이름은 동사나 동사구가 적합함. (postPayment, deletePage, save …) 그리고 접근자,변경자,조건자는 자바빈 표준에 따라 get,set,is를 붙히도록 하자.<br>덧붙여서 생성자를 중복정의 할때 (다중 생성자) 정적 팩터리 메서드를 사용하도록 하자.(effective java item1 참고)</p><h2 id="10-기발한-이름은-피하라"><a href="#10-기발한-이름은-피하라" class="headerlink" title="10. 기발한 이름은 피하라"></a>10. 기발한 이름은 피하라</h2><p>나만의 독창적인 이름으로 주변 개발자들이 못알아보게 만드는 이슈를 만들게 하지말자. 가급적 팀내 정한 네이밍 룰이 있으면 그 형식을 따르도록 하자. </p><h2 id="11-한-개념에-한-단어를-사용하라"><a href="#11-한-개념에-한-단어를-사용하라" class="headerlink" title="11. 한 개념에 한 단어를 사용하라."></a>11. 한 개념에 한 단어를 사용하라.</h2><p>추상적인 개념 하나에 단어 하나를 선택해 이를 고수하도록 하자. 예를들어, 똑같은 메서드를 클래스마다 fetch, retrieve, get 으로 제각각 부르면 혼란스럽다. 통일해서 사용하도록 하자. </p><h2 id="12-말장난을-하지-마라"><a href="#12-말장난을-하지-마라" class="headerlink" title="12. 말장난을 하지 마라."></a>12. 말장난을 하지 마라.</h2><p>11장 처럼 한개념에 한 단어를 사용하라고 해서 모든 <code>add</code>메서드를 1+1 처럼 더하는 값의 결과물을 내는 메서드를 사용했는데, 다른 add메서드에서는 집합체 안에 새로운 값 하나를 추가하는 메서드를 add로 사용하는건 곤란하다.<br>새로운 값이 추가되었을때는 append 혹은 insert로 네이밍하여 add와 혼용하지 않도록 조심하자.</p><h2 id="13-해법-영역에서-가져온-이름을-사용하라"><a href="#13-해법-영역에서-가져온-이름을-사용하라" class="headerlink" title="13. 해법 영역에서 가져온 이름을 사용하라."></a>13. 해법 영역에서 가져온 이름을 사용하라.</h2><p>코드를 읽는 사람도 프로그래머라는 사실을 명심하자. 그러므로 전산용어, 알고리즘, 패턴, 수학용어등을 사용해도됨. </p><h2 id="14-문제-영역에서-가져온-이름을-사용하라"><a href="#14-문제-영역에서-가져온-이름을-사용하라" class="headerlink" title="14. 문제 영역에서 가져온 이름을 사용하라."></a>14. 문제 영역에서 가져온 이름을 사용하라.</h2><p>적절한 프로그래머 용어가 없다면 문제 영역에서 이름을 가져온다. 그럼 코드를 보수하는 프로그래머가 분야 전문가에게 의미를 물어 파악 할수 있다. </p><h2 id="15-의미있는-맥락을-추가하라"><a href="#15-의미있는-맥락을-추가하라" class="headerlink" title="15. 의미있는 맥락을 추가하라."></a>15. 의미있는 맥락을 추가하라.</h2><p>아래 코드 2개를 비교해보자. </p><figure class="highlight java"><figcaption><span>맥락이 불분명한 함수</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printGuessStatistics</span><span class="params">(<span class="keyword">char</span> candidate, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">String number; </span><br><span class="line">String verb; </span><br><span class="line">String pluralModifier; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(count == <span class="number">0</span>) &#123;</span><br><span class="line">number = <span class="string">&quot;no&quot;</span>;</span><br><span class="line">verb = <span class="string">&quot;are&quot;</span>;</span><br><span class="line">pluralModifier = <span class="string">&quot;s&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">number = <span class="string">&quot;1&quot;</span>; </span><br><span class="line">verb = <span class="string">&quot;is&quot;</span>; </span><br><span class="line">pluralModifier = <span class="string">&quot;&quot;</span>; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">number = Integer.toString(count);</span><br><span class="line">verb = <span class="string">&quot;are&quot;</span>;</span><br><span class="line">pluralModifier = <span class="string">&quot;s&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String guessMessage = String.format(<span class="string">&quot;There %s %s %s%s&quot;</span>, verb, number, candidate, pluraModifier);</span><br><span class="line">print(guessMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>맥락이 분명한 함수</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuessStatisticsMessage</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String number; </span><br><span class="line"><span class="keyword">private</span> String verb; </span><br><span class="line"><span class="keyword">private</span> String pluralModifier; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">make</span><span class="params">(<span class="keyword">char</span> candidate, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">createPluralDependentMessageParts(count);</span><br><span class="line"><span class="keyword">return</span> String.format(<span class="string">&quot;There %s %s %s%s&quot;</span>, verb, number, candidate, pluraModifier);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createPluralDependentMessageParts</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">thereAreNoLetters();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">thereIsOneLetter();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">thereAreManyLetters(count); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">thereAreManyLetters</span><span class="params">(<span class="keyword">int</span> count )</span> </span>&#123;</span><br><span class="line">number = Integer.toString(count);</span><br><span class="line">verb = <span class="string">&quot;are&quot;</span>;</span><br><span class="line">pluralModifier = <span class="string">&quot;s&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">thereIsOneLetter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">number = <span class="string">&quot;1&quot;</span>; </span><br><span class="line">verb = <span class="string">&quot;is&quot;</span>; </span><br><span class="line">pluralModifier = <span class="string">&quot;&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">thereAreNoLetters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">number = <span class="string">&quot;no&quot;</span>;</span><br><span class="line">verb = <span class="string">&quot;are&quot;</span>;</span><br><span class="line">pluralModifier = <span class="string">&quot;s&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1번코드를 보면서 어떤 부분이 느껴지는가? 변수만 보고서 의미가 파악되는가? 함수 이름으로는 대강 어떤 동작을 하겠거니 유추는 가능하지만, 알고리즘에서 나머지 맥락을 제공하는걸 알수있다. (결국 로직을 다봐야 알수있다는 말.)<br>결국 메서드만 봐서는 세 변수의 의미가 불분명하다. 그럼 개선된 코드에서는 어떻게 명확한 코드로 만들었을까? 우선 코드1번은 함수가 길다. 그리고 세변수를 함수 전반에서 사용한다. 그래서 함수를 작은 조각으로 쪼개고자 GuessStatisticsMessage라는 클래스는 만든뒤,<br>세 변수를 클래스에 멤버변수로 넣었다. 그러면 세 변수는 맥락이 분명해 진다. 즉, 세 변수는 확실하게 GuessStatisticsMessage 에 속한다. 이렇게 맥락을 개선하면 함수를 쪼개기가 쉬워지므로 알고리즘도 좀 더 명확해진다.<br>개인적으로 이번장에서 가장 감명깊게 본 파트이다. 개인적으로 개발하면서 이 부분에서 늘 신경을 못써서, 항상 코드가 복잡해지고 난잡해지는 이슈가 있었는데, 담번에는 좀 규모있고 복잡한 로직이 들어갈때, 맥락을 정확하게 하기 위해서 클래스로 쪼개는 연습을 해보도록 하자. </p><h2 id="16-불필요한-맥락을-없애라"><a href="#16-불필요한-맥락을-없애라" class="headerlink" title="16. 불필요한 맥락을 없애라."></a>16. 불필요한 맥락을 없애라.</h2><p>이부분은 개인적으로 예를 들면 Gsfresh라는 프로젝트를 하고있다고 가정하자. Gsfresh가 메인이라고 하지만, 적용하는 로직이 광범위하고 클래스도 많고 변수도 많고, 메서드도 많다면 무조건 네이밍앞에 GSFCheckClaim 이런식으로 GSF를 서두에 다 붙일 필요는 없다는 의미다.<br>왜냐면 모든 관련 파일이나 변수나 메서드에 GSF~ 이런식으로 붙여버리면 검색할때도 힘들고 찾기도 힘들어 지기 때문이다. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;의미-있는-이름&quot;&gt;&lt;a href=&quot;#의미-있는-이름&quot; class=&quot;headerlink&quot; title=&quot;의미 있는 이름&quot;&gt;&lt;/a&gt;의미 있는 이름&lt;/h1&gt;&lt;h2 id=&quot;1-의도를-분명히-밝혀라&quot;&gt;&lt;a href=&quot;#1-의도를-분명히-밝혀라&quot; c</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Clean Code" scheme="https://codexdawn.github.io/categories/Clean-Code/"/>
    
    <category term="의미 있는 이름" scheme="https://codexdawn.github.io/categories/%EC%9D%98%EB%AF%B8-%EC%9E%88%EB%8A%94-%EC%9D%B4%EB%A6%84/"/>
    
    
    <category term="refactoring,code,cleancode" scheme="https://codexdawn.github.io/tags/refactoring-code-cleancode/"/>
    
  </entry>
  
  <entry>
    <title>java-effective-1</title>
    <link href="https://codexdawn.github.io/2021/01/18/java-effective-1/"/>
    <id>https://codexdawn.github.io/2021/01/18/java-effective-1/</id>
    <published>2021-01-18T08:06:18.117Z</published>
    <updated>2021-01-18T08:06:18.117Z</updated>
    
    <content type="html"><![CDATA[<p>기본적으로 자바에서는 인스턴스를 얻는 수단은 public 생성자이지만,<br>클래스는 생성자와 별도로 정적 팩터리 메서드를 제공 할수 있다. </p><h2 id="아이템1-생성자-대신-정적-팩터리-메서드를-고려하라"><a href="#아이템1-생성자-대신-정적-팩터리-메서드를-고려하라" class="headerlink" title="아이템1. 생성자 대신 정적 팩터리 메서드를 고려하라."></a>아이템1. 생성자 대신 정적 팩터리 메서드를 고려하라.</h2><figure class="highlight java"><figcaption><span>Boolean.valueOf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> b ? Boolean.TRUE : Boolean.FALSE; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 메서드는 기본적으로 기본 타입인 boolean을 받아 Boolean 객체 참조로 변환해 준다. </p><h3 id="장점1-이름을-가질수-있다-메서드의-목적을-분명하게-알수있다"><a href="#장점1-이름을-가질수-있다-메서드의-목적을-분명하게-알수있다" class="headerlink" title="장점1. 이름을 가질수 있다. (메서드의 목적을 분명하게 알수있다.)"></a>장점1. 이름을 가질수 있다. (메서드의 목적을 분명하게 알수있다.)</h3><p>자바에서 기본으로 제공하는 public생성자는 이름을 가질수없으며, 매개변수들이 포함되어 있는 생성자 역시 이름이 없다.<br>그래서 개발자들은 여러 생성자가 존재 할 경우, 어떤 역할을 하는지 한눈에 알아보기가 쉽지않을것이다.<br>이런 public생성자의 단점을 이름을 가질수있는 정적 팩터리 메서드가 해결 할 수있다. </p><h3 id="장점2-호출될-때마다-인스턴스를-새로-생성하지-않아도-된다"><a href="#장점2-호출될-때마다-인스턴스를-새로-생성하지-않아도-된다" class="headerlink" title="장점2. 호출될 때마다 인스턴스를 새로 생성하지 않아도 된다."></a>장점2. 호출될 때마다 인스턴스를 새로 생성하지 않아도 된다.</h3><p>자바에서 public생성자를 호출 하려면 new 키워드로 인스턴스를 생성하게 되어있다.<br>하지만 정적 팩터리 메서드를 사용하면, 매번 인스턴스를 생성하지 않아도 된다.<br>특히 불변 클래스(immutable class; 아이템17)는 인스턴스를 미리 만들어놓거나 새로 생성한 인스턴스를 캐싱하여, 재활용하는 식으로 불필요한 객체 생성을 피할수 있다. (EX&gt; Boolean.valueOf) 따라서 같은 객체가 자주 요청되는 상황이라면 성능을 상당히 끌어올려 준다.</p><blockquote><p>인스턴스 통제(instance-controlled) 클래스란? (ex&gt; 싱글턴)<br>=&gt; 반복된 요청에 같은 객체를 반환하는 식으로 정적 팩터리 방식의 클래스는 언제 어느 인스턴스를 살아 있게 할지를 철저히 통제 할수있다. </p><p>인스턴스를 통제하는 이유는?<br>=&gt; 싱글턴, 인스턴스화 불가(Util성 클래스에서 생성자 막을때), 불변 값 클래스에서 동치인 인스턴스가 단 하나임을 보장 (a == b 일때, a.equals(b) 성립) </p></blockquote><h3 id="장점3-반환-타입의-하위-타입-객체를-반환할-수-있는-능력이-있다"><a href="#장점3-반환-타입의-하위-타입-객체를-반환할-수-있는-능력이-있다" class="headerlink" title="장점3. 반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다."></a>장점3. 반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다.</h3><p>제목이 거창해서 그렇지, 간단하게 생각하면 인터페이스를 반환 타입을 갖게하고, 실제로는 인터페이스를 구현하는 구현체를 리턴하는 방식 가장 대표적인 예는 <code>java.util.Collections</code> 이다. 이 컬렉션 프레임워크는 45개의 구현체 클래스를 사용하고 있지만, 실제로 사용하는 개발자는 45개나 되는 구현체를 굳이 알필요가 없도록, 정적 팩터리 메서드를 사용하였다.<br>자바8부터는 인터페이스가 정적 메서드(public static) 를 가질 수 없는 제한이 풀렸다. 자바9에서는 private 정적메서드까지 허락하지만,정적 필드와 정적 멤버 클래스는 여전히 public이어야함. </p><h3 id="장점4-입력-매개변수에-따라-매번-다른-클래스의-객체를-반환할-수-있다"><a href="#장점4-입력-매개변수에-따라-매번-다른-클래스의-객체를-반환할-수-있다" class="headerlink" title="장점4. 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다."></a>장점4. 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.</h3><p>장점3과 비슷한 맥락이지만, 차이점은 매개변수의 갯수의 차이다. EnumSet은 public생성자가 없이 오직 정적 팩터리만 제공하는데, 원소가 64개 이하면 RegularEnumSet을 65개이상이면 JumboEnumSet의 인스턴스를 반환하게 구현되어있다.<br>하지만 굳이 개발자가 하위타입의 리턴타입을 알 필요가 있을까? 당연 없다. </p><h3 id="장점5-정적-팩터리-메서드를-작성하는-시점에는-반환할-객체의-클래스가-존재하지-않아도-된다"><a href="#장점5-정적-팩터리-메서드를-작성하는-시점에는-반환할-객체의-클래스가-존재하지-않아도-된다" class="headerlink" title="장점5. 정적 팩터리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다."></a>장점5. 정적 팩터리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.</h3><p>이 책에서는 위 장점의 예를 둔 부분이, JDBC이다. JDBC로 개발할때를 생각하면 어느정도 이해를 할 수 있다.</p><figure class="highlight java"><figcaption><span>jdbc example</span><a href="https://www.tutorialspoint.com/jdbc-class-forname-vs-drivermanager-registerdriver">tutorialspoint.com</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Registering the Driver</span></span><br><span class="line">   DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.jdbc.Driver());       <span class="comment">//Class.forName으로 자주 씀. </span></span><br><span class="line">   <span class="comment">//Getting the connection</span></span><br><span class="line">   String mysqlUrl = <span class="string">&quot;jdbc:mysql://localhost/mydatabase&quot;</span>;</span><br><span class="line">   Connection con = DriverManager.getConnection(mysqlUrl, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line">   System.out.println(<span class="string">&quot;Connection established: &quot;</span>+con);</span><br></pre></td></tr></table></figure><p>위 코드에서 확인 할 수 있듯이, Connection을 사용하기 위해서 <code>DriverManager.registerDriver</code> 통해서 어떤 DB의 방언을 사용할것 인지 결정하고 (제공자등록API),<br>Connection인터페이스는 어떤 DB방언에도 연결할수있도록 서비스 인터페이스 역할을 담당하고, 결국 <code>DriverManager.getConnection</code>을 통해서 서비스에 접근하여 인스턴스를 얻을수있도록 한다. 여기서 DriverManager.getConnection 이 장점5의 의도이다.<br>그래서 우리가 서로 다른 DB의 방언을 제공자 등록 API를 통해 세팅하고, DB접근정보가 담겨있는 서비스접근 API를 통해서 Connection 인터페이스로 반환하게 할때, 마치 DB를 연결하기 위해 중간다리 역할 (브리지 패턴) 처럼 혹은 레고 처럼 조립되는 과정이 있다는걸 알수가 있다. 우리가 흔히 알고있는 DI(의존객체주입) 와 유사하다고 생각하면 된다. </p><h3 id="단점1-상속을-하려면-public이나-protected-생성자가-필요하니-정적-팩터리-메서드만-제공하면-하위-클래스를-만들수-없다"><a href="#단점1-상속을-하려면-public이나-protected-생성자가-필요하니-정적-팩터리-메서드만-제공하면-하위-클래스를-만들수-없다" class="headerlink" title="단점1. 상속을 하려면 public이나 protected 생성자가 필요하니 정적 팩터리 메서드만 제공하면 하위 클래스를 만들수 없다."></a>단점1. 상속을 하려면 public이나 protected 생성자가 필요하니 정적 팩터리 메서드만 제공하면 하위 클래스를 만들수 없다.</h3><p>java.util.Collections 컬렉션 프레임워크 처럼 유틸리티 구현 클래스들은 상속할 수 없다는 이야기다. 글쓴이는 이 제약은 상속 보다는 컴포지션을 사용(아이템 18) 하도록 유도하고, 불변 타입(아이템 17)으로 만들려면 이 제약을 지켜야하기에 오히려 장점이 아닌가라고 생각했다.</p><h3 id="단점2-정적-펙터리-메서드는-프로그래머가-찾기-힘들다"><a href="#단점2-정적-펙터리-메서드는-프로그래머가-찾기-힘들다" class="headerlink" title="단점2. 정적 펙터리 메서드는 프로그래머가 찾기 힘들다."></a>단점2. 정적 펙터리 메서드는 프로그래머가 찾기 힘들다.</h3><p>개발자들이 각자의 네이밍룰로 정적 펙터리 메서드를 구현하면, 그 메서드를 찾기위해서 클래스를 찾아서 분석 해야하는 비용이 생겨서, 찾기 어렵다고 표현한것이 아닐까? 추측해본다.<br>그래서 글쓴이는 from, of, valueOf. getInstance 등과 같은 범용적으로 사용되는 정적 팩터리 메서드를 예시로 들면서, 네이밍으로도 그 기능을 알 수 있도록 구현하는걸 추천하고 있다. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;기본적으로 자바에서는 인스턴스를 얻는 수단은 public 생성자이지만,&lt;br&gt;클래스는 생성자와 별도로 정적 팩터리 메서드를 제공 할수 있다. &lt;/p&gt;
&lt;h2 id=&quot;아이템1-생성자-대신-정적-팩터리-메서드를-고려하라&quot;&gt;&lt;a href=&quot;#아이템1-</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Effective Java" scheme="https://codexdawn.github.io/categories/Effective-Java/"/>
    
    <category term="객체 생성과 파괴" scheme="https://codexdawn.github.io/categories/%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%8C%8C%EA%B4%B4/"/>
    
    
    <category term="Java,EffectiveJava" scheme="https://codexdawn.github.io/tags/Java-EffectiveJava/"/>
    
  </entry>
  
  <entry>
    <title>java-effective-4</title>
    <link href="https://codexdawn.github.io/2021/01/18/java-effective-4/"/>
    <id>https://codexdawn.github.io/2021/01/18/java-effective-4/</id>
    <published>2021-01-18T05:23:31.000Z</published>
    <updated>2021-01-18T08:06:26.709Z</updated>
    
    <content type="html"><![CDATA[<p>단순히 정적 메서드와 정적 필드만을 담은 클래스로 만들고 싶을 때가 있다. 예컨데, <code>java.lang.Math</code>와 <code>java.ulti.Arrays</code> 처럼 기본 타입이 값이나 배열 관련 메서드들을 모아놓을수도 있으며,     <code>java.util.Collections</code> 처럼 특정 인터페이스를 구현하는 객체를 생성해주는 정적 팩터리 메서드를 모아 놓을수도 있다.(java8 부터는 이런 메서드를 인터페이스에 넣을 수 있다.) 마지막으로, final 클래스와 관련한 메서드들을 모아놓을 때도 사용한다. (final 클래스를 상속해서 하위 클래스에 메서드를 넣는 건 불가능하기 때문)</p><h2 id="아이템4-인스턴스화를-막으려거든-private-생성자를-사용하라"><a href="#아이템4-인스턴스화를-막으려거든-private-생성자를-사용하라" class="headerlink" title="아이템4. 인스턴스화를 막으려거든 private 생성자를 사용하라."></a>아이템4. 인스턴스화를 막으려거든 private 생성자를 사용하라.</h2><p>정적 멤버만 담은 유틸리티 클래스는 인스턴스로 만들어 쓰려고 설계한 게 아니다. 하지만 생성자를 명시하지 않으면 컴파일러가 자동으로 기본생성자를 만들어준다. (public생성자 자동생성) </p><p><strong>추상 클래스로 만드는 것으로는 인스턴스화를 막을 수 없다.</strong>  왜냐하면 하위클래스를 만들어서 인스턴스 생성하면 그만이기때문이다. 그리고 이를 본 사용자들은 상속해서 쓰라는 뜻으로 오해할 수 있어서 더 큰 문제를 야기 시킬수 있다. 다행히도 인스턴스화를 막는 방법은 아주 간단한다. </p><p><strong>private 생성자를 추가하면 클래스의 인스턴스화를 막을수 있다.</strong> </p><figure class="highlight java"><figcaption><span>인스턴스를 만들수없는 유틸클래스</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilityClass</span> </span>&#123;</span><br><span class="line"><span class="comment">//기본 생성자가 만들어지는 것을 막는다 (인스턴스화 방지용)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">UtilityClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 와같이 private 생성자를 만들어두면, 인스턴스화가 안되며, 위 예시처럼 꼭 예외를 던질필요는 없으나, 개발자가 실수하지 않도록 명시를 해주는 편이 나쁘지는 않다. 또한 저자는 private생성자로 인스턴스 생성을 막았으면, 가독성을 위해서 위 예시처럼 주석을 달아두라고 권고하고있다. 그리고 이 방식은 상속을 불가능하게 하는 효과도 있다. 모든 생성자는 명시적인든 묵시적이든 상위 클래스의 생성자를 호출하게 되는데, 이를 private으로 선언했으니, 하위 클래스가 상위 클래스의 생성자에 접근할 길이 막혀버린다. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;단순히 정적 메서드와 정적 필드만을 담은 클래스로 만들고 싶을 때가 있다. 예컨데, &lt;code&gt;java.lang.Math&lt;/code&gt;와 &lt;code&gt;java.ulti.Arrays&lt;/code&gt; 처럼 기본 타입이 값이나 배열 관련 메서드들을 모아놓을수</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Effective Java" scheme="https://codexdawn.github.io/categories/Effective-Java/"/>
    
    <category term="객체 생성과 파괴" scheme="https://codexdawn.github.io/categories/%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%8C%8C%EA%B4%B4/"/>
    
    
    <category term="Java,EffectiveJava" scheme="https://codexdawn.github.io/tags/Java-EffectiveJava/"/>
    
  </entry>
  
  <entry>
    <title>java-effective-3</title>
    <link href="https://codexdawn.github.io/2021/01/18/java-effective-3/"/>
    <id>https://codexdawn.github.io/2021/01/18/java-effective-3/</id>
    <published>2021-01-18T01:58:36.000Z</published>
    <updated>2021-01-18T08:06:22.025Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>싱글턴(singleton) 이란?<br>=&gt; 인스턴스를 오직 하나만 생성할 수 있는 클래스<br>=&gt; ex) 함수와 같은 무상태 객체 (stateless object) , 설계상 유일해야하는 시스템 컨포넌트 </p></blockquote><h2 id="아이템3-private생성자나-열거타입으로-싱글턴임을-보증하라"><a href="#아이템3-private생성자나-열거타입으로-싱글턴임을-보증하라" class="headerlink" title="아이템3. private생성자나 열거타입으로 싱글턴임을 보증하라."></a>아이템3. private생성자나 열거타입으로 싱글턴임을 보증하라.</h2><p><strong>클래스를 싱글턴으로 만들면 이를 사용하는 클라이언트를 테스트하기가 어려워질 수 있다.</strong> 그 이유는 타입을 인터페이스로 정의한 다음 그 인터페이스를 구현해서 만든 싱글턴이 아니라면 싱글턴 인스턴스를 가짜 구현으로 대체 할 수 없기때문이다. 저자는 싱글턴 만드는 방식을 3가지로 소개한다. 아래 내용 참고 해보자. </p><h3 id="싱글턴1-public-static-멤버가-final-필드-방식"><a href="#싱글턴1-public-static-멤버가-final-필드-방식" class="headerlink" title="싱글턴1. public static 멤버가 final 필드 방식"></a>싱글턴1. public static 멤버가 final 필드 방식</h3><figure class="highlight java"><figcaption><span>public static final 필드 방식 싱긑턴</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elvis</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Elvis INSTANCE = <span class="keyword">new</span> Elvis(); </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Elvis</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">//내부 코드 중략 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leaveTheBuilding</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">//내부 코드 중략 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="싱글턴1의-장점"><a href="#싱글턴1의-장점" class="headerlink" title="싱글턴1의 장점"></a>싱글턴1의 장점</h4><ul><li>해당 클래스가 싱글턴임이 API에 명핵하게 드러남</li><li>간결함 </li></ul><h3 id="싱글턴2-정적팩터리-방식의-싱글턴"><a href="#싱글턴2-정적팩터리-방식의-싱글턴" class="headerlink" title="싱글턴2. 정적팩터리 방식의 싱글턴"></a>싱글턴2. 정적팩터리 방식의 싱글턴</h3><figure class="highlight java"><figcaption><span>정적팩터리 방식의 싱글턴</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elvis</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Elvis INSTANCE = <span class="keyword">new</span> Elvis(); </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Elvis</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Elvis <span class="title">getInstance</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> INSTANCE;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leaveTheBuilding</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="싱글턴2의-장점"><a href="#싱글턴2의-장점" class="headerlink" title="싱글턴2의 장점"></a>싱글턴2의 장점</h4><ul><li><p>마음만 먹으면 API를 바꾸지 않아도, 싱글턴이 아니게 변경 가능 </p></li><li><p>정적 팩터리를 제네릭 싱글턴 팩터리로 만들 수 있음 (아이템 30)</p></li><li><p>정적 팩터리의 메서드 참조를 공급자(supplier)로 사용할수 있음</p><figure class="highlight java"><figcaption><span>supplier 적용</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Supplier&lt;Elvis&gt; = Elvis::getInstance; </span><br></pre></td></tr></table></figure></li></ul><p>싱글턴1,2 방식으로 싱글턴을 개발하면, 직렬화 할때 Serializable을 구현만 하면 안되고, 역직렬화 되었을때 인스턴스가 생성되는 부분을 초반에 조져야 한다. 역직렬화 공격을 방어하려면, 아래 코드를 확인해보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;싱글턴임을 보장해주는 readResolve 메서드 </span><br><span class="line">private Object readResolve() &#123;</span><br><span class="line">&#x2F;&#x2F;진짜 Elvis는 반환하고, 가짜는 GC에 버린다. </span><br><span class="line">return INSTANCE; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="싱글턴3-원소가-하나인-열거타입-선언"><a href="#싱글턴3-원소가-하나인-열거타입-선언" class="headerlink" title="싱글턴3. 원소가 하나인 열거타입 선언"></a>싱글턴3. 원소가 하나인 열거타입 선언</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public enum Elvis &#123;</span><br><span class="line">INSTANCE; </span><br><span class="line"></span><br><span class="line">public void leaveTheBuilding() &#123;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="싱글턴3의-장점"><a href="#싱글턴3의-장점" class="headerlink" title="싱글턴3의 장점"></a>싱글턴3의 장점</h4><ul><li>싱글턴1 방식과 비슷하지만, 더 간결하고 추가적인 노력없이 직렬화 가능 하며 심지어 아주 복잡한 직렬화 상황이나 리플렉션 공격에도 제2의 인스턴스가 생성되는걸 방지 할 수 있다.</li></ul><p>조금 부자연스러워 보일수는 있는데, 저자는 대부분상황에서는 원소가 하나뿐인 열거타입이 싱글턴 만드는 가장 좋은 방법이라고 소개하고있다. 단, 만들려는 싱글턴이 Enum외의 클래스를 상속해야 한다면 이 방법은 사용할수 없다고 한다. (열거 타입이 다른 인터페이스를 구현하도록 선언 할 수는 있다.)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;&lt;p&gt;싱글턴(singleton) 이란?&lt;br&gt;=&amp;gt; 인스턴스를 오직 하나만 생성할 수 있는 클래스&lt;br&gt;=&amp;gt; ex) 함수와 같은 무상태 객체 (stateless object) , 설계상 유일해야하는 시스템 컨포넌트 &lt;/p</summary>
      
    
    
    
    <category term="Study" scheme="https://codexdawn.github.io/categories/Study/"/>
    
    <category term="Effective Java" scheme="https://codexdawn.github.io/categories/Effective-Java/"/>
    
    <category term="객체 생성과 파괴" scheme="https://codexdawn.github.io/categories/%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%8C%8C%EA%B4%B4/"/>
    
    
    <category term="Java,EffectiveJava,singleton" scheme="https://codexdawn.github.io/tags/Java-EffectiveJava-singleton/"/>
    
  </entry>
  
</feed>
